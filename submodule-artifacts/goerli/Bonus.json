{
  "address": "0x71aC34A2cEa5c1283Cb4F33E4aBA31580D288459",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityAdminInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "distributeXp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "levelMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "name": "setCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "name": "setNftInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "name": "setUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "16e041ddfee42844aa5d21825d00f4b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityAdminInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"distributeXp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"levelMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"name\":\"setCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"name\":\"setNftInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isTokenTransferable(address,uint256)\":{\"details\":\"See {IBonus-isTokenTransferable}.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributeXp(address,uint256)\":{\"notice\":\"Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\"},\"getAllocation(address)\":{\"notice\":\"Get user allocation `user` Address of user\"},\"getBonus(address)\":{\"notice\":\"Get user bonus reward for donation `user` Address of user\"},\"getLevel(address)\":{\"notice\":\"Get user level according to constant distribution. Max value: 65535 `user` Address of user\"},\"getNftAllocation(address)\":{\"notice\":\"Get nft allocation `user` Address of user\"},\"getNftBonus(address)\":{\"notice\":\"Get nft bonus reward for donation `user` Address of nft\"},\"setAdmin(address,bool)\":{\"notice\":\"Add or remove new admin `isAdmin` Address of admin\"},\"setNftInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and donationBonusRatio for NFT `isAdmin` Address of admin\"},\"setUserInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and donationBonusRatio for user `isAdmin` Address of admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonus.sol\":\"Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IBonus.sol\\\";\\nimport \\\"./access-control/SuAccessControlAuthenticated.sol\\\";\\n\\ncontract Bonus is IBonus, SuAccessControlAuthenticated {\\n    mapping(address => NFTInfo) public nftInfo;\\n    mapping(address => UserInfo) public userInfo;\\n\\n    mapping(address => AdminInfo) public adminInfo;\\n    mapping(address => CommunityAdminInfo) public communityAdminInfo;\\n\\n    mapping(uint16 => uint256) public levelMap;\\n\\n    function initialize(address _accessControlSingleton, address defaultAdmin) public initializer {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n        adminInfo[defaultAdmin].isAdmin = true;\\n\\n        levelMap[1] = 1000;\\n        levelMap[2] = 2000;\\n        levelMap[3] = 3200;\\n        levelMap[4] = 4600;\\n        levelMap[5] = 6200;\\n        levelMap[6] = 8000;\\n        levelMap[7] = 10000;\\n        levelMap[8] = 12200;\\n        levelMap[9] = 14700;\\n        levelMap[10] = 17500;\\n        levelMap[11] = 20600;\\n        levelMap[12] = 24320;\\n        levelMap[13] = 28784;\\n        levelMap[14] = 34140;\\n        levelMap[15] = 40567;\\n        levelMap[16] = 48279;\\n        levelMap[17] = 57533;\\n        levelMap[18] = 68637;\\n        levelMap[19] = 81961;\\n        levelMap[20] = 97949;\\n        levelMap[21] = 117134;\\n        levelMap[22] = 140156;\\n        levelMap[23] = 167782;\\n        levelMap[24] = 200933;\\n        levelMap[25] = 240714;\\n        levelMap[26] = 288451;\\n        levelMap[27] = 345735;\\n        levelMap[28] = 414475;\\n        levelMap[29] = 496963;\\n        levelMap[30] = 595948;\\n        levelMap[31] = 714730;\\n        levelMap[32] = 857268;\\n        levelMap[33] = 1028313;\\n        levelMap[34] = 1233567;\\n        levelMap[35] = 1479871;\\n        levelMap[36] = 1775435;\\n        levelMap[37] = 2130111;\\n        levelMap[38] = 2555722;\\n        levelMap[39] = 3066455;\\n        levelMap[40] = 3679334;\\n        levelMap[41] = 4414788;\\n        levelMap[42] = 5297332;\\n        levelMap[43] = 6356384;\\n        levelMap[44] = 7627246;\\n        levelMap[45] = 9152280;\\n        levelMap[46] = 10982320;\\n        levelMap[47] = 13178368;\\n        levelMap[48] = 15813625;\\n        levelMap[49] = 18975933;\\n        levelMap[50] = 22770702;\\n        levelMap[51] = 27324424;\\n        levelMap[52] = 32788890;\\n        levelMap[53] = 39346249;\\n        levelMap[54] = 47215079;\\n        levelMap[55] = 56657675;\\n        levelMap[56] = 67988790;\\n        levelMap[57] = 81586128;\\n        levelMap[58] = 97902933;\\n        levelMap[59] = 117483099;\\n        levelMap[60] = 140979298;\\n        levelMap[61] = 169174736;\\n        levelMap[62] = 203009261;\\n        levelMap[63] = 243610691;\\n        levelMap[64] = 292332407;\\n        levelMap[65] = 350798466;\\n        levelMap[66] = 420957736;\\n        levelMap[67] = 505148860;\\n        levelMap[68] = 606178208;\\n        levelMap[69] = 727413425;\\n        levelMap[70] = 872895685;\\n        levelMap[71] = 1047474397;\\n        levelMap[72] = 1256968851;\\n        levelMap[73] = 1508362195;\\n        levelMap[74] = 1810034207;\\n        levelMap[75] = 1810034207;\\n    }\\n\\n    function _getLevelByXP(uint256 xp) internal view returns (uint16) {\\n        for (uint16 i = 1; i <= 75; ++i) {\\n            if (xp < levelMap[i]) {\\n                return i;\\n            }\\n        }\\n        return 1;\\n    }\\n\\n    function getLevel(address user) public view override returns (uint16) {\\n        return _getLevelByXP(userInfo[user].xp);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) public onlyRole(DAO_ROLE) override {\\n        adminInfo[admin].isAdmin = isAdmin;\\n    }\\n\\n    function setCommunityAdmin(address communityAdmin, uint256 xpLimit, uint16 levelLimit) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        communityAdminInfo[communityAdmin].xpLimit = xpLimit;\\n        communityAdminInfo[communityAdmin].levelLimit = levelLimit;\\n    }\\n\\n    function setNftInfo(address nft, uint256 allocation, uint256 donationBonusRatio) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        nftInfo[nft].allocation = allocation;\\n        nftInfo[nft].donationBonusRatio = donationBonusRatio;\\n    }\\n\\n    function setUserInfo(address user, uint256 allocation, uint256 donationBonusRatio) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        userInfo[user].allocation = allocation;\\n        userInfo[user].donationBonusRatio = donationBonusRatio;\\n    }\\n\\n    function distributeXp(address user, uint256 xp) public override {\\n        require(communityAdminInfo[msg.sender].levelLimit > 0, \\\"Need communityAdmin rights\\\");\\n        require(\\n            xp <= communityAdminInfo[msg.sender].xpLimit,\\n            \\\"XP to distribute shouldn't be more than admin xpLimit\\\"\\n        );\\n\\n        communityAdminInfo[msg.sender].xpLimit = communityAdminInfo[msg.sender].xpLimit - xp;\\n        userInfo[user].xp = userInfo[user].xp + xp;\\n\\n        uint16 newUserLevel = _getLevelByXP(userInfo[user].xp);\\n        require(\\n            newUserLevel <= communityAdminInfo[msg.sender].levelLimit,\\n            \\\"User level should be less than admin levelLimit\\\"\\n        );\\n    }\\n\\n    function getAllocation(address user) public view override returns (uint256) {\\n        return userInfo[user].allocation;\\n    }\\n\\n    function getNftAllocation(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].allocation;\\n    }\\n\\n\\n    function getBonus(address user) public view override returns (uint256) {\\n        return userInfo[user].donationBonusRatio;\\n    }\\n\\n    function getNftBonus(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].donationBonusRatio;\\n    }\\n\\n    /**\\n     * @dev See {IBonus-isTokenTransferable}.\\n     */\\n    function isTokenTransferable(address nft, uint256 tokenId) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xf52878d66364d2095d4bbec9e0e302dd62fa8ce6c60963eed42dc69bdc23c546\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\"); // Only contracts can have this role\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4a50894ed0ab215326036818d795d1e139241ef56cf065373d38853bd17596a3\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `donationBonusRatio` Bonus during distribution\\n     */\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `donationBonusRatio` Bonus during distribution\\n     */\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n     */\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n     */\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and donationBonusRatio for NFT\\n     * `isAdmin` Address of admin\\n     */\\n    function setNftInfo(address nft, uint256 allocation, uint256 donationBonusRatio) external;\\n\\n    /**\\n     * @notice Set allocation and donationBonusRatio for user\\n     * `isAdmin` Address of admin\\n     */\\n    function setUserInfo(address user, uint256 allocation, uint256 donationBonusRatio) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n     */\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n     */\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n     */\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n     */\\n    function distributeXp(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n     */\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user bonus reward for donation\\n     * `user` Address of user\\n     */\\n    function getBonus(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft allocation\\n     * `user` Address of user\\n     */\\n    function getNftAllocation(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft bonus reward for donation\\n     * `user` Address of nft\\n     */\\n    function getNftBonus(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Returns true/false whether this NFT with tokenId can do transfer\\n     */\\n    function isTokenTransferable(address nft, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa8d62842817350ce769ee1f20e6e2a1a177138d1007747a1db26b2923de0bb14\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101335760003560e01c806301ffc9a71461013857806303ee9f22146101605780630e0229231461018b5780631959a002146101c5578063248a9ca31461020f5780633a740a6314610222578063485cc9551461024e5780634b0bddd21461026357806375071d2a1461027657806375b238fc1461029d578063817c8966146102c4578063894ab265146102ea578063903ba6891461030057806391d1485414610320578063935920dd14610333578063a217fddf14610346578063b68ce71c1461034e578063bdab533114610371578063c3c41f8714610384578063dbcfb6bb146103c7578063de6851f8146103f3578063e3ac1e771461041c578063e9545b921461042f578063e9c2651814610346578063f5c972ac1461046b575b600080fd5b61014b610146366004611687565b61047e565b60405190151581526020015b60405180910390f35b603354610173906001600160a01b031681565b6040516001600160a01b039091168152602001610157565b6101b76101993660046116cd565b6001600160a01b031660009081526066602052604090206001015490565b604051908152602001610157565b6101f46101d33660046116cd565b60666020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610157565b6101b761021d3660046116e8565b6104fb565b6101b76102303660046116cd565b6001600160a01b031660009081526066602052604090206002015490565b61026161025c366004611701565b610569565b005b610261610271366004611745565b6111d9565b6101b77f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f81565b6101b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6102d76102d23660046116cd565b611232565b60405161ffff9091168152602001610157565b61014b6102f836600461177c565b600092915050565b6101b761030e3660046117b8565b60696020526000908152604090205481565b61014b61032e3660046117d3565b611254565b61026161034136600461177c565b6112cf565b6101b7600081565b61014b61035c3660046116cd565b60676020526000908152604090205460ff1681565b61026161037f3660046117f6565b6114a4565b6103af6103923660046116cd565b6068602052600090815260409020805460019091015461ffff1682565b6040805192835261ffff909116602083015201610157565b6101b76103d53660046116cd565b6001600160a01b031660009081526065602052604090206001015490565b6101b76104013660046116cd565b6001600160a01b031660009081526065602052604090205490565b61026161042a366004611829565b6114f5565b61045661043d3660046116cd565b6065602052600090815260409020805460019091015482565b60408051928352602083019190915201610157565b6102616104793660046117f6565b611559565b6033546040516301ffc9a760e01b81526001600160e01b0319831660048201526000916001600160a01b0316906301ffc9a790602401602060405180830381865afa1580156104d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190611865565b92915050565b60335460405163248a9ca360e01b8152600481018390526000916001600160a01b03169063248a9ca390602401602060405180830381865afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f59190611882565b600054610100900460ff16158080156105895750600054600160ff909116105b806105a35750303b1580156105a3575060005460ff166001145b61060b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561062e576000805461ff0019166101001790555b610637836115af565b6001600160a01b03821660009081526067602090815260408220805460ff19166001179055606990526103e87fc073f36c05b6a60b24c30a48974b549770d8fa354751fb3170c9dfd8ca536add556107d07f0e06b3a0ac1d519392f9d33f9b92cd5a527ceb8ad2859e7bfebef5dd54cfca9155610c807f56d594188730cd2db4f97166f7e9b0b9d5caa8ac32e0506fd5faeb5b224f8813556111f87f361dc51dab091026a1c79fd9b05565dd28a0361cae60a90e9f335322175f94eb556118387f58181d40e37140de35f3c83afb1757dd4cd983e09859bd6c5adeab622970d97955611f407fbca3f838d730ae2728eba81f5806986786f6f12f7baa90e2f78e0fabd83e6bfa556127107f880910d893c5e82a2d71e83422d2272290593214e6f6a6f31d7c1259f8f1bf3255612fa87f9960260aaa22d230a3b999f6243d727fef99faebfaa949c961ad27031f2529b85561396c7fd59adc5430ca4ad4d45faeae512b6e90e35d7c0c6967e4f84eaa44b3fe28f1345561445c7f9d9c791c65eec946a96f27e2cba142c68944ee11d8d5ec7c4fbac1de71b6a4f6556150787f244cb9069fbcb725e4397f5a720303b3689e621824aed89f7f5e99b2cca58e5955615f007f5b0c2d967fd44e417d85d0b77473b917da270d6a617cba15da43f2a4526eef3c556170707f87347c1f5c1139bb224ab27dcfe07a18cb516348e2572c7206727ab40103f5455561855c7f4f82bfaa5978cb61898b9e204c1f0b5ea55de2f7c6a0009acbb073d24fc4437b55619e777f89eb5f44a4dc6a7919471fadb15a9a28e04cf7710b29acf97cd7c2ede39ae8455561bc977f173736a2caf6a9b14f78d27f13a5386303c9608ee39f8b567fe78996fcfffab35561e0bd7f07f0ec94067ff61e1c386aa584e6f2d442e2a3c7920220af5c7b61fe33e94dc55562010c1d7ff6e99a294c459d63920c4000e94c86b81f9e68874f1759860a7b295e2268f0fa55620140297fe81dd57450e38d5d9592cd63f34b49464b5f70609c4b65a808fbcc91409fd9715562017e9d7fff0c76cd2fe6ea9745f9101b043d6a461ba37c5fdeb06db9198ae29f213689c5556201c98e7f23684f7e0ae1bbecbe5be8ae4673a5f4d2c07335881f11a34ba51263ca1600b3556202237c7f1fa0c10d259aaad2ebffc6f7907c0d5b7b228964b3281f3d92be217e31f1df5b5562028f667f80e3ec1a3b13a5445f027e444bd2f8391186118ad8811d8f3aba28175bcf79ab55620310e57f7053860f0e92bb14f2d3254a85f34cb20587fdfa85dc0f003f4beebe5e4a9997556203ac4a7fc2c2aa285b2628cac577c416f7536dbcacacd398c841af1a1cb6509c93605d0d55620466c37f697731bf2a05449312c1196a2f8efd08c96b8bf7d829d147f433928cb675536955620546877f2d93f843f7ba6e051d233b26b31d4267c0a8c43b9b1466e359d8942ac6991928556206530b7f9448a1e8c635cf05082bc299e0c152e5d0e3c2a9c2a58820a36bcd6ae1d3636855620795437f21fd17e2e989bdfaca314f28f91b1cb1aaa2defadd1de4fe0b14643ff5abdd0f55620917ec7f79e30baa56b10410fe8f65590b781960aad8bf40c5a49c82d705130f459ef4db55620ae7ea7fb0fd899876025dc8c24cbfce9a06e4bb9754325a213823fa6e9b191e2411015f55620d14b47ff8da5f587c92f16cbf3f9b6ee92f0538891219384fc4b7cb15206e5dfadab02d55620fb0d97fe069198880a7c13e3787b9e4d2ecc6b958a77820eef32abe2d743fb57c60b04f556212d29f7f56c0e29d9bcb11f9701c5c26a79d721921e53b74e7d567a30a1ffe483b3f503055621694bf7facf0d14e5c5622eda4bae4a10918de81f086072a43fdba3c4e3a0d03e39a32b755621b174b7f1f2a5a1c32b438be204d7439bf04309564f4e3475d916dac98066528b43d939155622080bf7fbceeb33f171d12c68f46aeef8a9333fd43d1d7a8957ac1f1d0f51757f6d2fd4b556226ff4a7f051b7af2a47db0adc6bc79b5c5fe812d506e961f59f19fe170a05e3f67fdc7d155622eca577f96ef85ad06443288e40cb962b35ba6d26b83aa40504d1f2f493356483c38915655623824667ffe2d86013d4d764bcd2241c7c1b5bd64137be1795c3b10bd0e2678c7763aa91e5562435d447ff508ee97c766efb8828e74fc5e1b1477e3b5e74619ddb93f101d1c172dc7fee2556250d4b47f7135572492c498f71f71e5ed19370167806f70cef7cba29713133e205d55a1e4556260fda07f98d8a6ff006bcf3c3fa7fe84dfebce4dc2a71e64e66c2f60c0f8f20af1f9f53555627461ee7f6047f7a71a1c63a6088dcc057b64015b45f65597e37da6081db487b61cdde9ae55628ba7187f8bfea47b66dc428dfb970f3de973c7f036c6caf724af46b0dd6591a445da878b5562a793b07fa1fd5e46828e6aa5113b3dae837facc035f87c2616ec0e15daba97fc38aaec765562c916007f83c8be171269008a12bebb79e267fe5f3a910ee62ec6a69cd7f5fc7929d7d05a5562f14bf97fa3c89584d723e9c73e80f325b5891ef0b7cb81b340e28bda4997fe2b1fccf0a7556301218cbd7f87d2439914cdc1fe7311abff4587d0e587fde6a27534d17382b1215cc17f17ea5563015b740e7f7178c8dc65184127f81a52f1023e03c6364a7bab296c8b7fb0017f4fd024656b556301a0f0087ffe6fe1e9304e7873f5f7b48919bc5e807b2e24e83f306888c3b49872481b2bc1556301f4519a7f4cae7989b00ecc6cbc0ede1596a47d699c3d4233449eb1fac91945f1aa5439325563025860497f320bf403bc3047e9e375e0aaa19f65ee2195e1b198ecef5cc7ed36f9aabb2730556302d071e77ff02103b4fc3c50afc31beb1eaebbb6d923df76e411e9ed203f2ee73ae43f255755630360870b7f69273a56457376e766647352827df4c4ba21de6257d791d1efa3d71d895b07885563040d6d367f2b2d6e97176389d3452e1e45eebb158e8d5bde8d2ae0187b04d4ffcacfa65c56556304dce7d07fb21ea589f1ee8d8f300e902dbb377636f4ab203be503d34b478b6465e216c4b8556305d5e1557fe5093b694a14d4a22f7b54717d1afd3e1b8cf2203f064a47d9b90da7d2b1ff0b55630700a65b7f36eaea52f1ccef4d4694b579f7901028d8290ad492331a94116d159660daf90f556308672c627f4d288cd041d5c6c4df52e2de81caf50132cf361728e9cc2688ec4abbd2a3271455630a1566d07f90f0e0ae010a8e89ade85d8005ca665ad359b66a10a91129594e2af299c8d8cf55630c19aced7fcd396c429f0573e7959ca5153ac909bc06a9babd9c320287edf9548393db362b55630e8534437f03e6dcd80301afcb4a8f7fcf67cd61730cb41860d3d34879558d65fbefd6c9125563116ca3777f0d89316c31929786f9a67664fb88d12f6eaa4ec23c3dcd34b08ed09eccb09961556314e8c2827f716babd5cb33b6e0e8e46cc42890503c48ae8cbb266c3c9b1b7ff3e0fd7aedf3556319174e287f89cd3611dd5abecb8c8c0877af30ea9b5a3bf3f2fe514eb989c5894df748d46a55631e1bf5bc7f9770d7f3f610d684108f0b7e0c6ce7df85f3c52995f513d02494544afe3504f8556324218ba07f6f8d2e2bf86818a68b1e091972824b379d94fa6bea504ba5ea7b47b6e9a6a73255632b5b72b17f4ec66f632ade49f416c7a88d5f3d837e3bec004437aace9c9573352376116c085563340754c57fd13f0be0ba920015439ca2cd324d475fb368a557d9f9ae8af5aafcef0d9229d655633e6f30dd7f60afd1d3fd857ca26b92a7c8f75695eb2fe09817fd15bd180158385cca84c83d55634aebd2937fd4949af822c1bfec569aec49d3e3c2d3e0b45b07a58048c94e2faa0a71be6111556359e7c7d37f3e8e60587252aae5da0359d99200c630b8c837c7bc5a3ac46c78c418ae6ec4a055636be2ee1f7f1cebad18d12d66dbddbe48f83a55e7813abb176b77415927d5338f90ec1aec16819055604b9091527f5a50e59335fb1937566da08eef7a9d045ba1e2e6d583c80c4ad4ba58f91bffa85580156111d4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60006111e58133611254565b6112065780336040516337c2e34360e01b815260040161060292919061189b565b506001600160a01b03919091166000908152606760205260409020805460ff1916911515919091179055565b6001600160a01b0381166000908152606660205260408120546104f59061163c565b603354604051632474521560e21b81526000916001600160a01b0316906391d1485490611287908690869060040161189b565b602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190611865565b9392505050565b3360009081526068602052604090206001015461ffff1661132f5760405162461bcd60e51b815260206004820152601a6024820152794e65656420636f6d6d756e69747941646d696e2072696768747360301b6044820152606401610602565b336000908152606860205260409020548111156113ac5760405162461bcd60e51b815260206004820152603560248201527f585020746f20646973747269627574652073686f756c646e2774206265206d6f6044820152741c99481d1a185b8818591b5a5b881e1c131a5b5a5d605a1b6064820152608401610602565b336000908152606860205260409020546113c79082906118c8565b336000908152606860209081526040808320939093556001600160a01b03851682526066905220546113fa9082906118df565b6001600160a01b03831660009081526066602052604081208290559061141f9061163c565b3360009081526068602052604090206001015490915061ffff90811690821611156111d45760405162461bcd60e51b815260206004820152602f60248201527f55736572206c6576656c2073686f756c64206265206c657373207468616e206160448201526e191b5a5b881b195d995b131a5b5a5d608a1b6064820152608401610602565b3360009081526067602052604090205460ff166114d35760405162461bcd60e51b8152600401610602906118f7565b6001600160a01b03909216600090815260656020526040902090815560010155565b3360009081526067602052604090205460ff166115245760405162461bcd60e51b8152600401610602906118f7565b6001600160a01b03929092166000908152606860205260409020908155600101805461ffff191661ffff909216919091179055565b3360009081526067602052604090205460ff166115885760405162461bcd60e51b8152600401610602906118f7565b6001600160a01b039092166000908152606660205260409020600181019190915560020155565b600054610100900460ff1661161a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610602565b603380546001600160a01b0319166001600160a01b0392909216919091179055565b600060015b604b8161ffff161161167e5761ffff811660009081526069602052604090205483101561166e5792915050565b61167781611922565b9050611641565b50600192915050565b60006020828403121561169957600080fd5b81356001600160e01b0319811681146112c857600080fd5b80356001600160a01b03811681146116c857600080fd5b919050565b6000602082840312156116df57600080fd5b6112c8826116b1565b6000602082840312156116fa57600080fd5b5035919050565b6000806040838503121561171457600080fd5b61171d836116b1565b915061172b602084016116b1565b90509250929050565b801515811461174257600080fd5b50565b6000806040838503121561175857600080fd5b611761836116b1565b9150602083013561177181611734565b809150509250929050565b6000806040838503121561178f57600080fd5b611798836116b1565b946020939093013593505050565b803561ffff811681146116c857600080fd5b6000602082840312156117ca57600080fd5b6112c8826117a6565b600080604083850312156117e657600080fd5b8235915061172b602084016116b1565b60008060006060848603121561180b57600080fd5b611814846116b1565b95602085013595506040909401359392505050565b60008060006060848603121561183e57600080fd5b611847846116b1565b92506020840135915061185c604085016117a6565b90509250925092565b60006020828403121561187757600080fd5b81516112c881611734565b60006020828403121561189457600080fd5b5051919050565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000828210156118da576118da6118b2565b500390565b600082198211156118f2576118f26118b2565b500190565b6020808252601190820152704e6565642061646d696e2072696768747360781b604082015260600190565b600061ffff808316818103611939576119396118b2565b600101939250505056fea2646970667358221220c0cf7643c179061633940cc821a14c6823b7593cdb8692bf7e4c37987d1ad3fc64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isTokenTransferable(address,uint256)": {
        "details": "See {IBonus-isTokenTransferable}."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributeXp(address,uint256)": {
        "notice": "Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)"
      },
      "getAllocation(address)": {
        "notice": "Get user allocation `user` Address of user"
      },
      "getBonus(address)": {
        "notice": "Get user bonus reward for donation `user` Address of user"
      },
      "getLevel(address)": {
        "notice": "Get user level according to constant distribution. Max value: 65535 `user` Address of user"
      },
      "getNftAllocation(address)": {
        "notice": "Get nft allocation `user` Address of user"
      },
      "getNftBonus(address)": {
        "notice": "Get nft bonus reward for donation `user` Address of nft"
      },
      "setAdmin(address,bool)": {
        "notice": "Add or remove new admin `isAdmin` Address of admin"
      },
      "setNftInfo(address,uint256,uint256)": {
        "notice": "Set allocation and donationBonusRatio for NFT `isAdmin` Address of admin"
      },
      "setUserInfo(address,uint256,uint256)": {
        "notice": "Set allocation and donationBonusRatio for user `isAdmin` Address of admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 628,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 631,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6023,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23369,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)24747"
      },
      {
        "astId": 23456,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21680,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "nftInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(NFTInfo)24608_storage)"
      },
      {
        "astId": 21685,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "userInfo",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(UserInfo)24615_storage)"
      },
      {
        "astId": 21690,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "adminInfo",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(AdminInfo)24618_storage)"
      },
      {
        "astId": 21695,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "communityAdminInfo",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(CommunityAdminInfo)24623_storage)"
      },
      {
        "astId": 21699,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "levelMap",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 22489,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)24747": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AdminInfo)24618_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.AdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AdminInfo)24618_storage"
      },
      "t_mapping(t_address,t_struct(CommunityAdminInfo)24623_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.CommunityAdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CommunityAdminInfo)24623_storage"
      },
      "t_mapping(t_address,t_struct(NFTInfo)24608_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)24608_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)24615_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)24615_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AdminInfo)24618_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.AdminInfo",
        "members": [
          {
            "astId": 24617,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "isAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CommunityAdminInfo)24623_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.CommunityAdminInfo",
        "members": [
          {
            "astId": 24620,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xpLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24622,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "levelLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTInfo)24608_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.NFTInfo",
        "members": [
          {
            "astId": 24605,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24607,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)24615_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.UserInfo",
        "members": [
          {
            "astId": 24610,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 24612,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 24614,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}