{
  "address": "0x11Ff32D3a9580644b04c5bada3A3Ad78BD62dDf5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract IAccessControlUpgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityAdminInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "name": "setCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setNftInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "174296126c5a96b07cac11a4ec4f4089",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract IAccessControlUpgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityAdminInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"name\":\"setCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setNftInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distribute(address,uint256)\":{\"notice\":\"Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*\"},\"getAllocation(address)\":{\"notice\":\"Get user allocation `user` Address of user*\"},\"getDiscount(address)\":{\"notice\":\"Get user discount ratio for presale `user` Address of user*\"},\"getLevel(address)\":{\"notice\":\"Get user level according to constant distribution. Max value: 65535 `user` Address of user*\"},\"setAdmin(address,bool)\":{\"notice\":\"Add or remove new admin `isAdmin` Address of admin*\"},\"setNftInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*\"},\"setUserInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for user `isAdmin` Address of admin*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonus.sol\":\"Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IBonus.sol\\\";\\nimport \\\"./access-control/SuAccessControlUpgradable.sol\\\";\\n\\ncontract Bonus is IBonus, SuAccessControlUpgradable {\\n    mapping(address => NFTInfo) public nftInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => CommunityAdminInfo) public communityAdminInfo;\\n    mapping(address => AdminInfo) public adminInfo;\\n\\n    function initialize(address _accessControlSingleton) public initializer {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n    }\\n\\n    function _getLevelByXP(uint256 xp) internal pure returns (uint16) {\\n        if (xp < 1000) return 1;\\n        if (xp < 2000) return 2;\\n        if (xp < 3200) return 3;\\n        if (xp < 4600) return 4;\\n        if (xp < 6200) return 5;\\n        if (xp < 8000) return 6;\\n        if (xp < 10000) return 7;\\n        if (xp < 12200) return 8;\\n        if (xp < 14700) return 9;\\n\\n        if (xp < 17500) return 10;\\n        if (xp < 20600) return 11;\\n        if (xp < 24320) return 12;\\n        if (xp < 28784) return 13;\\n        if (xp < 34140) return 14;\\n        if (xp < 40567) return 15;\\n        if (xp < 48279) return 16;\\n        if (xp < 57533) return 17;\\n        if (xp < 68637) return 18;\\n        if (xp < 81961) return 19;\\n\\n        if (xp < 97949) return 20;\\n        if (xp < 117134) return 21;\\n        if (xp < 140156) return 22;\\n        if (xp < 167782) return 23;\\n        if (xp < 200933) return 24;\\n        if (xp < 240714) return 25;\\n        if (xp < 288451) return 26;\\n        if (xp < 345735) return 27;\\n        if (xp < 414475) return 28;\\n        if (xp < 496963) return 29;\\n\\n        if (xp < 595948) return 30;\\n        if (xp < 714730) return 31;\\n        if (xp < 857268) return 32;\\n        if (xp < 1028313) return 33;\\n        if (xp < 1233567) return 34;\\n        if (xp < 1479871) return 35;\\n        if (xp < 1775435) return 36;\\n        if (xp < 2130111) return 37;\\n        if (xp < 2555722) return 38;\\n        if (xp < 3066455) return 39;\\n\\n        if (xp < 3679334) return 40;\\n        if (xp < 4414788) return 41;\\n        if (xp < 5297332) return 42;\\n        if (xp < 6356384) return 43;\\n        if (xp < 7627246) return 44;\\n        if (xp < 9152280) return 45;\\n        if (xp < 10982320) return 46;\\n        if (xp < 13178368) return 47;\\n        if (xp < 15813625) return 48;\\n        if (xp < 18975933) return 49;\\n\\n        if (xp < 22770702) return 50;\\n        if (xp < 27324424) return 51;\\n        if (xp < 32788890) return 52;\\n        if (xp < 39346249) return 53;\\n        if (xp < 47215079) return 54;\\n        if (xp < 56657675) return 55;\\n        if (xp < 67988790) return 56;\\n        if (xp < 81586128) return 57;\\n        if (xp < 97902933) return 58;\\n        if (xp < 117483099) return 59;\\n\\n        if (xp < 140979298) return 60;\\n        if (xp < 169174736) return 61;\\n        if (xp < 203009261) return 62;\\n        if (xp < 243610691) return 63;\\n        if (xp < 292332407) return 64;\\n        if (xp < 350798466) return 65;\\n        if (xp < 420957736) return 66;\\n        if (xp < 505148860) return 67;\\n        if (xp < 606178208) return 68;\\n        if (xp < 727413425) return 69;\\n\\n        if (xp < 872895685) return 70;\\n        if (xp < 1047474397) return 71;\\n        if (xp < 1256968851) return 72;\\n        if (xp < 1508362195) return 73;\\n        if (xp < 1810034207) return 74;\\n        if (xp >= 1810034207) return 75;\\n\\n        return 1;\\n    }\\n\\n    function getLevel(address user) public view override returns (uint16) {\\n        return _getLevelByXP(userInfo[user].xp);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) public onlyRole(DAO_ROLE) override {\\n        adminInfo[admin].isAdmin = isAdmin;\\n    }\\n\\n    function setCommunityAdmin(address communityAdmin, uint256 xpLimit, uint16 levelLimit) public onlyRole(ADMIN_ROLE) override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        communityAdminInfo[communityAdmin].xpLimit = xpLimit;\\n        communityAdminInfo[communityAdmin].levelLimit = levelLimit;\\n    }\\n\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) public onlyRole(ADMIN_ROLE) override {\\n        nftInfo[nft].allocation = allocation;\\n        nftInfo[nft].discountRatioPresale = discountRatioPresale;\\n    }\\n\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) public onlyRole(ADMIN_ROLE) override {\\n        userInfo[user].allocation = allocation;\\n        userInfo[user].discountRatioPresale = discountRatioPresale;\\n    }\\n\\n    function distribute(address user, uint256 xp) public onlyRole(COMMUNITY_ADMIN_ROLE) override {\\n        require(\\n            xp <= communityAdminInfo[msg.sender].xpLimit,\\n            \\\"XP to distribute shouldn't be more than admin xpLimit\\\"\\n        );\\n        communityAdminInfo[msg.sender].xpLimit = communityAdminInfo[msg.sender].xpLimit - xp;\\n        userInfo[user].xp = userInfo[user].xp + xp;\\n\\n        uint16 newUserLevel = _getLevelByXP(userInfo[user].xp);\\n        require(\\n            newUserLevel <= communityAdminInfo[msg.sender].levelLimit,\\n            \\\"User level should be les than admin levelLimit\\\"\\n        );\\n    }\\n\\n    function getAllocation(address user) public view override returns (uint256) {\\n        return userInfo[user].allocation;\\n    }\\n\\n    function getDiscount(address user) public view override returns (uint256) {\\n        return userInfo[user].discountRatioPresale;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x993c35fcccdcb9926b46dfeab61fbb9f521946c829cb4de0bfb53e7be65a3589\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlUpgradable.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlUpgradable is IAccessControlUpgradeable, IERC165Upgradeable, Initializable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    IAccessControlUpgradeable public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = IAccessControlUpgradeable(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        ACCESS_CONTROL_SINGLETON.grantRole(role, account);\\n    }\\n\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        ACCESS_CONTROL_SINGLETON.revokeRole(role, account);\\n    }\\n\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n       ACCESS_CONTROL_SINGLETON.renounceRole(role, account);\\n    }\\n\\n    //============================interfaces sugar============================\\n    /**\\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n    * Can only be called by the current owner.\\n    */\\n    function transferOwnership(address newOwner) external {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"Ownable: caller is not the owner\\\");\\n\\n        if (hasRole(ADMIN_ROLE, msg.sender)) {\\n            grantRole(ADMIN_ROLE, newOwner);\\n            revokeRole(ADMIN_ROLE, msg.sender);\\n        }\\n\\n        if (hasRole(COMMUNITY_ADMIN_ROLE, msg.sender)) {\\n            grantRole(COMMUNITY_ADMIN_ROLE, newOwner);\\n            revokeRole(COMMUNITY_ADMIN_ROLE, msg.sender);\\n        }\\n\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        revokeRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd8fdfe9dbf20a85994c166ad3b27b45a5deee778353b39d23c8214025d67b939\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n    **/\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n    **/\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for NFT\\n     * `isAdmin` Address of admin\\n    **/\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for user\\n     * `isAdmin` Address of admin\\n    **/\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n    **/\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n    **/\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n    **/\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n    **/\\n    function distribute(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n    **/\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user discount ratio for presale\\n     * `user` Address of user\\n    **/\\n    function getDiscount(address user) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x069ec979712eecea4b1334e4c5e005f07d2aa972c8eab70cfaab13fd4c5b7822\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4ac6a0162f4409354a6676cfd2ce64c3d66d9ac9d5fa20327bc4197acd3fb952\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612768806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806395367f89116100de578063d547741f11610097578063e9c2651811610071578063e9c2651814610498578063f2fde38b146104b6578063f5c972ac146104d2578063fb932108146104ee57610173565b8063d547741f1461042f578063e3ac1e771461044b578063e9545b921461046757610173565b806395367f891461035a578063a217fddf14610378578063b68ce71c14610396578063bdab5331146103c6578063c3c41f87146103e2578063c4d66de81461041357610173565b80632f2ff15d116101305780632f2ff15d1461028857806336568abe146102a45780634b0bddd2146102c057806375b238fc146102dc578063817c8966146102fa57806391d148541461032a57610173565b806301ffc9a71461017857806303ee9f22146101a857806306f2791a146101c65780630e022923146101f65780631959a00214610226578063248a9ca314610258575b600080fd5b610192600480360381019061018d9190611cc3565b61050a565b60405161019f9190611d0b565b60405180910390f35b6101b0610574565b6040516101bd9190611da5565b60405180910390f35b6101e060048036038101906101db9190611dfe565b61059a565b6040516101ed9190611e44565b60405180910390f35b610210600480360381019061020b9190611dfe565b6105e6565b60405161021d9190611e44565b60405180910390f35b610240600480360381019061023b9190611dfe565b610632565b60405161024f93929190611e5f565b60405180910390f35b610272600480360381019061026d9190611ecc565b61065c565b60405161027f9190611f08565b60405180910390f35b6102a2600480360381019061029d9190611f23565b610700565b005b6102be60048036038101906102b99190611f23565b6107ea565b005b6102da60048036038101906102d59190611f8f565b61087d565b005b6102e461092d565b6040516102f19190611f08565b60405180910390f35b610314600480360381019061030f9190611dfe565b610951565b6040516103219190611fec565b60405180910390f35b610344600480360381019061033f9190611f23565b6109a5565b6040516103519190611d0b565b60405180910390f35b610362610a4c565b60405161036f9190611f08565b60405180910390f35b610380610a70565b60405161038d9190611f08565b60405180910390f35b6103b060048036038101906103ab9190611dfe565b610a77565b6040516103bd9190611d0b565b60405180910390f35b6103e060048036038101906103db9190612033565b610aa2565b005b6103fc60048036038101906103f79190611dfe565b610ba4565b60405161040a929190612086565b60405180910390f35b61042d60048036038101906104289190611dfe565b610bd6565b005b61044960048036038101906104449190611f23565b610d16565b005b610465600480360381019061046091906120db565b610e00565b005b610481600480360381019061047c9190611dfe565b610fa7565b60405161048f92919061212e565b60405180910390f35b6104a0610fcb565b6040516104ad9190611f08565b60405180910390f35b6104d060048036038101906104cb9190611dfe565b610fd2565b005b6104ec60048036038101906104e79190612033565b6111b2565b005b61050860048036038101906105039190612157565b6112b4565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60336020528060005260406000206000915090508060000154908060010154908060020154905083565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b81526004016106b89190611f08565b602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f991906121ac565b9050919050565b6107098261065c565b61071381336109a5565b6107565780336040517f37c2e34300000000000000000000000000000000000000000000000000000000815260040161074d9291906121e8565b60405180910390fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2ff15d84846040518363ffffffff1660e01b81526004016107b39291906121e8565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336568abe83836040518363ffffffff1660e01b81526004016108479291906121e8565b600060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050505050565b6000801b61088b81336109a5565b6108ce5780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016108c59291906121e8565b60405180910390fd5b81603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600061099e603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546115bf565b9050919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401610a039291906121e8565b602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612226565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b6000801b81565b60356020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610acd81336109a5565b610b105780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610b079291906121e8565b60405180910390fd5b82603260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505050565b60346020528060005260406000206000915090508060000154908060010160009054906101000a900461ffff16905082565b60008060019054906101000a900460ff16159050808015610c075750600160008054906101000a900460ff1660ff16105b80610c345750610c1630611bb0565b158015610c335750600160008054906101000a900460ff1660ff16145b5b610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a906122d6565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610cb0576001600060016101000a81548160ff0219169083151502179055505b610cb982611bd3565b8015610d125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d09919061233e565b60405180910390a15b5050565b610d1f8261065c565b610d2981336109a5565b610d6c5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610d639291906121e8565b60405180910390fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d547741f84846040518363ffffffff1660e01b8152600401610dc99291906121e8565b600060405180830381600087803b158015610de357600080fd5b505af1158015610df7573d6000803e3d6000fd5b50505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e2b81336109a5565b610e6e5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610e659291906121e8565b60405180910390fd5b603560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef4906123a5565b60405180910390fd5b82603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548161ffff021916908361ffff16021790555050505050565b60326020528060005260406000206000915090508060000154908060010154905082565b6000801b81565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103890612437565b60405180910390fd5b61104e6000801b336109a5565b61108d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611084906124a3565b60405180910390fd5b6110b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336109a5565b15611111576110e67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610700565b6111107fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610d16565b5b61113b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f653336109a5565b156111955761116a7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65382610700565b6111947f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65333610d16565b5b6111a26000801b82610700565b6111af6000801b33610d16565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111dd81336109a5565b6112205780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016112179291906121e8565b60405180910390fd5b82603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f6536112df81336109a5565b6113225780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016113199291906121e8565b60405180910390fd5b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548211156113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90612535565b60405180910390fd5b81603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546113f59190612584565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461148991906125b8565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600061151c603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546115bf565b9050603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900461ffff1661ffff168161ffff1611156115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090612680565b60405180910390fd5b50505050565b60006103e88210156115d45760019050611bab565b6107d08210156115e75760029050611bab565b610c808210156115fa5760039050611bab565b6111f882101561160d5760049050611bab565b6118388210156116205760059050611bab565b611f408210156116335760069050611bab565b6127108210156116465760079050611bab565b612fa88210156116595760089050611bab565b61396c82101561166c5760099050611bab565b61445c82101561167f57600a9050611bab565b61507882101561169257600b9050611bab565b615f008210156116a557600c9050611bab565b6170708210156116b857600d9050611bab565b61855c8210156116cb57600e9050611bab565b619e778210156116de57600f9050611bab565b61bc978210156116f15760109050611bab565b61e0bd8210156117045760119050611bab565b62010c1d8210156117185760129050611bab565b6201402982101561172c5760139050611bab565b62017e9d8210156117405760149050611bab565b6201c98e8210156117545760159050611bab565b6202237c8210156117685760169050611bab565b62028f6682101561177c5760179050611bab565b620310e58210156117905760189050611bab565b6203ac4a8210156117a45760199050611bab565b620466c38210156117b857601a9050611bab565b620546878210156117cc57601b9050611bab565b6206530b8210156117e057601c9050611bab565b620795438210156117f457601d9050611bab565b620917ec82101561180857601e9050611bab565b620ae7ea82101561181c57601f9050611bab565b620d14b48210156118305760209050611bab565b620fb0d98210156118445760219050611bab565b6212d29f8210156118585760229050611bab565b621694bf82101561186c5760239050611bab565b621b174b8210156118805760249050611bab565b622080bf8210156118945760259050611bab565b6226ff4a8210156118a85760269050611bab565b622eca578210156118bc5760279050611bab565b623824668210156118d05760289050611bab565b62435d448210156118e45760299050611bab565b6250d4b48210156118f857602a9050611bab565b6260fda082101561190c57602b9050611bab565b627461ee82101561192057602c9050611bab565b628ba71882101561193457602d9050611bab565b62a793b082101561194857602e9050611bab565b62c9160082101561195c57602f9050611bab565b62f14bf98210156119705760309050611bab565b6301218cbd8210156119855760319050611bab565b63015b740e82101561199a5760329050611bab565b6301a0f0088210156119af5760339050611bab565b6301f4519a8210156119c45760349050611bab565b63025860498210156119d95760359050611bab565b6302d071e78210156119ee5760369050611bab565b630360870b821015611a035760379050611bab565b63040d6d36821015611a185760389050611bab565b6304dce7d0821015611a2d5760399050611bab565b6305d5e155821015611a4257603a9050611bab565b630700a65b821015611a5757603b9050611bab565b6308672c62821015611a6c57603c9050611bab565b630a1566d0821015611a8157603d9050611bab565b630c19aced821015611a9657603e9050611bab565b630e853443821015611aab57603f9050611bab565b63116ca377821015611ac05760409050611bab565b6314e8c282821015611ad55760419050611bab565b6319174e28821015611aea5760429050611bab565b631e1bf5bc821015611aff5760439050611bab565b6324218ba0821015611b145760449050611bab565b632b5b72b1821015611b295760459050611bab565b63340754c5821015611b3e5760469050611bab565b633e6f30dd821015611b535760479050611bab565b634aebd293821015611b685760489050611bab565b6359e7c7d3821015611b7d5760499050611bab565b636be2ee1f821015611b9257604a9050611bab565b636be2ee1f8210611ba657604b9050611bab565b600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1990612712565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ca081611c6b565b8114611cab57600080fd5b50565b600081359050611cbd81611c97565b92915050565b600060208284031215611cd957611cd8611c66565b5b6000611ce784828501611cae565b91505092915050565b60008115159050919050565b611d0581611cf0565b82525050565b6000602082019050611d206000830184611cfc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d6b611d66611d6184611d26565b611d46565b611d26565b9050919050565b6000611d7d82611d50565b9050919050565b6000611d8f82611d72565b9050919050565b611d9f81611d84565b82525050565b6000602082019050611dba6000830184611d96565b92915050565b6000611dcb82611d26565b9050919050565b611ddb81611dc0565b8114611de657600080fd5b50565b600081359050611df881611dd2565b92915050565b600060208284031215611e1457611e13611c66565b5b6000611e2284828501611de9565b91505092915050565b6000819050919050565b611e3e81611e2b565b82525050565b6000602082019050611e596000830184611e35565b92915050565b6000606082019050611e746000830186611e35565b611e816020830185611e35565b611e8e6040830184611e35565b949350505050565b6000819050919050565b611ea981611e96565b8114611eb457600080fd5b50565b600081359050611ec681611ea0565b92915050565b600060208284031215611ee257611ee1611c66565b5b6000611ef084828501611eb7565b91505092915050565b611f0281611e96565b82525050565b6000602082019050611f1d6000830184611ef9565b92915050565b60008060408385031215611f3a57611f39611c66565b5b6000611f4885828601611eb7565b9250506020611f5985828601611de9565b9150509250929050565b611f6c81611cf0565b8114611f7757600080fd5b50565b600081359050611f8981611f63565b92915050565b60008060408385031215611fa657611fa5611c66565b5b6000611fb485828601611de9565b9250506020611fc585828601611f7a565b9150509250929050565b600061ffff82169050919050565b611fe681611fcf565b82525050565b60006020820190506120016000830184611fdd565b92915050565b61201081611e2b565b811461201b57600080fd5b50565b60008135905061202d81612007565b92915050565b60008060006060848603121561204c5761204b611c66565b5b600061205a86828701611de9565b935050602061206b8682870161201e565b925050604061207c8682870161201e565b9150509250925092565b600060408201905061209b6000830185611e35565b6120a86020830184611fdd565b9392505050565b6120b881611fcf565b81146120c357600080fd5b50565b6000813590506120d5816120af565b92915050565b6000806000606084860312156120f4576120f3611c66565b5b600061210286828701611de9565b93505060206121138682870161201e565b9250506040612124868287016120c6565b9150509250925092565b60006040820190506121436000830185611e35565b6121506020830184611e35565b9392505050565b6000806040838503121561216e5761216d611c66565b5b600061217c85828601611de9565b925050602061218d8582860161201e565b9150509250929050565b6000815190506121a681611ea0565b92915050565b6000602082840312156121c2576121c1611c66565b5b60006121d084828501612197565b91505092915050565b6121e281611dc0565b82525050565b60006040820190506121fd6000830185611ef9565b61220a60208301846121d9565b9392505050565b60008151905061222081611f63565b92915050565b60006020828403121561223c5761223b611c66565b5b600061224a84828501612211565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006122c0602e83612253565b91506122cb82612264565b604082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b6000819050919050565b600060ff82169050919050565b600061232861232361231e846122f6565b611d46565b612300565b9050919050565b6123388161230d565b82525050565b6000602082019050612353600083018461232f565b92915050565b7f4e6565642061646d696e20726967687473000000000000000000000000000000600082015250565b600061238f601183612253565b915061239a82612359565b602082019050919050565b600060208201905081810360008301526123be81612382565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612421602683612253565b915061242c826123c5565b604082019050919050565b6000602082019050818103600083015261245081612414565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061248d602083612253565b915061249882612457565b602082019050919050565b600060208201905081810360008301526124bc81612480565b9050919050565b7f585020746f20646973747269627574652073686f756c646e2774206265206d6f60008201527f7265207468616e2061646d696e2078704c696d69740000000000000000000000602082015250565b600061251f603583612253565b915061252a826124c3565b604082019050919050565b6000602082019050818103600083015261254e81612512565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061258f82611e2b565b915061259a83611e2b565b9250828210156125ad576125ac612555565b5b828203905092915050565b60006125c382611e2b565b91506125ce83611e2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561260357612602612555565b5b828201905092915050565b7f55736572206c6576656c2073686f756c64206265206c6573207468616e20616460008201527f6d696e206c6576656c4c696d6974000000000000000000000000000000000000602082015250565b600061266a602e83612253565b91506126758261260e565b604082019050919050565b600060208201905081810360008301526126998161265d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006126fc602b83612253565b9150612707826126a0565b604082019050919050565b6000602082019050818103600083015261272b816126ef565b905091905056fea264697066735822122082f27c71067c35a6aa194e967dd6fba04d1d2d8c251df0e50b9c54bc2520b60e64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806395367f89116100de578063d547741f11610097578063e9c2651811610071578063e9c2651814610498578063f2fde38b146104b6578063f5c972ac146104d2578063fb932108146104ee57610173565b8063d547741f1461042f578063e3ac1e771461044b578063e9545b921461046757610173565b806395367f891461035a578063a217fddf14610378578063b68ce71c14610396578063bdab5331146103c6578063c3c41f87146103e2578063c4d66de81461041357610173565b80632f2ff15d116101305780632f2ff15d1461028857806336568abe146102a45780634b0bddd2146102c057806375b238fc146102dc578063817c8966146102fa57806391d148541461032a57610173565b806301ffc9a71461017857806303ee9f22146101a857806306f2791a146101c65780630e022923146101f65780631959a00214610226578063248a9ca314610258575b600080fd5b610192600480360381019061018d9190611cc3565b61050a565b60405161019f9190611d0b565b60405180910390f35b6101b0610574565b6040516101bd9190611da5565b60405180910390f35b6101e060048036038101906101db9190611dfe565b61059a565b6040516101ed9190611e44565b60405180910390f35b610210600480360381019061020b9190611dfe565b6105e6565b60405161021d9190611e44565b60405180910390f35b610240600480360381019061023b9190611dfe565b610632565b60405161024f93929190611e5f565b60405180910390f35b610272600480360381019061026d9190611ecc565b61065c565b60405161027f9190611f08565b60405180910390f35b6102a2600480360381019061029d9190611f23565b610700565b005b6102be60048036038101906102b99190611f23565b6107ea565b005b6102da60048036038101906102d59190611f8f565b61087d565b005b6102e461092d565b6040516102f19190611f08565b60405180910390f35b610314600480360381019061030f9190611dfe565b610951565b6040516103219190611fec565b60405180910390f35b610344600480360381019061033f9190611f23565b6109a5565b6040516103519190611d0b565b60405180910390f35b610362610a4c565b60405161036f9190611f08565b60405180910390f35b610380610a70565b60405161038d9190611f08565b60405180910390f35b6103b060048036038101906103ab9190611dfe565b610a77565b6040516103bd9190611d0b565b60405180910390f35b6103e060048036038101906103db9190612033565b610aa2565b005b6103fc60048036038101906103f79190611dfe565b610ba4565b60405161040a929190612086565b60405180910390f35b61042d60048036038101906104289190611dfe565b610bd6565b005b61044960048036038101906104449190611f23565b610d16565b005b610465600480360381019061046091906120db565b610e00565b005b610481600480360381019061047c9190611dfe565b610fa7565b60405161048f92919061212e565b60405180910390f35b6104a0610fcb565b6040516104ad9190611f08565b60405180910390f35b6104d060048036038101906104cb9190611dfe565b610fd2565b005b6104ec60048036038101906104e79190612033565b6111b2565b005b61050860048036038101906105039190612157565b6112b4565b005b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60336020528060005260406000206000915090508060000154908060010154908060020154905083565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b81526004016106b89190611f08565b602060405180830381865afa1580156106d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f991906121ac565b9050919050565b6107098261065c565b61071381336109a5565b6107565780336040517f37c2e34300000000000000000000000000000000000000000000000000000000815260040161074d9291906121e8565b60405180910390fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632f2ff15d84846040518363ffffffff1660e01b81526004016107b39291906121e8565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50505050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166336568abe83836040518363ffffffff1660e01b81526004016108479291906121e8565b600060405180830381600087803b15801561086157600080fd5b505af1158015610875573d6000803e3d6000fd5b505050505050565b6000801b61088b81336109a5565b6108ce5780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016108c59291906121e8565b60405180910390fd5b81603560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600061099e603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546115bf565b9050919050565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401610a039291906121e8565b602060405180830381865afa158015610a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a449190612226565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b6000801b81565b60356020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610acd81336109a5565b610b105780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610b079291906121e8565b60405180910390fd5b82603260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505050565b60346020528060005260406000206000915090508060000154908060010160009054906101000a900461ffff16905082565b60008060019054906101000a900460ff16159050808015610c075750600160008054906101000a900460ff1660ff16105b80610c345750610c1630611bb0565b158015610c335750600160008054906101000a900460ff1660ff16145b5b610c73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6a906122d6565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610cb0576001600060016101000a81548160ff0219169083151502179055505b610cb982611bd3565b8015610d125760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610d09919061233e565b60405180910390a15b5050565b610d1f8261065c565b610d2981336109a5565b610d6c5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610d639291906121e8565b60405180910390fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d547741f84846040518363ffffffff1660e01b8152600401610dc99291906121e8565b600060405180830381600087803b158015610de357600080fd5b505af1158015610df7573d6000803e3d6000fd5b50505050505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610e2b81336109a5565b610e6e5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610e659291906121e8565b60405180910390fd5b603560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef4906123a5565b60405180910390fd5b82603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548161ffff021916908361ffff16021790555050505050565b60326020528060005260406000206000915090508060000154908060010154905082565b6000801b81565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611041576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103890612437565b60405180910390fd5b61104e6000801b336109a5565b61108d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611084906124a3565b60405180910390fd5b6110b77fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775336109a5565b15611111576110e67fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582610700565b6111107fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177533610d16565b5b61113b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f653336109a5565b156111955761116a7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65382610700565b6111947f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65333610d16565b5b6111a26000801b82610700565b6111af6000801b33610d16565b50565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111dd81336109a5565b6112205780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016112179291906121e8565b60405180910390fd5b82603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f6536112df81336109a5565b6113225780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016113199291906121e8565b60405180910390fd5b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548211156113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90612535565b60405180910390fd5b81603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546113f59190612584565b603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461148991906125b8565b603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600061151c603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546115bf565b9050603460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900461ffff1661ffff168161ffff1611156115b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b090612680565b60405180910390fd5b50505050565b60006103e88210156115d45760019050611bab565b6107d08210156115e75760029050611bab565b610c808210156115fa5760039050611bab565b6111f882101561160d5760049050611bab565b6118388210156116205760059050611bab565b611f408210156116335760069050611bab565b6127108210156116465760079050611bab565b612fa88210156116595760089050611bab565b61396c82101561166c5760099050611bab565b61445c82101561167f57600a9050611bab565b61507882101561169257600b9050611bab565b615f008210156116a557600c9050611bab565b6170708210156116b857600d9050611bab565b61855c8210156116cb57600e9050611bab565b619e778210156116de57600f9050611bab565b61bc978210156116f15760109050611bab565b61e0bd8210156117045760119050611bab565b62010c1d8210156117185760129050611bab565b6201402982101561172c5760139050611bab565b62017e9d8210156117405760149050611bab565b6201c98e8210156117545760159050611bab565b6202237c8210156117685760169050611bab565b62028f6682101561177c5760179050611bab565b620310e58210156117905760189050611bab565b6203ac4a8210156117a45760199050611bab565b620466c38210156117b857601a9050611bab565b620546878210156117cc57601b9050611bab565b6206530b8210156117e057601c9050611bab565b620795438210156117f457601d9050611bab565b620917ec82101561180857601e9050611bab565b620ae7ea82101561181c57601f9050611bab565b620d14b48210156118305760209050611bab565b620fb0d98210156118445760219050611bab565b6212d29f8210156118585760229050611bab565b621694bf82101561186c5760239050611bab565b621b174b8210156118805760249050611bab565b622080bf8210156118945760259050611bab565b6226ff4a8210156118a85760269050611bab565b622eca578210156118bc5760279050611bab565b623824668210156118d05760289050611bab565b62435d448210156118e45760299050611bab565b6250d4b48210156118f857602a9050611bab565b6260fda082101561190c57602b9050611bab565b627461ee82101561192057602c9050611bab565b628ba71882101561193457602d9050611bab565b62a793b082101561194857602e9050611bab565b62c9160082101561195c57602f9050611bab565b62f14bf98210156119705760309050611bab565b6301218cbd8210156119855760319050611bab565b63015b740e82101561199a5760329050611bab565b6301a0f0088210156119af5760339050611bab565b6301f4519a8210156119c45760349050611bab565b63025860498210156119d95760359050611bab565b6302d071e78210156119ee5760369050611bab565b630360870b821015611a035760379050611bab565b63040d6d36821015611a185760389050611bab565b6304dce7d0821015611a2d5760399050611bab565b6305d5e155821015611a4257603a9050611bab565b630700a65b821015611a5757603b9050611bab565b6308672c62821015611a6c57603c9050611bab565b630a1566d0821015611a8157603d9050611bab565b630c19aced821015611a9657603e9050611bab565b630e853443821015611aab57603f9050611bab565b63116ca377821015611ac05760409050611bab565b6314e8c282821015611ad55760419050611bab565b6319174e28821015611aea5760429050611bab565b631e1bf5bc821015611aff5760439050611bab565b6324218ba0821015611b145760449050611bab565b632b5b72b1821015611b295760459050611bab565b63340754c5821015611b3e5760469050611bab565b633e6f30dd821015611b535760479050611bab565b634aebd293821015611b685760489050611bab565b6359e7c7d3821015611b7d5760499050611bab565b636be2ee1f821015611b9257604a9050611bab565b636be2ee1f8210611ba657604b9050611bab565b600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1990612712565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ca081611c6b565b8114611cab57600080fd5b50565b600081359050611cbd81611c97565b92915050565b600060208284031215611cd957611cd8611c66565b5b6000611ce784828501611cae565b91505092915050565b60008115159050919050565b611d0581611cf0565b82525050565b6000602082019050611d206000830184611cfc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611d6b611d66611d6184611d26565b611d46565b611d26565b9050919050565b6000611d7d82611d50565b9050919050565b6000611d8f82611d72565b9050919050565b611d9f81611d84565b82525050565b6000602082019050611dba6000830184611d96565b92915050565b6000611dcb82611d26565b9050919050565b611ddb81611dc0565b8114611de657600080fd5b50565b600081359050611df881611dd2565b92915050565b600060208284031215611e1457611e13611c66565b5b6000611e2284828501611de9565b91505092915050565b6000819050919050565b611e3e81611e2b565b82525050565b6000602082019050611e596000830184611e35565b92915050565b6000606082019050611e746000830186611e35565b611e816020830185611e35565b611e8e6040830184611e35565b949350505050565b6000819050919050565b611ea981611e96565b8114611eb457600080fd5b50565b600081359050611ec681611ea0565b92915050565b600060208284031215611ee257611ee1611c66565b5b6000611ef084828501611eb7565b91505092915050565b611f0281611e96565b82525050565b6000602082019050611f1d6000830184611ef9565b92915050565b60008060408385031215611f3a57611f39611c66565b5b6000611f4885828601611eb7565b9250506020611f5985828601611de9565b9150509250929050565b611f6c81611cf0565b8114611f7757600080fd5b50565b600081359050611f8981611f63565b92915050565b60008060408385031215611fa657611fa5611c66565b5b6000611fb485828601611de9565b9250506020611fc585828601611f7a565b9150509250929050565b600061ffff82169050919050565b611fe681611fcf565b82525050565b60006020820190506120016000830184611fdd565b92915050565b61201081611e2b565b811461201b57600080fd5b50565b60008135905061202d81612007565b92915050565b60008060006060848603121561204c5761204b611c66565b5b600061205a86828701611de9565b935050602061206b8682870161201e565b925050604061207c8682870161201e565b9150509250925092565b600060408201905061209b6000830185611e35565b6120a86020830184611fdd565b9392505050565b6120b881611fcf565b81146120c357600080fd5b50565b6000813590506120d5816120af565b92915050565b6000806000606084860312156120f4576120f3611c66565b5b600061210286828701611de9565b93505060206121138682870161201e565b9250506040612124868287016120c6565b9150509250925092565b60006040820190506121436000830185611e35565b6121506020830184611e35565b9392505050565b6000806040838503121561216e5761216d611c66565b5b600061217c85828601611de9565b925050602061218d8582860161201e565b9150509250929050565b6000815190506121a681611ea0565b92915050565b6000602082840312156121c2576121c1611c66565b5b60006121d084828501612197565b91505092915050565b6121e281611dc0565b82525050565b60006040820190506121fd6000830185611ef9565b61220a60208301846121d9565b9392505050565b60008151905061222081611f63565b92915050565b60006020828403121561223c5761223b611c66565b5b600061224a84828501612211565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006122c0602e83612253565b91506122cb82612264565b604082019050919050565b600060208201905081810360008301526122ef816122b3565b9050919050565b6000819050919050565b600060ff82169050919050565b600061232861232361231e846122f6565b611d46565b612300565b9050919050565b6123388161230d565b82525050565b6000602082019050612353600083018461232f565b92915050565b7f4e6565642061646d696e20726967687473000000000000000000000000000000600082015250565b600061238f601183612253565b915061239a82612359565b602082019050919050565b600060208201905081810360008301526123be81612382565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612421602683612253565b915061242c826123c5565b604082019050919050565b6000602082019050818103600083015261245081612414565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061248d602083612253565b915061249882612457565b602082019050919050565b600060208201905081810360008301526124bc81612480565b9050919050565b7f585020746f20646973747269627574652073686f756c646e2774206265206d6f60008201527f7265207468616e2061646d696e2078704c696d69740000000000000000000000602082015250565b600061251f603583612253565b915061252a826124c3565b604082019050919050565b6000602082019050818103600083015261254e81612512565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061258f82611e2b565b915061259a83611e2b565b9250828210156125ad576125ac612555565b5b828203905092915050565b60006125c382611e2b565b91506125ce83611e2b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561260357612602612555565b5b828201905092915050565b7f55736572206c6576656c2073686f756c64206265206c6573207468616e20616460008201527f6d696e206c6576656c4c696d6974000000000000000000000000000000000000602082015250565b600061266a602e83612253565b91506126758261260e565b604082019050919050565b600060208201905081810360008301526126998161265d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006126fc602b83612253565b9150612707826126a0565b604082019050919050565b6000602082019050818103600083015261272b816126ef565b905091905056fea264697066735822122082f27c71067c35a6aa194e967dd6fba04d1d2d8c251df0e50b9c54bc2520b60e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distribute(address,uint256)": {
        "notice": "Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*"
      },
      "getAllocation(address)": {
        "notice": "Get user allocation `user` Address of user*"
      },
      "getDiscount(address)": {
        "notice": "Get user discount ratio for presale `user` Address of user*"
      },
      "getLevel(address)": {
        "notice": "Get user level according to constant distribution. Max value: 65535 `user` Address of user*"
      },
      "setAdmin(address,bool)": {
        "notice": "Add or remove new admin `isAdmin` Address of admin*"
      },
      "setNftInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*"
      },
      "setUserInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for user `isAdmin` Address of admin*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 157,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 160,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 8840,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IAccessControlUpgradeable)72"
      },
      {
        "astId": 9063,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7895,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "nftInfo",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_struct(NFTInfo)9939_storage)"
      },
      {
        "astId": 7900,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "userInfo",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(UserInfo)9946_storage)"
      },
      {
        "astId": 7905,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "communityAdminInfo",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_struct(CommunityAdminInfo)9954_storage)"
      },
      {
        "astId": 7910,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "adminInfo",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(AdminInfo)9949_storage)"
      },
      {
        "astId": 8612,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAccessControlUpgradeable)72": {
        "encoding": "inplace",
        "label": "contract IAccessControlUpgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AdminInfo)9949_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.AdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AdminInfo)9949_storage"
      },
      "t_mapping(t_address,t_struct(CommunityAdminInfo)9954_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.CommunityAdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CommunityAdminInfo)9954_storage"
      },
      "t_mapping(t_address,t_struct(NFTInfo)9939_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)9939_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)9946_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)9946_storage"
      },
      "t_struct(AdminInfo)9949_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.AdminInfo",
        "members": [
          {
            "astId": 9948,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "isAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CommunityAdminInfo)9954_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.CommunityAdminInfo",
        "members": [
          {
            "astId": 9951,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xpLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9953,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "levelLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTInfo)9939_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.NFTInfo",
        "members": [
          {
            "astId": 9936,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9938,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "discountRatioPresale",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)9946_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.UserInfo",
        "members": [
          {
            "astId": 9941,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9943,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9945,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "discountRatioPresale",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}