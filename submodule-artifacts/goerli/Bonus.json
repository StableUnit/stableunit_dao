{
  "address": "0x0C86118Da836cf2ceBc9D77FaEf9E37B8dFA1C94",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityAdminInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "name": "setCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setNftInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "837ab385f55625d39d66d118a88b0ce6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityAdminInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"name\":\"setCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setNftInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distribute(address,uint256)\":{\"notice\":\"Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*\"},\"getAllocation(address)\":{\"notice\":\"Get user allocation `user` Address of user*\"},\"getDiscount(address)\":{\"notice\":\"Get user discount ratio for presale `user` Address of user*\"},\"getLevel(address)\":{\"notice\":\"Get user level according to constant distribution. Max value: 65535 `user` Address of user*\"},\"setAdmin(address,bool)\":{\"notice\":\"Add or remove new admin `isAdmin` Address of admin*\"},\"setNftInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*\"},\"setUserInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for user `isAdmin` Address of admin*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonus.sol\":\"Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IBonus.sol\\\";\\nimport \\\"./access-control/SuAccessControlAuthenticated.sol\\\";\\n\\ncontract Bonus is IBonus, SuAccessControlAuthenticated {\\n    mapping(address => NFTInfo) public nftInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => CommunityAdminInfo) public communityAdminInfo;\\n    mapping(address => AdminInfo) public adminInfo;\\n\\n    function initialize(address _accessControlSingleton) public initializer {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n    }\\n\\n    function _getLevelByXP(uint256 xp) internal pure returns (uint16) {\\n        if (xp < 1000) return 1;\\n        if (xp < 2000) return 2;\\n        if (xp < 3200) return 3;\\n        if (xp < 4600) return 4;\\n        if (xp < 6200) return 5;\\n        if (xp < 8000) return 6;\\n        if (xp < 10000) return 7;\\n        if (xp < 12200) return 8;\\n        if (xp < 14700) return 9;\\n\\n        if (xp < 17500) return 10;\\n        if (xp < 20600) return 11;\\n        if (xp < 24320) return 12;\\n        if (xp < 28784) return 13;\\n        if (xp < 34140) return 14;\\n        if (xp < 40567) return 15;\\n        if (xp < 48279) return 16;\\n        if (xp < 57533) return 17;\\n        if (xp < 68637) return 18;\\n        if (xp < 81961) return 19;\\n\\n        if (xp < 97949) return 20;\\n        if (xp < 117134) return 21;\\n        if (xp < 140156) return 22;\\n        if (xp < 167782) return 23;\\n        if (xp < 200933) return 24;\\n        if (xp < 240714) return 25;\\n        if (xp < 288451) return 26;\\n        if (xp < 345735) return 27;\\n        if (xp < 414475) return 28;\\n        if (xp < 496963) return 29;\\n\\n        if (xp < 595948) return 30;\\n        if (xp < 714730) return 31;\\n        if (xp < 857268) return 32;\\n        if (xp < 1028313) return 33;\\n        if (xp < 1233567) return 34;\\n        if (xp < 1479871) return 35;\\n        if (xp < 1775435) return 36;\\n        if (xp < 2130111) return 37;\\n        if (xp < 2555722) return 38;\\n        if (xp < 3066455) return 39;\\n\\n        if (xp < 3679334) return 40;\\n        if (xp < 4414788) return 41;\\n        if (xp < 5297332) return 42;\\n        if (xp < 6356384) return 43;\\n        if (xp < 7627246) return 44;\\n        if (xp < 9152280) return 45;\\n        if (xp < 10982320) return 46;\\n        if (xp < 13178368) return 47;\\n        if (xp < 15813625) return 48;\\n        if (xp < 18975933) return 49;\\n\\n        if (xp < 22770702) return 50;\\n        if (xp < 27324424) return 51;\\n        if (xp < 32788890) return 52;\\n        if (xp < 39346249) return 53;\\n        if (xp < 47215079) return 54;\\n        if (xp < 56657675) return 55;\\n        if (xp < 67988790) return 56;\\n        if (xp < 81586128) return 57;\\n        if (xp < 97902933) return 58;\\n        if (xp < 117483099) return 59;\\n\\n        if (xp < 140979298) return 60;\\n        if (xp < 169174736) return 61;\\n        if (xp < 203009261) return 62;\\n        if (xp < 243610691) return 63;\\n        if (xp < 292332407) return 64;\\n        if (xp < 350798466) return 65;\\n        if (xp < 420957736) return 66;\\n        if (xp < 505148860) return 67;\\n        if (xp < 606178208) return 68;\\n        if (xp < 727413425) return 69;\\n\\n        if (xp < 872895685) return 70;\\n        if (xp < 1047474397) return 71;\\n        if (xp < 1256968851) return 72;\\n        if (xp < 1508362195) return 73;\\n        if (xp < 1810034207) return 74;\\n        if (xp >= 1810034207) return 75;\\n\\n        return 1;\\n    }\\n\\n    function getLevel(address user) public view override returns (uint16) {\\n        return _getLevelByXP(userInfo[user].xp);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) public onlyRole(DAO_ROLE) override {\\n        adminInfo[admin].isAdmin = isAdmin;\\n    }\\n\\n    function setCommunityAdmin(address communityAdmin, uint256 xpLimit, uint16 levelLimit) public onlyRole(ADMIN_ROLE) override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        communityAdminInfo[communityAdmin].xpLimit = xpLimit;\\n        communityAdminInfo[communityAdmin].levelLimit = levelLimit;\\n    }\\n\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) public onlyRole(ADMIN_ROLE) override {\\n        nftInfo[nft].allocation = allocation;\\n        nftInfo[nft].discountRatioPresale = discountRatioPresale;\\n    }\\n\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) public onlyRole(ADMIN_ROLE) override {\\n        userInfo[user].allocation = allocation;\\n        userInfo[user].discountRatioPresale = discountRatioPresale;\\n    }\\n\\n    function distribute(address user, uint256 xp) public onlyRole(COMMUNITY_ADMIN_ROLE) override {\\n        require(\\n            xp <= communityAdminInfo[msg.sender].xpLimit,\\n            \\\"XP to distribute shouldn't be more than admin xpLimit\\\"\\n        );\\n        communityAdminInfo[msg.sender].xpLimit = communityAdminInfo[msg.sender].xpLimit - xp;\\n        userInfo[user].xp = userInfo[user].xp + xp;\\n\\n        uint16 newUserLevel = _getLevelByXP(userInfo[user].xp);\\n        require(\\n            newUserLevel <= communityAdminInfo[msg.sender].levelLimit,\\n            \\\"User level should be les than admin levelLimit\\\"\\n        );\\n    }\\n\\n    function getAllocation(address user) public view override returns (uint256) {\\n        return userInfo[user].allocation;\\n    }\\n\\n    function getDiscount(address user) public view override returns (uint256) {\\n        return userInfo[user].discountRatioPresale;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x3d450489e9efed274d4fcc0fb03396b53fce8f663915872b71015a1e96fde4ba\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x945d2d816d58d609ca4a481ebc567a6f00a6e1cce88c869c681a867c06e50bb1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n    **/\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n    **/\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for NFT\\n     * `isAdmin` Address of admin\\n    **/\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for user\\n     * `isAdmin` Address of admin\\n    **/\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n    **/\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n    **/\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n    **/\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n    **/\\n    function distribute(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n    **/\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user discount ratio for presale\\n     * `user` Address of user\\n    **/\\n    function getDiscount(address user) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x069ec979712eecea4b1334e4c5e005f07d2aa972c8eab70cfaab13fd4c5b7822\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506121de806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806395367f89116100b8578063c4d66de81161007c578063c4d66de81461039f578063e3ac1e77146103bb578063e9545b92146103d7578063e9c2651814610408578063f5c972ac14610426578063fb9321081461044257610137565b806395367f89146102e6578063a217fddf14610304578063b68ce71c14610322578063bdab533114610352578063c3c41f871461036e57610137565b8063248a9ca3116100ff578063248a9ca31461021c5780634b0bddd21461024c57806375b238fc14610268578063817c89661461028657806391d14854146102b657610137565b806301ffc9a71461013c57806303ee9f221461016c57806306f2791a1461018a5780630e022923146101ba5780631959a002146101ea575b600080fd5b6101566004803603810190610151919061180d565b61045e565b6040516101639190611855565b60405180910390f35b610174610503565b60405161018191906118ef565b60405180910390f35b6101a4600480360381019061019f9190611948565b610529565b6040516101b1919061198e565b60405180910390f35b6101d460048036038101906101cf9190611948565b610575565b6040516101e1919061198e565b60405180910390f35b61020460048036038101906101ff9190611948565b6105c1565b604051610213939291906119a9565b60405180910390f35b61023660048036038101906102319190611a16565b6105eb565b6040516102439190611a52565b60405180910390f35b61026660048036038101906102619190611a99565b610690565b005b610270610740565b60405161027d9190611a52565b60405180910390f35b6102a0600480360381019061029b9190611948565b610764565b6040516102ad9190611af6565b60405180910390f35b6102d060048036038101906102cb9190611b11565b6107b8565b6040516102dd9190611855565b60405180910390f35b6102ee610860565b6040516102fb9190611a52565b60405180910390f35b61030c610884565b6040516103199190611a52565b60405180910390f35b61033c60048036038101906103379190611948565b61088b565b6040516103499190611855565b60405180910390f35b61036c60048036038101906103679190611b7d565b6108b6565b005b61038860048036038101906103839190611948565b6109b8565b604051610396929190611bd0565b60405180910390f35b6103b960048036038101906103b49190611948565b6109ea565b005b6103d560048036038101906103d09190611c25565b610b2a565b005b6103f160048036038101906103ec9190611948565b610cd1565b6040516103ff929190611c78565b60405180910390f35b610410610cf5565b60405161041d9190611a52565b60405180910390f35b610440600480360381019061043b9190611b7d565b610cfc565b005b61045c60048036038101906104579190611ca1565b610dfe565b005b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b81526004016104bb9190611cf0565b602060405180830381865afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190611d20565b9050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60666020528060005260406000206000915090508060000154908060010154908060020154905083565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b81526004016106489190611a52565b602060405180830381865afa158015610665573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106899190611d62565b9050919050565b6000801b61069e81336107b8565b6106e15780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016106d8929190611d9e565b60405180910390fd5b81606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff021916908315150217905550505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60006107b1606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611109565b9050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401610817929190611d9e565b602060405180830381865afa158015610834573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108589190611d20565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b6000801b81565b60686020528060005260406000206000915090508060000160009054906101000a900460ff16905081565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756108e181336107b8565b6109245780336040517f37c2e34300000000000000000000000000000000000000000000000000000000815260040161091b929190611d9e565b60405180910390fd5b82606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555050505050565b60676020528060005260406000206000915090508060000154908060010160009054906101000a900461ffff16905082565b60008060019054906101000a900460ff16159050808015610a1b5750600160008054906101000a900460ff1660ff16105b80610a485750610a2a306116fa565b158015610a475750600160008054906101000a900460ff1660ff16145b5b610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7e90611e4a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610ac4576001600060016101000a81548160ff0219169083151502179055505b610acd8261171d565b8015610b265760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610b1d9190611eb2565b60405180910390a15b5050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b5581336107b8565b610b985780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610b8f929190611d9e565b60405180910390fd5b606860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff16610c27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1e90611f19565b60405180910390fd5b82606760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081606760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548161ffff021916908361ffff16021790555050505050565b60656020528060005260406000206000915090508060000154908060010154905082565b6000801b81565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610d2781336107b8565b610d6a5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610d61929190611d9e565b60405180910390fd5b82606660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555081606660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f653610e2981336107b8565b610e6c5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610e63929190611d9e565b60405180910390fd5b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154821115610ef1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee890611fab565b60405180910390fd5b81606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610f3f9190611ffa565b606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555081606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610fd3919061202e565b606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506000611066606660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154611109565b9050606760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900461ffff1661ffff168161ffff161115611103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fa906120f6565b60405180910390fd5b50505050565b60006103e882101561111e57600190506116f5565b6107d082101561113157600290506116f5565b610c8082101561114457600390506116f5565b6111f882101561115757600490506116f5565b61183882101561116a57600590506116f5565b611f4082101561117d57600690506116f5565b61271082101561119057600790506116f5565b612fa88210156111a357600890506116f5565b61396c8210156111b657600990506116f5565b61445c8210156111c957600a90506116f5565b6150788210156111dc57600b90506116f5565b615f008210156111ef57600c90506116f5565b61707082101561120257600d90506116f5565b61855c82101561121557600e90506116f5565b619e7782101561122857600f90506116f5565b61bc9782101561123b57601090506116f5565b61e0bd82101561124e57601190506116f5565b62010c1d82101561126257601290506116f5565b6201402982101561127657601390506116f5565b62017e9d82101561128a57601490506116f5565b6201c98e82101561129e57601590506116f5565b6202237c8210156112b257601690506116f5565b62028f668210156112c657601790506116f5565b620310e58210156112da57601890506116f5565b6203ac4a8210156112ee57601990506116f5565b620466c382101561130257601a90506116f5565b6205468782101561131657601b90506116f5565b6206530b82101561132a57601c90506116f5565b6207954382101561133e57601d90506116f5565b620917ec82101561135257601e90506116f5565b620ae7ea82101561136657601f90506116f5565b620d14b482101561137a57602090506116f5565b620fb0d982101561138e57602190506116f5565b6212d29f8210156113a257602290506116f5565b621694bf8210156113b657602390506116f5565b621b174b8210156113ca57602490506116f5565b622080bf8210156113de57602590506116f5565b6226ff4a8210156113f257602690506116f5565b622eca5782101561140657602790506116f5565b6238246682101561141a57602890506116f5565b62435d4482101561142e57602990506116f5565b6250d4b482101561144257602a90506116f5565b6260fda082101561145657602b90506116f5565b627461ee82101561146a57602c90506116f5565b628ba71882101561147e57602d90506116f5565b62a793b082101561149257602e90506116f5565b62c916008210156114a657602f90506116f5565b62f14bf98210156114ba57603090506116f5565b6301218cbd8210156114cf57603190506116f5565b63015b740e8210156114e457603290506116f5565b6301a0f0088210156114f957603390506116f5565b6301f4519a82101561150e57603490506116f5565b630258604982101561152357603590506116f5565b6302d071e782101561153857603690506116f5565b630360870b82101561154d57603790506116f5565b63040d6d3682101561156257603890506116f5565b6304dce7d082101561157757603990506116f5565b6305d5e15582101561158c57603a90506116f5565b630700a65b8210156115a157603b90506116f5565b6308672c628210156115b657603c90506116f5565b630a1566d08210156115cb57603d90506116f5565b630c19aced8210156115e057603e90506116f5565b630e8534438210156115f557603f90506116f5565b63116ca37782101561160a57604090506116f5565b6314e8c28282101561161f57604190506116f5565b6319174e2882101561163457604290506116f5565b631e1bf5bc82101561164957604390506116f5565b6324218ba082101561165e57604490506116f5565b632b5b72b182101561167357604590506116f5565b63340754c582101561168857604690506116f5565b633e6f30dd82101561169d57604790506116f5565b634aebd2938210156116b257604890506116f5565b6359e7c7d38210156116c757604990506116f5565b636be2ee1f8210156116dc57604a90506116f5565b636be2ee1f82106116f057604b90506116f5565b600190505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176390612188565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117ea816117b5565b81146117f557600080fd5b50565b600081359050611807816117e1565b92915050565b600060208284031215611823576118226117b0565b5b6000611831848285016117f8565b91505092915050565b60008115159050919050565b61184f8161183a565b82525050565b600060208201905061186a6000830184611846565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118b56118b06118ab84611870565b611890565b611870565b9050919050565b60006118c78261189a565b9050919050565b60006118d9826118bc565b9050919050565b6118e9816118ce565b82525050565b600060208201905061190460008301846118e0565b92915050565b600061191582611870565b9050919050565b6119258161190a565b811461193057600080fd5b50565b6000813590506119428161191c565b92915050565b60006020828403121561195e5761195d6117b0565b5b600061196c84828501611933565b91505092915050565b6000819050919050565b61198881611975565b82525050565b60006020820190506119a3600083018461197f565b92915050565b60006060820190506119be600083018661197f565b6119cb602083018561197f565b6119d8604083018461197f565b949350505050565b6000819050919050565b6119f3816119e0565b81146119fe57600080fd5b50565b600081359050611a10816119ea565b92915050565b600060208284031215611a2c57611a2b6117b0565b5b6000611a3a84828501611a01565b91505092915050565b611a4c816119e0565b82525050565b6000602082019050611a676000830184611a43565b92915050565b611a768161183a565b8114611a8157600080fd5b50565b600081359050611a9381611a6d565b92915050565b60008060408385031215611ab057611aaf6117b0565b5b6000611abe85828601611933565b9250506020611acf85828601611a84565b9150509250929050565b600061ffff82169050919050565b611af081611ad9565b82525050565b6000602082019050611b0b6000830184611ae7565b92915050565b60008060408385031215611b2857611b276117b0565b5b6000611b3685828601611a01565b9250506020611b4785828601611933565b9150509250929050565b611b5a81611975565b8114611b6557600080fd5b50565b600081359050611b7781611b51565b92915050565b600080600060608486031215611b9657611b956117b0565b5b6000611ba486828701611933565b9350506020611bb586828701611b68565b9250506040611bc686828701611b68565b9150509250925092565b6000604082019050611be5600083018561197f565b611bf26020830184611ae7565b9392505050565b611c0281611ad9565b8114611c0d57600080fd5b50565b600081359050611c1f81611bf9565b92915050565b600080600060608486031215611c3e57611c3d6117b0565b5b6000611c4c86828701611933565b9350506020611c5d86828701611b68565b9250506040611c6e86828701611c10565b9150509250925092565b6000604082019050611c8d600083018561197f565b611c9a602083018461197f565b9392505050565b60008060408385031215611cb857611cb76117b0565b5b6000611cc685828601611933565b9250506020611cd785828601611b68565b9150509250929050565b611cea816117b5565b82525050565b6000602082019050611d056000830184611ce1565b92915050565b600081519050611d1a81611a6d565b92915050565b600060208284031215611d3657611d356117b0565b5b6000611d4484828501611d0b565b91505092915050565b600081519050611d5c816119ea565b92915050565b600060208284031215611d7857611d776117b0565b5b6000611d8684828501611d4d565b91505092915050565b611d988161190a565b82525050565b6000604082019050611db36000830185611a43565b611dc06020830184611d8f565b9392505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611e34602e83611dc7565b9150611e3f82611dd8565b604082019050919050565b60006020820190508181036000830152611e6381611e27565b9050919050565b6000819050919050565b600060ff82169050919050565b6000611e9c611e97611e9284611e6a565b611890565b611e74565b9050919050565b611eac81611e81565b82525050565b6000602082019050611ec76000830184611ea3565b92915050565b7f4e6565642061646d696e20726967687473000000000000000000000000000000600082015250565b6000611f03601183611dc7565b9150611f0e82611ecd565b602082019050919050565b60006020820190508181036000830152611f3281611ef6565b9050919050565b7f585020746f20646973747269627574652073686f756c646e2774206265206d6f60008201527f7265207468616e2061646d696e2078704c696d69740000000000000000000000602082015250565b6000611f95603583611dc7565b9150611fa082611f39565b604082019050919050565b60006020820190508181036000830152611fc481611f88565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061200582611975565b915061201083611975565b92508282101561202357612022611fcb565b5b828203905092915050565b600061203982611975565b915061204483611975565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561207957612078611fcb565b5b828201905092915050565b7f55736572206c6576656c2073686f756c64206265206c6573207468616e20616460008201527f6d696e206c6576656c4c696d6974000000000000000000000000000000000000602082015250565b60006120e0602e83611dc7565b91506120eb82612084565b604082019050919050565b6000602082019050818103600083015261210f816120d3565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000612172602b83611dc7565b915061217d82612116565b604082019050919050565b600060208201905081810360008301526121a181612165565b905091905056fea26469706673582212204a30e6923fb9e2e8d2143dcb70e0c7298855493f8e8b988a7cf20bc7ac7f257764736f6c634300080f0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distribute(address,uint256)": {
        "notice": "Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*"
      },
      "getAllocation(address)": {
        "notice": "Get user allocation `user` Address of user*"
      },
      "getDiscount(address)": {
        "notice": "Get user discount ratio for presale `user` Address of user*"
      },
      "getLevel(address)": {
        "notice": "Get user level according to constant distribution. Max value: 65535 `user` Address of user*"
      },
      "setAdmin(address,bool)": {
        "notice": "Add or remove new admin `isAdmin` Address of admin*"
      },
      "setNftInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*"
      },
      "setUserInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for user `isAdmin` Address of admin*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 497,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 500,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2868,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10494,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)11648"
      },
      {
        "astId": 10581,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9550,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "nftInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(NFTInfo)11535_storage)"
      },
      {
        "astId": 9555,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "userInfo",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(UserInfo)11542_storage)"
      },
      {
        "astId": 9560,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "communityAdminInfo",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(CommunityAdminInfo)11550_storage)"
      },
      {
        "astId": 9565,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "adminInfo",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(AdminInfo)11545_storage)"
      },
      {
        "astId": 10267,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)11648": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AdminInfo)11545_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.AdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AdminInfo)11545_storage"
      },
      "t_mapping(t_address,t_struct(CommunityAdminInfo)11550_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.CommunityAdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CommunityAdminInfo)11550_storage"
      },
      "t_mapping(t_address,t_struct(NFTInfo)11535_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)11535_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)11542_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)11542_storage"
      },
      "t_struct(AdminInfo)11545_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.AdminInfo",
        "members": [
          {
            "astId": 11544,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "isAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CommunityAdminInfo)11550_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.CommunityAdminInfo",
        "members": [
          {
            "astId": 11547,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xpLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11549,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "levelLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTInfo)11535_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.NFTInfo",
        "members": [
          {
            "astId": 11532,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11534,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "discountRatioPresale",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)11542_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.UserInfo",
        "members": [
          {
            "astId": 11537,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11539,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11541,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "discountRatioPresale",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}