{
  "address": "0x11141A573E5C1d4604456b96CA6b2f7f4f8Ad10E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityAdminInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "distributeXp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "name": "setCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setNftInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountRatioPresale",
          "type": "uint256"
        }
      ],
      "name": "setUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "e97f2c5d2d398fefa9f938d534248610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityAdminInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"distributeXp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"name\":\"setCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setNftInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountRatioPresale\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributeXp(address,uint256)\":{\"notice\":\"Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*\"},\"getAllocation(address)\":{\"notice\":\"Get user allocation `user` Address of user*\"},\"getBonus(address)\":{\"notice\":\"Get user bonus reward for donation `user` Address of user*\"},\"getLevel(address)\":{\"notice\":\"Get user level according to constant distribution. Max value: 65535 `user` Address of user*\"},\"getNftAllocation(address)\":{\"notice\":\"Get nft allocation `user` Address of user*\"},\"getNftBonus(address)\":{\"notice\":\"Get nft bonus reward for donation `user` Address of nft*\"},\"setAdmin(address,bool)\":{\"notice\":\"Add or remove new admin `isAdmin` Address of admin*\"},\"setNftInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*\"},\"setUserInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and discountRatioPresale for user `isAdmin` Address of admin*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonus.sol\":\"Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IBonus.sol\\\";\\nimport \\\"./access-control/SuAccessControlAuthenticated.sol\\\";\\n\\ncontract Bonus is IBonus, SuAccessControlAuthenticated {\\n    mapping(address => NFTInfo) public nftInfo;\\n    mapping(address => UserInfo) public userInfo;\\n    mapping(address => CommunityAdminInfo) public communityAdminInfo;\\n    mapping(address => AdminInfo) public adminInfo;\\n\\n    function initialize(address _accessControlSingleton) public initializer {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n    }\\n\\n    function _getLevelByXP(uint256 xp) internal pure returns (uint16) {\\n        if (xp < 1000) return 1;\\n        if (xp < 2000) return 2;\\n        if (xp < 3200) return 3;\\n        if (xp < 4600) return 4;\\n        if (xp < 6200) return 5;\\n        if (xp < 8000) return 6;\\n        if (xp < 10000) return 7;\\n        if (xp < 12200) return 8;\\n        if (xp < 14700) return 9;\\n\\n        if (xp < 17500) return 10;\\n        if (xp < 20600) return 11;\\n        if (xp < 24320) return 12;\\n        if (xp < 28784) return 13;\\n        if (xp < 34140) return 14;\\n        if (xp < 40567) return 15;\\n        if (xp < 48279) return 16;\\n        if (xp < 57533) return 17;\\n        if (xp < 68637) return 18;\\n        if (xp < 81961) return 19;\\n\\n        if (xp < 97949) return 20;\\n        if (xp < 117134) return 21;\\n        if (xp < 140156) return 22;\\n        if (xp < 167782) return 23;\\n        if (xp < 200933) return 24;\\n        if (xp < 240714) return 25;\\n        if (xp < 288451) return 26;\\n        if (xp < 345735) return 27;\\n        if (xp < 414475) return 28;\\n        if (xp < 496963) return 29;\\n\\n        if (xp < 595948) return 30;\\n        if (xp < 714730) return 31;\\n        if (xp < 857268) return 32;\\n        if (xp < 1028313) return 33;\\n        if (xp < 1233567) return 34;\\n        if (xp < 1479871) return 35;\\n        if (xp < 1775435) return 36;\\n        if (xp < 2130111) return 37;\\n        if (xp < 2555722) return 38;\\n        if (xp < 3066455) return 39;\\n\\n        if (xp < 3679334) return 40;\\n        if (xp < 4414788) return 41;\\n        if (xp < 5297332) return 42;\\n        if (xp < 6356384) return 43;\\n        if (xp < 7627246) return 44;\\n        if (xp < 9152280) return 45;\\n        if (xp < 10982320) return 46;\\n        if (xp < 13178368) return 47;\\n        if (xp < 15813625) return 48;\\n        if (xp < 18975933) return 49;\\n\\n        if (xp < 22770702) return 50;\\n        if (xp < 27324424) return 51;\\n        if (xp < 32788890) return 52;\\n        if (xp < 39346249) return 53;\\n        if (xp < 47215079) return 54;\\n        if (xp < 56657675) return 55;\\n        if (xp < 67988790) return 56;\\n        if (xp < 81586128) return 57;\\n        if (xp < 97902933) return 58;\\n        if (xp < 117483099) return 59;\\n\\n        if (xp < 140979298) return 60;\\n        if (xp < 169174736) return 61;\\n        if (xp < 203009261) return 62;\\n        if (xp < 243610691) return 63;\\n        if (xp < 292332407) return 64;\\n        if (xp < 350798466) return 65;\\n        if (xp < 420957736) return 66;\\n        if (xp < 505148860) return 67;\\n        if (xp < 606178208) return 68;\\n        if (xp < 727413425) return 69;\\n\\n        if (xp < 872895685) return 70;\\n        if (xp < 1047474397) return 71;\\n        if (xp < 1256968851) return 72;\\n        if (xp < 1508362195) return 73;\\n        if (xp < 1810034207) return 74;\\n        if (xp >= 1810034207) return 75;\\n\\n        return 1;\\n    }\\n\\n    function getLevel(address user) public view override returns (uint16) {\\n        return _getLevelByXP(userInfo[user].xp);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) public onlyRole(DAO_ROLE) override {\\n        adminInfo[admin].isAdmin = isAdmin;\\n    }\\n\\n    function setCommunityAdmin(address communityAdmin, uint256 xpLimit, uint16 levelLimit) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        communityAdminInfo[communityAdmin].xpLimit = xpLimit;\\n        communityAdminInfo[communityAdmin].levelLimit = levelLimit;\\n    }\\n\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        nftInfo[nft].allocation = allocation;\\n        nftInfo[nft].donationBonusRatio = discountRatioPresale;\\n    }\\n\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        userInfo[user].allocation = allocation;\\n        userInfo[user].donationBonusRatio = discountRatioPresale;\\n    }\\n\\n    function distributeXp(address user, uint256 xp) public override {\\n        require(communityAdminInfo[msg.sender].levelLimit > 0, \\\"Need communityAdmin rights\\\");\\n        require(\\n            xp <= communityAdminInfo[msg.sender].xpLimit,\\n            \\\"XP to distribute shouldn't be more than admin xpLimit\\\"\\n        );\\n\\n        communityAdminInfo[msg.sender].xpLimit = communityAdminInfo[msg.sender].xpLimit - xp;\\n        userInfo[user].xp = userInfo[user].xp + xp;\\n\\n        uint16 newUserLevel = _getLevelByXP(userInfo[user].xp);\\n        require(\\n            newUserLevel <= communityAdminInfo[msg.sender].levelLimit,\\n            \\\"User level should be less than admin levelLimit\\\"\\n        );\\n    }\\n\\n    function getAllocation(address user) public view override returns (uint256) {\\n        return userInfo[user].allocation;\\n    }\\n\\n    function getNftAllocation(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].allocation;\\n    }\\n\\n\\n    function getBonus(address user) public view override returns (uint256) {\\n        return userInfo[user].donationBonusRatio;\\n    }\\n\\n    function getNftBonus(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].donationBonusRatio;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x3c5c00d24c50be0df5760a8e9863dd9fedc5861b9c8c5e3f3fe39f0c8cd874ce\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x945d2d816d58d609ca4a481ebc567a6f00a6e1cce88c869c681a867c06e50bb1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n    **/\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n    **/\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for NFT\\n     * `isAdmin` Address of admin\\n    **/\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for user\\n     * `isAdmin` Address of admin\\n    **/\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n    **/\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n    **/\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n    **/\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n    **/\\n    function distributeXp(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n    **/\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user bonus reward for donation\\n     * `user` Address of user\\n    **/\\n    function getBonus(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft allocation\\n     * `user` Address of user\\n    **/\\n    function getNftAllocation(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft bonus reward for donation\\n     * `user` Address of nft\\n    **/\\n    function getNftBonus(address nft) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x23bbd861d034aec4bdb32d8e01d88d999eec0fdea6172f5bcd68ce0df5e3a4eb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributeXp(address,uint256)": {
        "notice": "Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)*"
      },
      "getAllocation(address)": {
        "notice": "Get user allocation `user` Address of user*"
      },
      "getBonus(address)": {
        "notice": "Get user bonus reward for donation `user` Address of user*"
      },
      "getLevel(address)": {
        "notice": "Get user level according to constant distribution. Max value: 65535 `user` Address of user*"
      },
      "getNftAllocation(address)": {
        "notice": "Get nft allocation `user` Address of user*"
      },
      "getNftBonus(address)": {
        "notice": "Get nft bonus reward for donation `user` Address of nft*"
      },
      "setAdmin(address,bool)": {
        "notice": "Add or remove new admin `isAdmin` Address of admin*"
      },
      "setNftInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for NFT `isAdmin` Address of admin*"
      },
      "setUserInfo(address,uint256,uint256)": {
        "notice": "Set allocation and discountRatioPresale for user `isAdmin` Address of admin*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 497,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 500,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4310,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11612,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)12922"
      },
      {
        "astId": 11699,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10623,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "nftInfo",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(NFTInfo)12793_storage)"
      },
      {
        "astId": 10628,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "userInfo",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_struct(UserInfo)12800_storage)"
      },
      {
        "astId": 10633,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "communityAdminInfo",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_struct(CommunityAdminInfo)12808_storage)"
      },
      {
        "astId": 10638,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "adminInfo",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_struct(AdminInfo)12803_storage)"
      },
      {
        "astId": 11385,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)12922": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AdminInfo)12803_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.AdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AdminInfo)12803_storage"
      },
      "t_mapping(t_address,t_struct(CommunityAdminInfo)12808_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.CommunityAdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CommunityAdminInfo)12808_storage"
      },
      "t_mapping(t_address,t_struct(NFTInfo)12793_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)12793_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)12800_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)12800_storage"
      },
      "t_struct(AdminInfo)12803_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.AdminInfo",
        "members": [
          {
            "astId": 12802,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "isAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CommunityAdminInfo)12808_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.CommunityAdminInfo",
        "members": [
          {
            "astId": 12805,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xpLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12807,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "levelLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTInfo)12793_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.NFTInfo",
        "members": [
          {
            "astId": 12790,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12792,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)12800_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.UserInfo",
        "members": [
          {
            "astId": 12795,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12797,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12799,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}