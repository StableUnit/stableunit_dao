{
  "address": "0xb96570D591B300E0Ac12e0edBf0BecC5F5E5762F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "AccessNftNotValidError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributionTimeframeError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "NoAccessNftError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveDistributionError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "msg_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        }
      ],
      "name": "Participated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_startTimestamp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_deadlineTimestamp",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_donationGoalMin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_donationGoalMax",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minimumDonation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_maximumDonation",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_donationToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_fullVestingSeconds",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_cliffSeconds",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_tgeUnlockRatio1e18",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_vestingFrequencySeconds",
          "type": "uint64"
        }
      ],
      "name": "SetDistribution",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BONUS_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SU_DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VE_ERC_20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "antiderivativeOfBondingCurvePolynomial1e18At",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondingCurvePolynomial1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "bondingCurvePolynomial1e18At",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cliffSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadlineTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationGoalMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationGoalMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullVestingSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccessNftsForUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        }
      ],
      "name": "getBondingCurveRewardAmountFromDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributorStaticData",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "startTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deadlineTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "minimumDonation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumDonation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationGoalMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationGoalMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "donationToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "fullVestingSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "cliffSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "tgeUnlockRatio1e18",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "vestingFrequencySeconds",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "getMaximumDonationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suDAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veErc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "participate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_startTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_deadlineTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_donationGoalMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_donationGoalMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDonation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maximumDonation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_donationToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_fullVestingSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_cliffSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_tgeUnlockRatio1e18",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_vestingFrequencySeconds",
          "type": "uint64"
        }
      ],
      "name": "setDistributionInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "setNftAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeDonationBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeUnlockRatio1e18",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDonations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingFrequencySeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "f7ea498ab8c47a60e64e4e9fbd9b2f67",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"AccessNftNotValidError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionTimeframeError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"NoAccessNftError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveDistributionError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msg_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"}],\"name\":\"Participated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_startTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_deadlineTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_donationGoalMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_donationGoalMax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumDonation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maximumDonation\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_donationToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_fullVestingSeconds\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_cliffSeconds\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_tgeUnlockRatio1e18\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_vestingFrequencySeconds\",\"type\":\"uint64\"}],\"name\":\"SetDistribution\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONUS_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SU_DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_ERC_20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"antiderivativeOfBondingCurvePolynomial1e18At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondingCurvePolynomial1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"bondingCurvePolynomial1e18At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationGoalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationGoalMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullVestingSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccessNftsForUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"}],\"name\":\"getBondingCurveRewardAmountFromDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributorStaticData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumDonation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumDonation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationGoalMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationGoalMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"donationToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"fullVestingSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cliffSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgeUnlockRatio1e18\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vestingFrequencySeconds\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"getMaximumDonationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veErc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_deadlineTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_donationGoalMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_donationGoalMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDonation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumDonation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_donationToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_fullVestingSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_cliffSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_tgeUnlockRatio1e18\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_vestingFrequencySeconds\",\"type\":\"uint64\"}],\"name\":\"setDistributionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setNftAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeDonationBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeUnlockRatio1e18\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFrequencySeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"adminWithdraw(address)\":{\"details\":\"The owner can't take away SuDAO token already distributed to users, because they are stored on timelockVault\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"The contract that distribute suDAO tokens for community based on NFT membership\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminWithdraw(address)\":{\"notice\":\"The owner of the contact can take away tokens sent to the contract.\"},\"getMaximumDonationAmount(address,address)\":{\"notice\":\"Get the max donation that user can do\"},\"participate(uint256,address)\":{\"notice\":\"notice Allows to participate for users with required NFT param donationAmount The amount of tokens specified in donationToken\"},\"setDistributionInfo(uint64,uint64,uint256,uint256,uint256,uint256,address,uint64,uint64,uint64,uint64)\":{\"notice\":\"The owner can set new or edit existing token distribution with no restrictions\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distributions/TokenDistributorV4.sol\":\"TokenDistributorV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        require(ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender), \\\"OnlyRoleError\\\");\\n        //if (!hasRole(role, _msgSender())) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfcaa307841610535e26903f7fe34adf230b7978daf9a6c2305fae844230ca042\",\"license\":\"BSL 1.1\"},\"contracts/distributions/TokenDistributorV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../access-control/SuAccessControlAuthenticated.sol\\\";\\nimport \\\"../interfaces/IBonus.sol\\\";\\nimport \\\"../interfaces/IveERC20.sol\\\";\\n\\n/**\\n * @title The contract that distribute suDAO tokens for community based on NFT membership\\n */\\ncontract TokenDistributorV4 is SuAccessControlAuthenticated {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using Math for *;\\n\\n    address public VE_ERC_20;\\n    address public SU_DAO;\\n    address public BONUS_CONTRACT;\\n\\n    uint64 public startTimestamp;                 // The date when participation is available\\n    uint64 public deadlineTimestamp;              // Ultimate date when participation is available\\n\\n    uint256 public minimumDonation;            // Let's think that price(donationToken) = $1\\n    uint256 public maximumDonation;\\n    uint256[] public bondingCurvePolynomial1e18;                  // Reserve ratio for Bancor formula, represented in ppm, 1-1000000\\n\\n    uint256 public donationGoalMin;\\n    uint256 public donationGoalMax;\\n    mapping(address => uint256) public donations; // Donation amounts\\n    uint256 public totalDonations;                // Sum of all user donations\\n    address public donationToken;                 // For now it's only DAI\\n\\n    uint64 public fullVestingSeconds;             // Default vesting period is 12 months\\n    uint64 public cliffSeconds;                   // With 3 months cliff.\\n    uint64 public tgeUnlockRatio1e18;\\n    uint64 public vestingFrequencySeconds;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private nftRequirement;\\n\\n\\n    error NoActiveDistributionError();\\n    error DistributionTimeframeError();\\n    error AccessNftNotValidError(address accessNft);\\n    error NoAccessNftError(address account, address accessNft);\\n\\n\\n    function initialize (address _accessControlSingleton, address _suDAO, address _veErc20, address _bonusContract) initializer public {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n        SU_DAO = _suDAO;\\n        VE_ERC_20 = _veErc20;\\n        BONUS_CONTRACT = _bonusContract;\\n        IERC20Upgradeable(_suDAO).approve(address(_veErc20), type(uint256).max);\\n    }\\n\\n    function bondingCurvePolynomial1e18At(uint256 x) public view returns (uint256) {\\n        uint256 l = bondingCurvePolynomial1e18.length;\\n        uint256 x_ = 1;\\n        uint256 px = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            px = px + bondingCurvePolynomial1e18[i]*x_ / 1e18;\\n            x_ = x_*x;\\n        }\\n        return px;\\n    }\\n\\n    function antiderivativeOfBondingCurvePolynomial1e18At(uint256 x) public view returns (uint256) {\\n        uint256 l = bondingCurvePolynomial1e18.length;\\n        uint256 x_ = x;\\n        uint256 px = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            px = px + bondingCurvePolynomial1e18[i]*x_ / (i+1);\\n            x_ = x_*x;\\n        }\\n        return px;\\n    }\\n\\n    function getBondingCurveRewardAmountFromDonation(uint256 donationAmount) public view returns (uint256) {\\n        uint256 S1 = antiderivativeOfBondingCurvePolynomial1e18At(totalDonations);\\n        uint256 S2 = antiderivativeOfBondingCurvePolynomial1e18At(totalDonations + donationAmount);\\n        return Math.min(IERC20Upgradeable(SU_DAO).balanceOf(address(this)), S2 - S1);\\n    }\\n\\n    function getAccessNftsForUser(address account) external returns (address[] memory) {\\n        address[] memory nfts = nftRequirement.values();\\n        uint256 l = nfts.length;\\n        address[] memory answer = new address[](l);\\n        for (uint256 i = 0; i < l; i++) {\\n            if (IERC721(nfts[i]).balanceOf(msg.sender) > 0) {\\n                answer[i] = nfts[i];\\n            }\\n        }\\n        return answer;\\n    }\\n\\n    /**\\n     * notice Allows to participate for users with required NFT\\n     * param donationAmount The amount of tokens specified in donationToken\\n     */\\n    function participate(uint256 donationAmount, address accessNft) payable external {\\n        if (donationGoalMax == 0)\\n            revert NoActiveDistributionError();\\n        if (block.timestamp < startTimestamp || deadlineTimestamp < block.timestamp)\\n            revert DistributionTimeframeError();\\n        if (!nftRequirement.contains(accessNft))\\n            revert AccessNftNotValidError(accessNft);\\n        if (IERC721(accessNft).balanceOf(msg.sender) == 0)\\n            revert NoAccessNftError(msg.sender, accessNft);\\n\\n        require(\\n            donationAmount > minimumDonation,\\n            \\\"Your donation should be greater than minimum donation\\\"\\n        );\\n\\n        uint256 bonusAllocation = IBonus(BONUS_CONTRACT).getAllocation(msg.sender);\\n        uint256 maxAllocation = bonusAllocation == 0 ? maximumDonation : bonusAllocation;\\n        require(\\n            donations[msg.sender] + donationAmount < maxAllocation,\\n            \\\"Your donations should be less than max donation\\\"\\n        );\\n\\n        uint256 bonusDiscountRatio = IBonus(BONUS_CONTRACT).getDiscount(msg.sender);\\n        uint256 rewardAmount = getBondingCurveRewardAmountFromDonation(donationAmount) * (1e18 + bonusDiscountRatio) / 1e18;\\n\\n        // get donation from the user\\n        IERC20Upgradeable(donationToken).safeTransferFrom(msg.sender, address(this), donationAmount);\\n        totalDonations = totalDonations + donationAmount;\\n        donations[msg.sender] = donations[msg.sender] + donationAmount;\\n\\n        // give reward to the user\\n        require(IERC20Upgradeable(SU_DAO).balanceOf(address(this)) >= rewardAmount, \\\"not enough reward left\\\");\\n        IveERC20(VE_ERC_20).lockUnderVesting(\\n            msg.sender,\\n            rewardAmount,\\n            fullVestingSeconds,\\n            cliffSeconds,\\n            tgeUnlockRatio1e18,\\n            vestingFrequencySeconds\\n        );\\n        emit Participated(msg.sender, donationAmount);\\n    }\\n\\n    /**\\n     * @notice Get the max donation that user can do\\n     */\\n    function getMaximumDonationAmount(address user, address accessNft) view external returns (uint256) {\\n        if (IERC721(accessNft).balanceOf(msg.sender) > 0) {\\n            return Math.min(\\n                maximumDonation - donations[user],\\n                donationGoalMax - totalDonations\\n            );\\n        }\\n        return 0;\\n    }\\n\\n    function takeDonationBack() external {\\n        require(block.timestamp >= deadlineTimestamp, \\\"Participation has not yet ended\\\");\\n        require(totalDonations < donationGoalMin, \\\"Min goal reached\\\");\\n        require(IERC20Upgradeable(VE_ERC_20).balanceOf(msg.sender) == 0, \\\"You should donate all your tokens in veERC20\\\");\\n\\n        uint256 donationAmount = donations[msg.sender];\\n        donations[msg.sender] = 0;\\n        totalDonations = totalDonations - donationAmount;\\n        IERC20Upgradeable(donationToken).safeTransferFrom(address(this), msg.sender, donationAmount);\\n    }\\n\\n    /**\\n     * @notice The owner can set new or edit existing token distribution with no restrictions\\n     */\\n    function setDistributionInfo(\\n        uint64 _startTimestamp,\\n        uint64 _deadlineTimestamp,\\n        uint256 _donationGoalMin,\\n        uint256 _donationGoalMax,\\n        uint256 _minimumDonation,\\n        uint256 _maximumDonation,\\n        address _donationToken,\\n        uint64 _fullVestingSeconds,\\n        uint64 _cliffSeconds,\\n        uint64 _tgeUnlockRatio1e18,\\n        uint64 _vestingFrequencySeconds\\n    ) external onlyRole(ADMIN_ROLE) {\\n        require(_startTimestamp < _deadlineTimestamp, \\\"!_startTimestamp < _deadlineTimestamp\\\");\\n        require(_donationGoalMin <= _donationGoalMax, \\\"!donationGoalMin <= donationGoalMax\\\");\\n        require(_minimumDonation <= _maximumDonation, \\\"!minimumDonationUsd <= maximumDonationUsd\\\");\\n        require(_donationToken != address(0), \\\"donationToken is null\\\");\\n        require(_cliffSeconds < _fullVestingSeconds, \\\"!cliff seconds < vesting seconds\\\");\\n        require(_tgeUnlockRatio1e18 <= 1e18, \\\"tgeUnlockRatio should be less than 1\\\");\\n\\n        startTimestamp = _startTimestamp;\\n        deadlineTimestamp = _deadlineTimestamp;\\n        donationGoalMin = _donationGoalMin;\\n        donationGoalMax = _donationGoalMax;\\n        minimumDonation = _minimumDonation;\\n        maximumDonation = _maximumDonation;\\n        donationToken = _donationToken;\\n        fullVestingSeconds = _fullVestingSeconds;\\n        cliffSeconds = _cliffSeconds;\\n        tgeUnlockRatio1e18 = _tgeUnlockRatio1e18;\\n        vestingFrequencySeconds = _vestingFrequencySeconds;\\n\\n        emit SetDistribution(\\n            _startTimestamp,\\n            _deadlineTimestamp,\\n            _donationGoalMin,\\n            _donationGoalMax,\\n            _minimumDonation,\\n            _maximumDonation,\\n            _donationToken,\\n            _fullVestingSeconds,\\n            _cliffSeconds,\\n            _tgeUnlockRatio1e18,\\n            _vestingFrequencySeconds\\n        );\\n    }\\n\\n    function setNftAccess(address accessNft, bool valid) external onlyRole(ADMIN_ROLE) {\\n        if (valid) {\\n            nftRequirement.add(accessNft);\\n        } else {\\n            nftRequirement.remove(accessNft);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function getDistributorStaticData() public returns (\\n        uint64 startTimestamp,\\n        uint64 deadlineTimestamp,\\n        uint256 minimumDonation,\\n        uint256 maximumDonation,\\n        uint256 donationGoalMin,\\n        uint256 donationGoalMax,\\n        address donationToken,\\n        uint64 fullVestingSeconds,\\n        uint64 cliffSeconds,\\n        uint64 tgeUnlockRatio1e18,\\n        uint64 vestingFrequencySeconds\\n    ) {\\n        return (\\n            startTimestamp,\\n            deadlineTimestamp,\\n            minimumDonation,\\n            maximumDonation,\\n            donationGoalMin,\\n            donationGoalMax,\\n            donationToken,\\n            fullVestingSeconds,\\n            cliffSeconds,\\n            tgeUnlockRatio1e18,\\n            vestingFrequencySeconds\\n        );\\n    }\\n\\n    /**\\n     * @notice The owner of the contact can take away tokens sent to the contract.\\n     * @dev The owner can't take away SuDAO token already distributed to users, because they are stored on timelockVault\\n     */\\n    function adminWithdraw(IERC20Upgradeable token) external onlyRole(DAO_ROLE) {\\n        if (token == IERC20Upgradeable(address(0))) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            token.safeTransfer(address(msg.sender), token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    event Participated(address msg_sender, uint256 donationAmount);\\n    event SetDistribution(\\n        uint64 _startTimestamp,\\n        uint64 _deadlineTimestamp,\\n        uint256 _donationGoalMin,\\n        uint256 _donationGoalMax,\\n        uint256 _minimumDonation,\\n        uint256 _maximumDonation,\\n        address _donationToken,\\n        uint64 _fullVestingSeconds,\\n        uint64 _cliffSeconds,\\n        uint64 _tgeUnlockRatio1e18,\\n        uint64 _vestingFrequencySeconds\\n    );\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7426abe97a8752a772c0abbfcd62ce4289a943f7b1ad1071ee21db1c14c6f6a9\",\"license\":\"MIT\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 discountRatioPresale;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n    **/\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n    **/\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for NFT\\n     * `isAdmin` Address of admin\\n    **/\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for user\\n     * `isAdmin` Address of admin\\n    **/\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n    **/\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n    **/\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n    **/\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n    **/\\n    function distribute(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n    **/\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user discount ratio for presale\\n     * `user` Address of user\\n    **/\\n    function getDiscount(address user) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x069ec979712eecea4b1334e4c5e005f07d2aa972c8eab70cfaab13fd4c5b7822\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"},\"contracts/interfaces/IveERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IveERC20 {\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3fce7c37422c1217a42572785409cd6ffc95c2c515fe0d777f111c4816c67ac1\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614421806100206000396000f3fe60806040526004361061021e5760003560e01c806395367f8911610123578063dc4eff7e116100ab578063f365642a1161006f578063f365642a146107fb578063f498446014610826578063f6d8414f14610863578063f8c8765e1461088e578063fee1d57c146108b757610225565b8063dc4eff7e14610738578063de2ed89314610763578063e6fd48bc1461078e578063e9c26518146107b9578063efb8f4fd146107e457610225565b80639dbf7935116100f25780639dbf79351461063f578063a217fddf1461067c578063a28835b6146106a7578063b5b8a68a146106d0578063cc6cb19a146106fb57610225565b806395367f891461058357806396d8f4f3146105ae5780639954a9bc146105d95780639d0c68461461060257610225565b806347b8ce3f116101a65780636c5a5428116101755780636c5a54281461048857806375b238fc146104c55780637b9fa8bd146104f05780638341ee721461051b57806391d148541461054657610225565b806347b8ce3f146103c05780634a591c6d146103fd5780635deb395b146104285780635e10448b1461045d57610225565b806313b18640116101ed57806313b18640146102e8578063248a9ca314610304578063303c1c8d1461034157806335864cdc1461036a578063445c4c8d1461039557610225565b806301ffc9a71461022a57806303ee9f22146102675780630afcdef5146102925780630df72159146102bd57610225565b3661022557005b600080fd5b34801561023657600080fd5b50610251600480360381019061024c9190612d26565b6108f4565b60405161025e9190612d6e565b60405180910390f35b34801561027357600080fd5b5061027c610999565b6040516102899190612e08565b60405180910390f35b34801561029e57600080fd5b506102a76109bf565b6040516102b49190612e46565b60405180910390f35b3480156102c957600080fd5b506102d26109d9565b6040516102df9190612e82565b60405180910390f35b61030260048036038101906102fd9190612eff565b6109ff565b005b34801561031057600080fd5b5061032b60048036038101906103269190612f75565b611136565b6040516103389190612fb1565b60405180910390f35b34801561034d57600080fd5b5061036860048036038101906103639190612ff8565b6111db565b005b34801561037657600080fd5b5061037f61167b565b60405161038c9190612e46565b60405180910390f35b3480156103a157600080fd5b506103aa611695565b6040516103b79190612e82565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e291906130ec565b6116bb565b6040516103f49190613128565b60405180910390f35b34801561040957600080fd5b5061041261174f565b60405161041f9190613128565b60405180910390f35b34801561043457600080fd5b5061043d611755565b6040516104549b9a99989796959493929190613143565b60405180910390f35b34801561046957600080fd5b50610472611773565b60405161047f9190612e46565b60405180910390f35b34801561049457600080fd5b506104af60048036038101906104aa91906130ec565b61178d565b6040516104bc9190613128565b60405180910390f35b3480156104d157600080fd5b506104da6117b1565b6040516104e79190612fb1565b60405180910390f35b3480156104fc57600080fd5b506105056117d5565b6040516105129190613128565b60405180910390f35b34801561052757600080fd5b506105306117db565b60405161053d9190612e46565b60405180910390f35b34801561055257600080fd5b5061056d600480360381019061056891906131ee565b6117f5565b60405161057a9190612d6e565b60405180910390f35b34801561058f57600080fd5b5061059861189d565b6040516105a59190612fb1565b60405180910390f35b3480156105ba57600080fd5b506105c36118c1565b6040516105d09190613128565b60405180910390f35b3480156105e557600080fd5b5061060060048036038101906105fb919061325a565b6118c7565b005b34801561060e57600080fd5b506106296004803603810190610624919061329a565b611a00565b6040516106369190613128565b60405180910390f35b34801561064b57600080fd5b50610666600480360381019061066191906132da565b611afa565b60405161067391906133c5565b60405180910390f35b34801561068857600080fd5b50610691611c8c565b60405161069e9190612fb1565b60405180910390f35b3480156106b357600080fd5b506106ce60048036038101906106c99190613425565b611c93565b005b3480156106dc57600080fd5b506106e5611e9d565b6040516106f29190612e82565b60405180910390f35b34801561070757600080fd5b50610722600480360381019061071d91906132da565b611ec3565b60405161072f9190613128565b60405180910390f35b34801561074457600080fd5b5061074d611edb565b60405161075a9190612e82565b60405180910390f35b34801561076f57600080fd5b50610778611f01565b6040516107859190613128565b60405180910390f35b34801561079a57600080fd5b506107a3611f07565b6040516107b09190612e46565b60405180910390f35b3480156107c557600080fd5b506107ce611f21565b6040516107db9190612fb1565b60405180910390f35b3480156107f057600080fd5b506107f9611f28565b005b34801561080757600080fd5b5061081061219e565b60405161081d9190613128565b60405180910390f35b34801561083257600080fd5b5061084d600480360381019061084891906130ec565b6121a4565b60405161085a9190613128565b60405180910390f35b34801561086f57600080fd5b5061087861223b565b6040516108859190612e46565b60405180910390f35b34801561089a57600080fd5b506108b560048036038101906108b09190613452565b612255565b005b3480156108c357600080fd5b506108de60048036038101906108d991906130ec565b6124fa565b6040516108eb9190613128565b60405180910390f35b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161095191906134c8565b602060405180830381865afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099291906134f8565b9050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607160109054906101000a900467ffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d5403610a3b576040517f76d9f52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606760149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421080610a88575042606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610abf576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ad38160726125dd90919063ffffffff16565b610b1457806040517f7f2e188c000000000000000000000000000000000000000000000000000000008152600401610b0b9190612e82565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b4f9190612e82565b602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b90919061353a565b03610bd45733816040517f8afa396a000000000000000000000000000000000000000000000000000000008152600401610bcb929190613567565b60405180910390fd5b6069548211610c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f90613613565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e022923336040518263ffffffff1660e01b8152600401610c759190612e82565b602060405180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb6919061353a565b90506000808214610cc75781610ccb565b606a545b90508084606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d199190613662565b10610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d509061372a565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2791a336040518263ffffffff1660e01b8152600401610db69190612e82565b602060405180830381865afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df7919061353a565b90506000670de0b6b3a764000082670de0b6b3a7640000610e189190613662565b610e21886124fa565b610e2b919061374a565b610e3591906137d3565b9050610e86333088607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661260d909392919063ffffffff16565b85606f54610e949190613662565b606f8190555085606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee59190613662565b606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f849190612e82565b602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc5919061353a565b1015611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd90613850565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393a56edc3383607060149054906101000a900467ffffffffffffffff16607160009054906101000a900467ffffffffffffffff16607160089054906101000a900467ffffffffffffffff16607160109054906101000a900467ffffffffffffffff166040518763ffffffff1660e01b81526004016110c3969594939291906138a1565b600060405180830381600087803b1580156110dd57600080fd5b505af11580156110f1573d6000803e3d6000fd5b505050507fb198f199c43cc078ad46e5a5fabe03eba401f7417816c86af0bd2e7345c995063387604051611126929190613902565b60405180910390a1505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b81526004016111939190612fb1565b602060405180830381865afa1580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d49190613940565b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b815260040161125992919061396d565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a91906134f8565b6112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d0906139e2565b60405180910390fd5b8a67ffffffffffffffff168c67ffffffffffffffff161061132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690613a74565b60405180910390fd5b888a1115611372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136990613b06565b60405180910390fd5b868811156113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90613b98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90613c04565b60405180910390fd5b8467ffffffffffffffff168467ffffffffffffffff161061147a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147190613c70565b60405180910390fd5b670de0b6b3a76400008367ffffffffffffffff1611156114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c690613d02565b60405180910390fd5b8b606760146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508a606860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555089606c8190555088606d819055508760698190555086606a8190555085607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084607060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083607160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082607160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081607160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fe81f01d972e8c23fba63a5e8b84c850255cc5b3427763906e1346ad28f1556a38c8c8c8c8c8c8c8c8c8c8c6040516116659b9a99989796959493929190613143565b60405180910390a1505050505050505050505050565b607060149054906101000a900467ffffffffffffffff1681565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080606b8054905090506000600190506000805b8381101561174357670de0b6b3a764000083606b83815481106116f6576116f5613d22565b5b906000526020600020015461170b919061374a565b61171591906137d3565b826117209190613662565b9150858361172e919061374a565b9250808061173b90613d51565b9150506116d0565b50809350505050919050565b606a5481565b6000806000806000806000806000806000909192939495969798999a565b607160089054906101000a900467ffffffffffffffff1681565b606b818154811061179d57600080fd5b906000526020600020016000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b606c5481565b607160009054906101000a900467ffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b815260040161185492919061396d565b602060405180830381865afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189591906134f8565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b60695481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b815260040161194592919061396d565b602060405180830381865afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198691906134f8565b6119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bc906139e2565b60405180910390fd5b81156119e5576119df83607261269690919063ffffffff16565b506119fb565b6119f98360726126c690919063ffffffff16565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a3c9190612e82565b602060405180830381865afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d919061353a565b1115611aef57611ae8606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606a54611ad39190613d99565b606f54606d54611ae39190613d99565b6126f6565b9050611af4565b600090505b92915050565b60606000611b08607261270f565b905060008151905060008167ffffffffffffffff811115611b2c57611b2b613dcd565b5b604051908082528060200260200182016040528015611b5a5781602001602082028036833780820191505090505b50905060005b82811015611c80576000848281518110611b7d57611b7c613d22565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611bbd9190612e82565b602060405180830381865afa158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfe919061353a565b1115611c6d57838181518110611c1757611c16613d22565b5b6020026020010151828281518110611c3257611c31613d22565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8080611c7890613d51565b915050611b60565b50809350505050919050565b6000801b81565b6000801b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b8152600401611cf492919061396d565b602060405180830381865afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3591906134f8565b611d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6b906139e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611df4573373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611dee573d6000803e3d6000fd5b50611e99565b611e98338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e319190612e82565b602060405180830381865afa158015611e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e72919061353a565b8473ffffffffffffffffffffffffffffffffffffffff166127309092919063ffffffff16565b5b5050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606e6020528060005260406000206000915090505481565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f5481565b606760149054906101000a900467ffffffffffffffff1681565b6000801b81565b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290613e48565b60405180910390fd5b606c54606f5410611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc890613eb4565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161202e9190612e82565b602060405180830381865afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f919061353a565b146120af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a690613f46565b60405180910390fd5b6000606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606f546121469190613d99565b606f8190555061219b303383607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661260d909392919063ffffffff16565b50565b606d5481565b600080606b80549050905060008390506000805b8381101561222f576001816121cd9190613662565b83606b83815481106121e2576121e1613d22565b5b90600052602060002001546121f7919061374a565b61220191906137d3565b8261220c9190613662565b9150858361221a919061374a565b9250808061222790613d51565b9150506121b8565b50809350505050919050565b606860009054906101000a900467ffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156122865750600160008054906101000a900460ff1660ff16105b806122b35750612295306127b6565b1580156122b25750600160008054906101000a900460ff1660ff16145b5b6122f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e990613fd8565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561232f576001600060016101000a81548160ff0219169083151502179055505b612338856127d9565b83606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612456929190613902565b6020604051808303816000875af1158015612475573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249991906134f8565b5080156124f35760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516124ea9190614040565b60405180910390a15b5050505050565b600080612508606f546121a4565b9050600061252284606f5461251d9190613662565b6121a4565b90506125d4606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125829190612e82565b602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c3919061353a565b83836125cf9190613d99565b6126f6565b92505050919050565b6000612605836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61286c565b905092915050565b612690846323b872dd60e01b85858560405160240161262e9392919061405b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061288f565b50505050565b60006126be836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612956565b905092915050565b60006126ee836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6129c6565b905092915050565b60008183106127055781612707565b825b905092915050565b6060600061271f83600001612ada565b905060608190508092505050919050565b6127b18363a9059cbb60e01b848460405160240161274f929190613902565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061288f565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281f90614104565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080836001016000848152602001908152602001600020541415905092915050565b60006128f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b369092919063ffffffff16565b9050600081511115612951578080602001905181019061291191906134f8565b612950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294790614196565b60405180910390fd5b5b505050565b6000612962838361286c565b6129bb5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506129c0565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612ace5760006001826129f89190613d99565b9050600060018660000180549050612a109190613d99565b9050818114612a7f576000866000018281548110612a3157612a30613d22565b5b9060005260206000200154905080876000018481548110612a5557612a54613d22565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612a9357612a926141b6565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612ad4565b60009150505b92915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612b2a57602002820191906000526020600020905b815481526020019060010190808311612b16575b50505050509050919050565b6060612b458484600085612b4e565b90509392505050565b606082471015612b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8a90614257565b60405180910390fd5b612b9c856127b6565b612bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd2906142c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612c04919061435d565b60006040518083038185875af1925050503d8060008114612c41576040519150601f19603f3d011682016040523d82523d6000602084013e612c46565b606091505b5091509150612c56828286612c62565b92505050949350505050565b60608315612c7257829050612cc2565b600083511115612c855782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb991906143c9565b60405180910390fd5b9392505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d0381612cce565b8114612d0e57600080fd5b50565b600081359050612d2081612cfa565b92915050565b600060208284031215612d3c57612d3b612cc9565b5b6000612d4a84828501612d11565b91505092915050565b60008115159050919050565b612d6881612d53565b82525050565b6000602082019050612d836000830184612d5f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612dce612dc9612dc484612d89565b612da9565b612d89565b9050919050565b6000612de082612db3565b9050919050565b6000612df282612dd5565b9050919050565b612e0281612de7565b82525050565b6000602082019050612e1d6000830184612df9565b92915050565b600067ffffffffffffffff82169050919050565b612e4081612e23565b82525050565b6000602082019050612e5b6000830184612e37565b92915050565b6000612e6c82612d89565b9050919050565b612e7c81612e61565b82525050565b6000602082019050612e976000830184612e73565b92915050565b6000819050919050565b612eb081612e9d565b8114612ebb57600080fd5b50565b600081359050612ecd81612ea7565b92915050565b612edc81612e61565b8114612ee757600080fd5b50565b600081359050612ef981612ed3565b92915050565b60008060408385031215612f1657612f15612cc9565b5b6000612f2485828601612ebe565b9250506020612f3585828601612eea565b9150509250929050565b6000819050919050565b612f5281612f3f565b8114612f5d57600080fd5b50565b600081359050612f6f81612f49565b92915050565b600060208284031215612f8b57612f8a612cc9565b5b6000612f9984828501612f60565b91505092915050565b612fab81612f3f565b82525050565b6000602082019050612fc66000830184612fa2565b92915050565b612fd581612e23565b8114612fe057600080fd5b50565b600081359050612ff281612fcc565b92915050565b60008060008060008060008060008060006101608c8e03121561301e5761301d612cc9565b5b600061302c8e828f01612fe3565b9b5050602061303d8e828f01612fe3565b9a5050604061304e8e828f01612ebe565b995050606061305f8e828f01612ebe565b98505060806130708e828f01612ebe565b97505060a06130818e828f01612ebe565b96505060c06130928e828f01612eea565b95505060e06130a38e828f01612fe3565b9450506101006130b58e828f01612fe3565b9350506101206130c78e828f01612fe3565b9250506101406130d98e828f01612fe3565b9150509295989b509295989b9093969950565b60006020828403121561310257613101612cc9565b5b600061311084828501612ebe565b91505092915050565b61312281612e9d565b82525050565b600060208201905061313d6000830184613119565b92915050565b600061016082019050613159600083018e612e37565b613166602083018d612e37565b613173604083018c613119565b613180606083018b613119565b61318d608083018a613119565b61319a60a0830189613119565b6131a760c0830188612e73565b6131b460e0830187612e37565b6131c2610100830186612e37565b6131d0610120830185612e37565b6131de610140830184612e37565b9c9b505050505050505050505050565b6000806040838503121561320557613204612cc9565b5b600061321385828601612f60565b925050602061322485828601612eea565b9150509250929050565b61323781612d53565b811461324257600080fd5b50565b6000813590506132548161322e565b92915050565b6000806040838503121561327157613270612cc9565b5b600061327f85828601612eea565b925050602061329085828601613245565b9150509250929050565b600080604083850312156132b1576132b0612cc9565b5b60006132bf85828601612eea565b92505060206132d085828601612eea565b9150509250929050565b6000602082840312156132f0576132ef612cc9565b5b60006132fe84828501612eea565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61333c81612e61565b82525050565b600061334e8383613333565b60208301905092915050565b6000602082019050919050565b600061337282613307565b61337c8185613312565b935061338783613323565b8060005b838110156133b857815161339f8882613342565b97506133aa8361335a565b92505060018101905061338b565b5085935050505092915050565b600060208201905081810360008301526133df8184613367565b905092915050565b60006133f282612e61565b9050919050565b613402816133e7565b811461340d57600080fd5b50565b60008135905061341f816133f9565b92915050565b60006020828403121561343b5761343a612cc9565b5b600061344984828501613410565b91505092915050565b6000806000806080858703121561346c5761346b612cc9565b5b600061347a87828801612eea565b945050602061348b87828801612eea565b935050604061349c87828801612eea565b92505060606134ad87828801612eea565b91505092959194509250565b6134c281612cce565b82525050565b60006020820190506134dd60008301846134b9565b92915050565b6000815190506134f28161322e565b92915050565b60006020828403121561350e5761350d612cc9565b5b600061351c848285016134e3565b91505092915050565b60008151905061353481612ea7565b92915050565b6000602082840312156135505761354f612cc9565b5b600061355e84828501613525565b91505092915050565b600060408201905061357c6000830185612e73565b6135896020830184612e73565b9392505050565b600082825260208201905092915050565b7f596f757220646f6e6174696f6e2073686f756c6420626520677265617465722060008201527f7468616e206d696e696d756d20646f6e6174696f6e0000000000000000000000602082015250565b60006135fd603583613590565b9150613608826135a1565b604082019050919050565b6000602082019050818103600083015261362c816135f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061366d82612e9d565b915061367883612e9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136ad576136ac613633565b5b828201905092915050565b7f596f757220646f6e6174696f6e732073686f756c64206265206c65737320746860008201527f616e206d617820646f6e6174696f6e0000000000000000000000000000000000602082015250565b6000613714602f83613590565b915061371f826136b8565b604082019050919050565b6000602082019050818103600083015261374381613707565b9050919050565b600061375582612e9d565b915061376083612e9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561379957613798613633565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137de82612e9d565b91506137e983612e9d565b9250826137f9576137f86137a4565b5b828204905092915050565b7f6e6f7420656e6f75676820726577617264206c65667400000000000000000000600082015250565b600061383a601683613590565b915061384582613804565b602082019050919050565b600060208201905081810360008301526138698161382d565b9050919050565b600061388b61388661388184612e23565b612da9565b612e9d565b9050919050565b61389b81613870565b82525050565b600060c0820190506138b66000830189612e73565b6138c36020830188613119565b6138d06040830187613892565b6138dd6060830186613892565b6138ea6080830185613892565b6138f760a0830184613892565b979650505050505050565b60006040820190506139176000830185612e73565b6139246020830184613119565b9392505050565b60008151905061393a81612f49565b92915050565b60006020828403121561395657613955612cc9565b5b60006139648482850161392b565b91505092915050565b60006040820190506139826000830185612fa2565b61398f6020830184612e73565b9392505050565b7f4f6e6c79526f6c654572726f7200000000000000000000000000000000000000600082015250565b60006139cc600d83613590565b91506139d782613996565b602082019050919050565b600060208201905081810360008301526139fb816139bf565b9050919050565b7f215f737461727454696d657374616d70203c205f646561646c696e6554696d6560008201527f7374616d70000000000000000000000000000000000000000000000000000000602082015250565b6000613a5e602583613590565b9150613a6982613a02565b604082019050919050565b60006020820190508181036000830152613a8d81613a51565b9050919050565b7f21646f6e6174696f6e476f616c4d696e203c3d20646f6e6174696f6e476f616c60008201527f4d61780000000000000000000000000000000000000000000000000000000000602082015250565b6000613af0602383613590565b9150613afb82613a94565b604082019050919050565b60006020820190508181036000830152613b1f81613ae3565b9050919050565b7f216d696e696d756d446f6e6174696f6e557364203c3d206d6178696d756d446f60008201527f6e6174696f6e5573640000000000000000000000000000000000000000000000602082015250565b6000613b82602983613590565b9150613b8d82613b26565b604082019050919050565b60006020820190508181036000830152613bb181613b75565b9050919050565b7f646f6e6174696f6e546f6b656e206973206e756c6c0000000000000000000000600082015250565b6000613bee601583613590565b9150613bf982613bb8565b602082019050919050565b60006020820190508181036000830152613c1d81613be1565b9050919050565b7f21636c696666207365636f6e6473203c2076657374696e67207365636f6e6473600082015250565b6000613c5a602083613590565b9150613c6582613c24565b602082019050919050565b60006020820190508181036000830152613c8981613c4d565b9050919050565b7f746765556e6c6f636b526174696f2073686f756c64206265206c65737320746860008201527f616e203100000000000000000000000000000000000000000000000000000000602082015250565b6000613cec602483613590565b9150613cf782613c90565b604082019050919050565b60006020820190508181036000830152613d1b81613cdf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613d5c82612e9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d8e57613d8d613633565b5b600182019050919050565b6000613da482612e9d565b9150613daf83612e9d565b925082821015613dc257613dc1613633565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f50617274696369706174696f6e20686173206e6f742079657420656e64656400600082015250565b6000613e32601f83613590565b9150613e3d82613dfc565b602082019050919050565b60006020820190508181036000830152613e6181613e25565b9050919050565b7f4d696e20676f616c207265616368656400000000000000000000000000000000600082015250565b6000613e9e601083613590565b9150613ea982613e68565b602082019050919050565b60006020820190508181036000830152613ecd81613e91565b9050919050565b7f596f752073686f756c6420646f6e61746520616c6c20796f757220746f6b656e60008201527f7320696e20766545524332300000000000000000000000000000000000000000602082015250565b6000613f30602c83613590565b9150613f3b82613ed4565b604082019050919050565b60006020820190508181036000830152613f5f81613f23565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613fc2602e83613590565b9150613fcd82613f66565b604082019050919050565b60006020820190508181036000830152613ff181613fb5565b9050919050565b6000819050919050565b600060ff82169050919050565b600061402a61402561402084613ff8565b612da9565b614002565b9050919050565b61403a8161400f565b82525050565b60006020820190506140556000830184614031565b92915050565b60006060820190506140706000830186612e73565b61407d6020830185612e73565b61408a6040830184613119565b949350505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006140ee602b83613590565b91506140f982614092565b604082019050919050565b6000602082019050818103600083015261411d816140e1565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614180602a83613590565b915061418b82614124565b604082019050919050565b600060208201905081810360008301526141af81614173565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614241602683613590565b915061424c826141e5565b604082019050919050565b6000602082019050818103600083015261427081614234565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006142ad601d83613590565b91506142b882614277565b602082019050919050565b600060208201905081810360008301526142dc816142a0565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156143175780820151818401526020810190506142fc565b83811115614326576000848401525b50505050565b6000614337826142e3565b61434181856142ee565b93506143518185602086016142f9565b80840191505092915050565b6000614369828461432c565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061439b82614374565b6143a58185613590565b93506143b58185602086016142f9565b6143be8161437f565b840191505092915050565b600060208201905081810360008301526143e38184614390565b90509291505056fea2646970667358221220335be328b29f2c5b50346e58ddc49947778ca16e969bb6287ae4b692336dc42b64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061021e5760003560e01c806395367f8911610123578063dc4eff7e116100ab578063f365642a1161006f578063f365642a146107fb578063f498446014610826578063f6d8414f14610863578063f8c8765e1461088e578063fee1d57c146108b757610225565b8063dc4eff7e14610738578063de2ed89314610763578063e6fd48bc1461078e578063e9c26518146107b9578063efb8f4fd146107e457610225565b80639dbf7935116100f25780639dbf79351461063f578063a217fddf1461067c578063a28835b6146106a7578063b5b8a68a146106d0578063cc6cb19a146106fb57610225565b806395367f891461058357806396d8f4f3146105ae5780639954a9bc146105d95780639d0c68461461060257610225565b806347b8ce3f116101a65780636c5a5428116101755780636c5a54281461048857806375b238fc146104c55780637b9fa8bd146104f05780638341ee721461051b57806391d148541461054657610225565b806347b8ce3f146103c05780634a591c6d146103fd5780635deb395b146104285780635e10448b1461045d57610225565b806313b18640116101ed57806313b18640146102e8578063248a9ca314610304578063303c1c8d1461034157806335864cdc1461036a578063445c4c8d1461039557610225565b806301ffc9a71461022a57806303ee9f22146102675780630afcdef5146102925780630df72159146102bd57610225565b3661022557005b600080fd5b34801561023657600080fd5b50610251600480360381019061024c9190612d26565b6108f4565b60405161025e9190612d6e565b60405180910390f35b34801561027357600080fd5b5061027c610999565b6040516102899190612e08565b60405180910390f35b34801561029e57600080fd5b506102a76109bf565b6040516102b49190612e46565b60405180910390f35b3480156102c957600080fd5b506102d26109d9565b6040516102df9190612e82565b60405180910390f35b61030260048036038101906102fd9190612eff565b6109ff565b005b34801561031057600080fd5b5061032b60048036038101906103269190612f75565b611136565b6040516103389190612fb1565b60405180910390f35b34801561034d57600080fd5b5061036860048036038101906103639190612ff8565b6111db565b005b34801561037657600080fd5b5061037f61167b565b60405161038c9190612e46565b60405180910390f35b3480156103a157600080fd5b506103aa611695565b6040516103b79190612e82565b60405180910390f35b3480156103cc57600080fd5b506103e760048036038101906103e291906130ec565b6116bb565b6040516103f49190613128565b60405180910390f35b34801561040957600080fd5b5061041261174f565b60405161041f9190613128565b60405180910390f35b34801561043457600080fd5b5061043d611755565b6040516104549b9a99989796959493929190613143565b60405180910390f35b34801561046957600080fd5b50610472611773565b60405161047f9190612e46565b60405180910390f35b34801561049457600080fd5b506104af60048036038101906104aa91906130ec565b61178d565b6040516104bc9190613128565b60405180910390f35b3480156104d157600080fd5b506104da6117b1565b6040516104e79190612fb1565b60405180910390f35b3480156104fc57600080fd5b506105056117d5565b6040516105129190613128565b60405180910390f35b34801561052757600080fd5b506105306117db565b60405161053d9190612e46565b60405180910390f35b34801561055257600080fd5b5061056d600480360381019061056891906131ee565b6117f5565b60405161057a9190612d6e565b60405180910390f35b34801561058f57600080fd5b5061059861189d565b6040516105a59190612fb1565b60405180910390f35b3480156105ba57600080fd5b506105c36118c1565b6040516105d09190613128565b60405180910390f35b3480156105e557600080fd5b5061060060048036038101906105fb919061325a565b6118c7565b005b34801561060e57600080fd5b506106296004803603810190610624919061329a565b611a00565b6040516106369190613128565b60405180910390f35b34801561064b57600080fd5b50610666600480360381019061066191906132da565b611afa565b60405161067391906133c5565b60405180910390f35b34801561068857600080fd5b50610691611c8c565b60405161069e9190612fb1565b60405180910390f35b3480156106b357600080fd5b506106ce60048036038101906106c99190613425565b611c93565b005b3480156106dc57600080fd5b506106e5611e9d565b6040516106f29190612e82565b60405180910390f35b34801561070757600080fd5b50610722600480360381019061071d91906132da565b611ec3565b60405161072f9190613128565b60405180910390f35b34801561074457600080fd5b5061074d611edb565b60405161075a9190612e82565b60405180910390f35b34801561076f57600080fd5b50610778611f01565b6040516107859190613128565b60405180910390f35b34801561079a57600080fd5b506107a3611f07565b6040516107b09190612e46565b60405180910390f35b3480156107c557600080fd5b506107ce611f21565b6040516107db9190612fb1565b60405180910390f35b3480156107f057600080fd5b506107f9611f28565b005b34801561080757600080fd5b5061081061219e565b60405161081d9190613128565b60405180910390f35b34801561083257600080fd5b5061084d600480360381019061084891906130ec565b6121a4565b60405161085a9190613128565b60405180910390f35b34801561086f57600080fd5b5061087861223b565b6040516108859190612e46565b60405180910390f35b34801561089a57600080fd5b506108b560048036038101906108b09190613452565b612255565b005b3480156108c357600080fd5b506108de60048036038101906108d991906130ec565b6124fa565b6040516108eb9190613128565b60405180910390f35b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161095191906134c8565b602060405180830381865afa15801561096e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099291906134f8565b9050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b607160109054906101000a900467ffffffffffffffff1681565b607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606d5403610a3b576040517f76d9f52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606760149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421080610a88575042606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610abf576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ad38160726125dd90919063ffffffff16565b610b1457806040517f7f2e188c000000000000000000000000000000000000000000000000000000008152600401610b0b9190612e82565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610b4f9190612e82565b602060405180830381865afa158015610b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b90919061353a565b03610bd45733816040517f8afa396a000000000000000000000000000000000000000000000000000000008152600401610bcb929190613567565b60405180910390fd5b6069548211610c18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0f90613613565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e022923336040518263ffffffff1660e01b8152600401610c759190612e82565b602060405180830381865afa158015610c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb6919061353a565b90506000808214610cc75781610ccb565b606a545b90508084606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610d199190613662565b10610d59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d509061372a565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2791a336040518263ffffffff1660e01b8152600401610db69190612e82565b602060405180830381865afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df7919061353a565b90506000670de0b6b3a764000082670de0b6b3a7640000610e189190613662565b610e21886124fa565b610e2b919061374a565b610e3591906137d3565b9050610e86333088607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661260d909392919063ffffffff16565b85606f54610e949190613662565b606f8190555085606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ee59190613662565b606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f849190612e82565b602060405180830381865afa158015610fa1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc5919061353a565b1015611006576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffd90613850565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393a56edc3383607060149054906101000a900467ffffffffffffffff16607160009054906101000a900467ffffffffffffffff16607160089054906101000a900467ffffffffffffffff16607160109054906101000a900467ffffffffffffffff166040518763ffffffff1660e01b81526004016110c3969594939291906138a1565b600060405180830381600087803b1580156110dd57600080fd5b505af11580156110f1573d6000803e3d6000fd5b505050507fb198f199c43cc078ad46e5a5fabe03eba401f7417816c86af0bd2e7345c995063387604051611126929190613902565b60405180910390a1505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b81526004016111939190612fb1565b602060405180830381865afa1580156111b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d49190613940565b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b815260040161125992919061396d565b602060405180830381865afa158015611276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129a91906134f8565b6112d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d0906139e2565b60405180910390fd5b8a67ffffffffffffffff168c67ffffffffffffffff161061132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690613a74565b60405180910390fd5b888a1115611372576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136990613b06565b60405180910390fd5b868811156113b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ac90613b98565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141b90613c04565b60405180910390fd5b8467ffffffffffffffff168467ffffffffffffffff161061147a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147190613c70565b60405180910390fd5b670de0b6b3a76400008367ffffffffffffffff1611156114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c690613d02565b60405180910390fd5b8b606760146101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508a606860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555089606c8190555088606d819055508760698190555086606a8190555085607060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084607060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083607160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082607160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081607160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fe81f01d972e8c23fba63a5e8b84c850255cc5b3427763906e1346ad28f1556a38c8c8c8c8c8c8c8c8c8c8c6040516116659b9a99989796959493929190613143565b60405180910390a1505050505050505050505050565b607060149054906101000a900467ffffffffffffffff1681565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080606b8054905090506000600190506000805b8381101561174357670de0b6b3a764000083606b83815481106116f6576116f5613d22565b5b906000526020600020015461170b919061374a565b61171591906137d3565b826117209190613662565b9150858361172e919061374a565b9250808061173b90613d51565b9150506116d0565b50809350505050919050565b606a5481565b6000806000806000806000806000806000909192939495969798999a565b607160089054906101000a900467ffffffffffffffff1681565b606b818154811061179d57600080fd5b906000526020600020016000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b606c5481565b607160009054906101000a900467ffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b815260040161185492919061396d565b602060405180830381865afa158015611871573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189591906134f8565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b60695481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b815260040161194592919061396d565b602060405180830381865afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198691906134f8565b6119c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bc906139e2565b60405180910390fd5b81156119e5576119df83607261269690919063ffffffff16565b506119fb565b6119f98360726126c690919063ffffffff16565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611a3c9190612e82565b602060405180830381865afa158015611a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7d919061353a565b1115611aef57611ae8606e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606a54611ad39190613d99565b606f54606d54611ae39190613d99565b6126f6565b9050611af4565b600090505b92915050565b60606000611b08607261270f565b905060008151905060008167ffffffffffffffff811115611b2c57611b2b613dcd565b5b604051908082528060200260200182016040528015611b5a5781602001602082028036833780820191505090505b50905060005b82811015611c80576000848281518110611b7d57611b7c613d22565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611bbd9190612e82565b602060405180830381865afa158015611bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfe919061353a565b1115611c6d57838181518110611c1757611c16613d22565b5b6020026020010151828281518110611c3257611c31613d22565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8080611c7890613d51565b915050611b60565b50809350505050919050565b6000801b81565b6000801b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485482336040518363ffffffff1660e01b8152600401611cf492919061396d565b602060405180830381865afa158015611d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3591906134f8565b611d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6b906139e2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611df4573373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611dee573d6000803e3d6000fd5b50611e99565b611e98338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e319190612e82565b602060405180830381865afa158015611e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e72919061353a565b8473ffffffffffffffffffffffffffffffffffffffff166127309092919063ffffffff16565b5b5050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606e6020528060005260406000206000915090505481565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f5481565b606760149054906101000a900467ffffffffffffffff1681565b6000801b81565b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015611f8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8290613e48565b60405180910390fd5b606c54606f5410611fd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc890613eb4565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161202e9190612e82565b602060405180830381865afa15801561204b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061206f919061353a565b146120af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a690613f46565b60405180910390fd5b6000606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000606e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606f546121469190613d99565b606f8190555061219b303383607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661260d909392919063ffffffff16565b50565b606d5481565b600080606b80549050905060008390506000805b8381101561222f576001816121cd9190613662565b83606b83815481106121e2576121e1613d22565b5b90600052602060002001546121f7919061374a565b61220191906137d3565b8261220c9190613662565b9150858361221a919061374a565b9250808061222790613d51565b9150506121b8565b50809350505050919050565b606860009054906101000a900467ffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156122865750600160008054906101000a900460ff1660ff16105b806122b35750612295306127b6565b1580156122b25750600160008054906101000a900460ff1660ff16145b5b6122f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122e990613fd8565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561232f576001600060016101000a81548160ff0219169083151502179055505b612338856127d9565b83606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612456929190613902565b6020604051808303816000875af1158015612475573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249991906134f8565b5080156124f35760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516124ea9190614040565b60405180910390a15b5050505050565b600080612508606f546121a4565b9050600061252284606f5461251d9190613662565b6121a4565b90506125d4606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125829190612e82565b602060405180830381865afa15801561259f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c3919061353a565b83836125cf9190613d99565b6126f6565b92505050919050565b6000612605836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61286c565b905092915050565b612690846323b872dd60e01b85858560405160240161262e9392919061405b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061288f565b50505050565b60006126be836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612956565b905092915050565b60006126ee836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6129c6565b905092915050565b60008183106127055781612707565b825b905092915050565b6060600061271f83600001612ada565b905060608190508092505050919050565b6127b18363a9059cbb60e01b848460405160240161274f929190613902565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061288f565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612828576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281f90614104565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080836001016000848152602001908152602001600020541415905092915050565b60006128f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612b369092919063ffffffff16565b9050600081511115612951578080602001905181019061291191906134f8565b612950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161294790614196565b60405180910390fd5b5b505050565b6000612962838361286c565b6129bb5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506129c0565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612ace5760006001826129f89190613d99565b9050600060018660000180549050612a109190613d99565b9050818114612a7f576000866000018281548110612a3157612a30613d22565b5b9060005260206000200154905080876000018481548110612a5557612a54613d22565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612a9357612a926141b6565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612ad4565b60009150505b92915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612b2a57602002820191906000526020600020905b815481526020019060010190808311612b16575b50505050509050919050565b6060612b458484600085612b4e565b90509392505050565b606082471015612b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8a90614257565b60405180910390fd5b612b9c856127b6565b612bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bd2906142c3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612c04919061435d565b60006040518083038185875af1925050503d8060008114612c41576040519150601f19603f3d011682016040523d82523d6000602084013e612c46565b606091505b5091509150612c56828286612c62565b92505050949350505050565b60608315612c7257829050612cc2565b600083511115612c855782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb991906143c9565b60405180910390fd5b9392505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612d0381612cce565b8114612d0e57600080fd5b50565b600081359050612d2081612cfa565b92915050565b600060208284031215612d3c57612d3b612cc9565b5b6000612d4a84828501612d11565b91505092915050565b60008115159050919050565b612d6881612d53565b82525050565b6000602082019050612d836000830184612d5f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612dce612dc9612dc484612d89565b612da9565b612d89565b9050919050565b6000612de082612db3565b9050919050565b6000612df282612dd5565b9050919050565b612e0281612de7565b82525050565b6000602082019050612e1d6000830184612df9565b92915050565b600067ffffffffffffffff82169050919050565b612e4081612e23565b82525050565b6000602082019050612e5b6000830184612e37565b92915050565b6000612e6c82612d89565b9050919050565b612e7c81612e61565b82525050565b6000602082019050612e976000830184612e73565b92915050565b6000819050919050565b612eb081612e9d565b8114612ebb57600080fd5b50565b600081359050612ecd81612ea7565b92915050565b612edc81612e61565b8114612ee757600080fd5b50565b600081359050612ef981612ed3565b92915050565b60008060408385031215612f1657612f15612cc9565b5b6000612f2485828601612ebe565b9250506020612f3585828601612eea565b9150509250929050565b6000819050919050565b612f5281612f3f565b8114612f5d57600080fd5b50565b600081359050612f6f81612f49565b92915050565b600060208284031215612f8b57612f8a612cc9565b5b6000612f9984828501612f60565b91505092915050565b612fab81612f3f565b82525050565b6000602082019050612fc66000830184612fa2565b92915050565b612fd581612e23565b8114612fe057600080fd5b50565b600081359050612ff281612fcc565b92915050565b60008060008060008060008060008060006101608c8e03121561301e5761301d612cc9565b5b600061302c8e828f01612fe3565b9b5050602061303d8e828f01612fe3565b9a5050604061304e8e828f01612ebe565b995050606061305f8e828f01612ebe565b98505060806130708e828f01612ebe565b97505060a06130818e828f01612ebe565b96505060c06130928e828f01612eea565b95505060e06130a38e828f01612fe3565b9450506101006130b58e828f01612fe3565b9350506101206130c78e828f01612fe3565b9250506101406130d98e828f01612fe3565b9150509295989b509295989b9093969950565b60006020828403121561310257613101612cc9565b5b600061311084828501612ebe565b91505092915050565b61312281612e9d565b82525050565b600060208201905061313d6000830184613119565b92915050565b600061016082019050613159600083018e612e37565b613166602083018d612e37565b613173604083018c613119565b613180606083018b613119565b61318d608083018a613119565b61319a60a0830189613119565b6131a760c0830188612e73565b6131b460e0830187612e37565b6131c2610100830186612e37565b6131d0610120830185612e37565b6131de610140830184612e37565b9c9b505050505050505050505050565b6000806040838503121561320557613204612cc9565b5b600061321385828601612f60565b925050602061322485828601612eea565b9150509250929050565b61323781612d53565b811461324257600080fd5b50565b6000813590506132548161322e565b92915050565b6000806040838503121561327157613270612cc9565b5b600061327f85828601612eea565b925050602061329085828601613245565b9150509250929050565b600080604083850312156132b1576132b0612cc9565b5b60006132bf85828601612eea565b92505060206132d085828601612eea565b9150509250929050565b6000602082840312156132f0576132ef612cc9565b5b60006132fe84828501612eea565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61333c81612e61565b82525050565b600061334e8383613333565b60208301905092915050565b6000602082019050919050565b600061337282613307565b61337c8185613312565b935061338783613323565b8060005b838110156133b857815161339f8882613342565b97506133aa8361335a565b92505060018101905061338b565b5085935050505092915050565b600060208201905081810360008301526133df8184613367565b905092915050565b60006133f282612e61565b9050919050565b613402816133e7565b811461340d57600080fd5b50565b60008135905061341f816133f9565b92915050565b60006020828403121561343b5761343a612cc9565b5b600061344984828501613410565b91505092915050565b6000806000806080858703121561346c5761346b612cc9565b5b600061347a87828801612eea565b945050602061348b87828801612eea565b935050604061349c87828801612eea565b92505060606134ad87828801612eea565b91505092959194509250565b6134c281612cce565b82525050565b60006020820190506134dd60008301846134b9565b92915050565b6000815190506134f28161322e565b92915050565b60006020828403121561350e5761350d612cc9565b5b600061351c848285016134e3565b91505092915050565b60008151905061353481612ea7565b92915050565b6000602082840312156135505761354f612cc9565b5b600061355e84828501613525565b91505092915050565b600060408201905061357c6000830185612e73565b6135896020830184612e73565b9392505050565b600082825260208201905092915050565b7f596f757220646f6e6174696f6e2073686f756c6420626520677265617465722060008201527f7468616e206d696e696d756d20646f6e6174696f6e0000000000000000000000602082015250565b60006135fd603583613590565b9150613608826135a1565b604082019050919050565b6000602082019050818103600083015261362c816135f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061366d82612e9d565b915061367883612e9d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136ad576136ac613633565b5b828201905092915050565b7f596f757220646f6e6174696f6e732073686f756c64206265206c65737320746860008201527f616e206d617820646f6e6174696f6e0000000000000000000000000000000000602082015250565b6000613714602f83613590565b915061371f826136b8565b604082019050919050565b6000602082019050818103600083015261374381613707565b9050919050565b600061375582612e9d565b915061376083612e9d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561379957613798613633565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006137de82612e9d565b91506137e983612e9d565b9250826137f9576137f86137a4565b5b828204905092915050565b7f6e6f7420656e6f75676820726577617264206c65667400000000000000000000600082015250565b600061383a601683613590565b915061384582613804565b602082019050919050565b600060208201905081810360008301526138698161382d565b9050919050565b600061388b61388661388184612e23565b612da9565b612e9d565b9050919050565b61389b81613870565b82525050565b600060c0820190506138b66000830189612e73565b6138c36020830188613119565b6138d06040830187613892565b6138dd6060830186613892565b6138ea6080830185613892565b6138f760a0830184613892565b979650505050505050565b60006040820190506139176000830185612e73565b6139246020830184613119565b9392505050565b60008151905061393a81612f49565b92915050565b60006020828403121561395657613955612cc9565b5b60006139648482850161392b565b91505092915050565b60006040820190506139826000830185612fa2565b61398f6020830184612e73565b9392505050565b7f4f6e6c79526f6c654572726f7200000000000000000000000000000000000000600082015250565b60006139cc600d83613590565b91506139d782613996565b602082019050919050565b600060208201905081810360008301526139fb816139bf565b9050919050565b7f215f737461727454696d657374616d70203c205f646561646c696e6554696d6560008201527f7374616d70000000000000000000000000000000000000000000000000000000602082015250565b6000613a5e602583613590565b9150613a6982613a02565b604082019050919050565b60006020820190508181036000830152613a8d81613a51565b9050919050565b7f21646f6e6174696f6e476f616c4d696e203c3d20646f6e6174696f6e476f616c60008201527f4d61780000000000000000000000000000000000000000000000000000000000602082015250565b6000613af0602383613590565b9150613afb82613a94565b604082019050919050565b60006020820190508181036000830152613b1f81613ae3565b9050919050565b7f216d696e696d756d446f6e6174696f6e557364203c3d206d6178696d756d446f60008201527f6e6174696f6e5573640000000000000000000000000000000000000000000000602082015250565b6000613b82602983613590565b9150613b8d82613b26565b604082019050919050565b60006020820190508181036000830152613bb181613b75565b9050919050565b7f646f6e6174696f6e546f6b656e206973206e756c6c0000000000000000000000600082015250565b6000613bee601583613590565b9150613bf982613bb8565b602082019050919050565b60006020820190508181036000830152613c1d81613be1565b9050919050565b7f21636c696666207365636f6e6473203c2076657374696e67207365636f6e6473600082015250565b6000613c5a602083613590565b9150613c6582613c24565b602082019050919050565b60006020820190508181036000830152613c8981613c4d565b9050919050565b7f746765556e6c6f636b526174696f2073686f756c64206265206c65737320746860008201527f616e203100000000000000000000000000000000000000000000000000000000602082015250565b6000613cec602483613590565b9150613cf782613c90565b604082019050919050565b60006020820190508181036000830152613d1b81613cdf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613d5c82612e9d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d8e57613d8d613633565b5b600182019050919050565b6000613da482612e9d565b9150613daf83612e9d565b925082821015613dc257613dc1613633565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f50617274696369706174696f6e20686173206e6f742079657420656e64656400600082015250565b6000613e32601f83613590565b9150613e3d82613dfc565b602082019050919050565b60006020820190508181036000830152613e6181613e25565b9050919050565b7f4d696e20676f616c207265616368656400000000000000000000000000000000600082015250565b6000613e9e601083613590565b9150613ea982613e68565b602082019050919050565b60006020820190508181036000830152613ecd81613e91565b9050919050565b7f596f752073686f756c6420646f6e61746520616c6c20796f757220746f6b656e60008201527f7320696e20766545524332300000000000000000000000000000000000000000602082015250565b6000613f30602c83613590565b9150613f3b82613ed4565b604082019050919050565b60006020820190508181036000830152613f5f81613f23565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613fc2602e83613590565b9150613fcd82613f66565b604082019050919050565b60006020820190508181036000830152613ff181613fb5565b9050919050565b6000819050919050565b600060ff82169050919050565b600061402a61402561402084613ff8565b612da9565b614002565b9050919050565b61403a8161400f565b82525050565b60006020820190506140556000830184614031565b92915050565b60006060820190506140706000830186612e73565b61407d6020830185612e73565b61408a6040830184613119565b949350505050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006140ee602b83613590565b91506140f982614092565b604082019050919050565b6000602082019050818103600083015261411d816140e1565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614180602a83613590565b915061418b82614124565b604082019050919050565b600060208201905081810360008301526141af81614173565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614241602683613590565b915061424c826141e5565b604082019050919050565b6000602082019050818103600083015261427081614234565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006142ad601d83613590565b91506142b882614277565b602082019050919050565b600060208201905081810360008301526142dc816142a0565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156143175780820151818401526020810190506142fc565b83811115614326576000848401525b50505050565b6000614337826142e3565b61434181856142ee565b93506143518185602086016142f9565b80840191505092915050565b6000614369828461432c565b915081905092915050565b600081519050919050565b6000601f19601f8301169050919050565b600061439b82614374565b6143a58185613590565b93506143b58185602086016142f9565b6143be8161437f565b840191505092915050565b600060208201905081810360008301526143e38184614390565b90509291505056fea2646970667358221220335be328b29f2c5b50346e58ddc49947778ca16e969bb6287ae4b692336dc42b64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "adminWithdraw(address)": {
        "details": "The owner can't take away SuDAO token already distributed to users, because they are stored on timelockVault"
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "The contract that distribute suDAO tokens for community based on NFT membership",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminWithdraw(address)": {
        "notice": "The owner of the contact can take away tokens sent to the contract."
      },
      "getMaximumDonationAmount(address,address)": {
        "notice": "Get the max donation that user can do"
      },
      "participate(uint256,address)": {
        "notice": "notice Allows to participate for users with required NFT param donationAmount The amount of tokens specified in donationToken"
      },
      "setDistributionInfo(uint64,uint64,uint256,uint256,uint256,uint256,address,uint64,uint64,uint64,uint64)": {
        "notice": "The owner can set new or edit existing token distribution with no restrictions"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 497,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 500,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2868,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10494,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)11645"
      },
      {
        "astId": 10578,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10634,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "VE_ERC_20",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 10636,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "SU_DAO",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 10638,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "BONUS_CONTRACT",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 10640,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "startTimestamp",
        "offset": 20,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 10642,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "deadlineTimestamp",
        "offset": 0,
        "slot": "104",
        "type": "t_uint64"
      },
      {
        "astId": 10644,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "minimumDonation",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 10646,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "maximumDonation",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 10649,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "bondingCurvePolynomial1e18",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10651,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationGoalMin",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 10653,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationGoalMax",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 10657,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donations",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10659,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "totalDonations",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 10661,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationToken",
        "offset": 0,
        "slot": "112",
        "type": "t_address"
      },
      {
        "astId": 10663,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "fullVestingSeconds",
        "offset": 20,
        "slot": "112",
        "type": "t_uint64"
      },
      {
        "astId": 10665,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "cliffSeconds",
        "offset": 0,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 10667,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "tgeUnlockRatio1e18",
        "offset": 8,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 10669,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "vestingFrequencySeconds",
        "offset": 16,
        "slot": "113",
        "type": "t_uint64"
      },
      {
        "astId": 10676,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "nftRequirement",
        "offset": 0,
        "slot": "114",
        "type": "t_struct(AddressSet)9249_storage"
      },
      {
        "astId": 11523,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "116",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISuAccessControl)11645": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)9249_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9248,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8948_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8948_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8943,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8947,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}