{
  "address": "0xE9fb2E3426cC5512FcF40F6683E6936A36510494",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "AccessNftNotValidError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributionTimeframeError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DonationAmountError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minGaol",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGoal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDonations",
          "type": "uint256"
        }
      ],
      "name": "DonationGoalError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DonationTokenError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "NegativeAntiderivative",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "NoAccessNftError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoActiveDistributionError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "donationAmountUsd1e18",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughRewardLeft",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "msg_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        }
      ],
      "name": "Participated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BONUS_CONTRACT",
      "outputs": [
        {
          "internalType": "contract IBonus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SU_DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VE_ERC_20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "antiderivativeOfBondingCurvePolynomial1e18At",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondingCurvePolynomial1e18",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "bondingCurvePolynomial1e18At",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bonusRewarded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cliffSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "daoWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deadlineTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationGoalMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationGoalMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donationTokenToUSD1e18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullVestingSeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessNfts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccessNftsForUser",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "donationAmountUSD1e18",
          "type": "uint256"
        }
      ],
      "name": "getBondingCurveRewardAmountFromDonationUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributorStaticData",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "startTimestamp_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deadlineTimestamp_",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "minimumDonation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maximumDonation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationGoalMin_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationGoalMax_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "donationToken_",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "fullVestingSeconds_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "cliffSeconds_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "tgeUnlockRatio1e18_",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "vestingFrequencySeconds_",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "getMaximumDonationAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_suDAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veErc20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusContract",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maximumDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDonation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "donationAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        }
      ],
      "name": "participate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_bondingCurvePolynomial1e18",
          "type": "int256[]"
        }
      ],
      "name": "setBondingCurve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_startTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_deadlineTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_donationGoalMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_donationGoalMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumDonation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maximumDonation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_donationToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_donationTokenToUSD1e18",
          "type": "uint256"
        }
      ],
      "name": "setDistributionInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_fullVestingSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_cliffSeconds",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_tgeUnlockRatio1e18",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_vestingFrequencySeconds",
          "type": "uint64"
        }
      ],
      "name": "setDistributionVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessNft",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        }
      ],
      "name": "setNftAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "takeDonationBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeUnlockRatio1e18",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDonations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingFrequencySeconds",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "e97f2c5d2d398fefa9f938d534248610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"AccessNftNotValidError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionTimeframeError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DonationAmountError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minGaol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGoal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDonations\",\"type\":\"uint256\"}],\"name\":\"DonationGoalError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DonationTokenError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"NegativeAntiderivative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"NoAccessNftError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoActiveDistributionError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationAmountUsd1e18\",\"type\":\"uint256\"}],\"name\":\"NotEnoughRewardLeft\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msg_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"}],\"name\":\"Participated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BONUS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IBonus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SU_DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VE_ERC_20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"antiderivativeOfBondingCurvePolynomial1e18At\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondingCurvePolynomial1e18\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"bondingCurvePolynomial1e18At\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bonusRewarded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cliffSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"daoWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadlineTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationGoalMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationGoalMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donationTokenToUSD1e18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullVestingSeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessNfts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccessNftsForUser\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationAmountUSD1e18\",\"type\":\"uint256\"}],\"name\":\"getBondingCurveRewardAmountFromDonationUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributorStaticData\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"startTimestamp_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deadlineTimestamp_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumDonation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumDonation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationGoalMin_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationGoalMax_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"donationToken_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"fullVestingSeconds_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"cliffSeconds_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tgeUnlockRatio1e18_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"vestingFrequencySeconds_\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"getMaximumDonationAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_suDAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veErc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDonation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"donationAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"}],\"name\":\"participate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_bondingCurvePolynomial1e18\",\"type\":\"int256[]\"}],\"name\":\"setBondingCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_deadlineTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_donationGoalMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_donationGoalMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumDonation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maximumDonation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_donationToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_donationTokenToUSD1e18\",\"type\":\"uint256\"}],\"name\":\"setDistributionInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_fullVestingSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_cliffSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_tgeUnlockRatio1e18\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_vestingFrequencySeconds\",\"type\":\"uint64\"}],\"name\":\"setDistributionVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessNft\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"name\":\"setNftAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeDonationBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeUnlockRatio1e18\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingFrequencySeconds\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"daoWithdraw(address,address,uint256)\":{\"details\":\"The DAO can't take away SuDAO token already distributed to users,      because they are stored on different contract\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"title\":\"The contract that distribute suDAO tokens for community based on NFT membership\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"daoWithdraw(address,address,uint256)\":{\"notice\":\"The DAO can take away donations.\"},\"getMaximumDonationAmount(address,address)\":{\"notice\":\"Get the max donation that user can do\"},\"participate(uint256,address)\":{\"notice\":\"notice Allows to participate for users with required NFT param donationAmount The amount of tokens specified in donationToken\"},\"setDistributionInfo(uint64,uint64,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"The owner can set new or edit existing token distribution with no restrictions\"},\"setDistributionVesting(uint64,uint64,uint64,uint64)\":{\"notice\":\"The admin can set new or edit existing token vesting details\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/distributions/TokenDistributorV4.sol\":\"TokenDistributorV4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0x49ebdac5d515aebb95168564158940b79d7d5d12fbfe59cec546a00d57fee64a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x945d2d816d58d609ca4a481ebc567a6f00a6e1cce88c869c681a867c06e50bb1\",\"license\":\"BSL 1.1\"},\"contracts/distributions/TokenDistributorV4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../access-control/SuAccessControlAuthenticated.sol\\\";\\nimport \\\"../interfaces/IBonus.sol\\\";\\nimport \\\"../interfaces/IveERC20.sol\\\";\\n\\n/**\\n * @title The contract that distribute suDAO tokens for community based on NFT membership\\n */\\ncontract TokenDistributorV4 is SuAccessControlAuthenticated {\\n    using SafeCastUpgradeable for int256;\\n    using SafeCastUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using Math for *;\\n\\n    // immutable values in non-upgradable contracts\\n    address public VE_ERC_20;\\n    address public SU_DAO;\\n    IBonus public BONUS_CONTRACT;\\n\\n    uint64 public startTimestamp;                 // The date when participation is available\\n    uint64 public deadlineTimestamp;              // Ultimate date when participation is available\\n\\n    address public donationToken;                 // For now it's only DAI\\n    uint256 public donationTokenToUSD1e18;        // donationTokenAmount * donationTokenToUSD1e18 == usd value * 1e18\\n    int256[] public bondingCurvePolynomial1e18;   // curve that shows how much rewards users can get when system got x donations\\n\\n    uint256 public minimumDonation;\\n    uint256 public maximumDonation;\\n\\n    uint256 public donationGoalMin;\\n    uint256 public donationGoalMax;\\n\\n    uint64 public fullVestingSeconds;             // Default vesting period is 12 months\\n    uint64 public cliffSeconds;                   // With 3 months cliff.\\n    uint64 public tgeUnlockRatio1e18;\\n    uint64 public vestingFrequencySeconds;\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    EnumerableSet.AddressSet private nftRequirement;\\n    // stats\\n    struct BonusStats {\\n        uint256 bonusRewarded;\\n    }\\n    BonusStats public bonusStats;\\n    mapping(address => uint256) public donations; // Donation amounts\\n    uint256 public totalDonations;                // Sum of all user donations\\n\\n    error NoActiveDistributionError();\\n    error DistributionTimeframeError();\\n    error AccessNftNotValidError(address accessNft);\\n    error NoAccessNftError(address account, address accessNft);\\n    error NotEnoughRewardLeft(uint256 donationAmountUsd1e18);\\n    error NegativeAntiderivative(uint256 x);\\n    error VestingError();\\n    error DonationAmountError();\\n    error DonationGoalError(uint256 minGaol, uint256 maxGoal, uint256 totalDonations);\\n    error DonationTokenError();\\n\\n\\n    function initialize(address _accessControlSingleton, address _suDAO, address _veErc20, address _bonusContract) initializer public {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n        SU_DAO = _suDAO;\\n        VE_ERC_20 = _veErc20;\\n        BONUS_CONTRACT = IBonus(_bonusContract);\\n        IERC20Upgradeable(_suDAO).approve(address(_veErc20), type(uint256).max);\\n    }\\n\\n    function bondingCurvePolynomial1e18At(uint256 x) public view returns (int256) {\\n        int256 xSigned = x.toInt256();\\n        uint256 l = bondingCurvePolynomial1e18.length;\\n        int256 x_ = 1;\\n        int256 px = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            px = px + bondingCurvePolynomial1e18[i] * x_ / (1e18 ** i).toInt256();\\n            x_ = x_ * xSigned;\\n        }\\n        return px;\\n    }\\n\\n    function antiderivativeOfBondingCurvePolynomial1e18At(uint256 x) public view returns (uint256) {\\n        int256 xSigned = x.toInt256();\\n        uint256 l = bondingCurvePolynomial1e18.length;\\n        int256 x_ = xSigned;\\n        int256 px = 0;\\n        for (uint256 i = 0; i < l; i++) {\\n            px = px + bondingCurvePolynomial1e18[i] * x_ / (i.toInt256() + 1);\\n            x_ = x_ * xSigned;\\n        }\\n        if (px < 0) revert NegativeAntiderivative(x);\\n        return uint256(px);\\n    }\\n\\n    function getBondingCurveRewardAmountFromDonationUSD(uint256 donationAmountUSD1e18) public view returns (uint256) {\\n        uint256 S1 = antiderivativeOfBondingCurvePolynomial1e18At(totalDonations * donationTokenToUSD1e18 / 1e18);\\n        uint256 S2 = antiderivativeOfBondingCurvePolynomial1e18At((totalDonations * donationTokenToUSD1e18 + donationAmountUSD1e18) / 1e18);\\n        uint256 rewards = S2 - S1;\\n        if (rewards > IERC20Upgradeable(SU_DAO).balanceOf(address(this))) {\\n            revert NotEnoughRewardLeft(donationAmountUSD1e18);\\n        }\\n        return rewards;\\n    }\\n\\n    function getAccessNfts() public view returns (address[] memory) {\\n        return nftRequirement.values();\\n    }\\n\\n    function getAccessNftsForUser(address account) public view returns (address[] memory) {\\n        address[] memory nfts = nftRequirement.values();\\n        uint256 l = nfts.length;\\n        address[] memory answer = new address[](l);\\n        for (uint256 i = 0; i < l; i++) {\\n            if (IERC721Upgradeable(nfts[i]).balanceOf(account) > 0) {\\n                answer[i] = nfts[i];\\n            }\\n        }\\n        return answer;\\n    }\\n\\n    /**\\n     * notice Allows to participate for users with required NFT\\n     * param donationAmount The amount of tokens specified in donationToken\\n     */\\n    function participate(uint256 donationAmount, address accessNft) payable external {\\n        if (donationGoalMax == 0)\\n            revert NoActiveDistributionError();\\n        if (block.timestamp < startTimestamp || deadlineTimestamp < block.timestamp)\\n            revert DistributionTimeframeError();\\n        if (!nftRequirement.contains(accessNft))\\n            revert AccessNftNotValidError(accessNft);\\n        if (IERC721Upgradeable(accessNft).balanceOf(msg.sender) == 0)\\n            revert NoAccessNftError(msg.sender, accessNft);\\n\\n        if (donationAmount < minimumDonation)\\n            revert DonationAmountError();\\n        uint256 bonusAllocation = Math.max(BONUS_CONTRACT.getAllocation(msg.sender), BONUS_CONTRACT.getNftAllocation(accessNft));\\n        uint256 maxAllocation = bonusAllocation == 0 ? maximumDonation : bonusAllocation;\\n        if (donations[msg.sender] + donationAmount > maxAllocation) revert DonationAmountError();\\n\\n        uint256 rewardAmount = getBondingCurveRewardAmountFromDonationUSD(donationAmount * donationTokenToUSD1e18) ;\\n\\n        uint256 bonusRewardRatio = Math.max(BONUS_CONTRACT.getBonus(msg.sender), BONUS_CONTRACT.getNftBonus(accessNft));\\n        bonusStats.bonusRewarded = rewardAmount * bonusRewardRatio / 1e18;\\n        rewardAmount = rewardAmount * (1e18 + bonusRewardRatio) / 1e18;\\n\\n        // get donation from the user\\n        IERC20Upgradeable(donationToken).safeTransferFrom(msg.sender, address(this), donationAmount);\\n        totalDonations = totalDonations + donationAmount;\\n        donations[msg.sender] = donations[msg.sender] + donationAmount;\\n\\n        // give reward to the user\\n        require(IERC20Upgradeable(SU_DAO).balanceOf(address(this)) >= rewardAmount, \\\"not enough reward left\\\");\\n        IveERC20(VE_ERC_20).lockUnderVesting(\\n            msg.sender,\\n            rewardAmount,\\n            fullVestingSeconds,\\n            cliffSeconds,\\n            tgeUnlockRatio1e18,\\n            vestingFrequencySeconds\\n        );\\n        emit Participated(msg.sender, donationAmount);\\n    }\\n\\n    /**\\n     * @notice Get the max donation that user can do\\n     */\\n    function getMaximumDonationAmount(address user, address accessNft) view external returns (uint256) {\\n        if (IERC721Upgradeable(accessNft).balanceOf(user) > 0) {\\n            return Math.min(\\n                maximumDonation - donations[user],\\n                donationGoalMax - totalDonations\\n            );\\n        }\\n        return 0;\\n    }\\n\\n    function takeDonationBack() external {\\n        if (block.timestamp < deadlineTimestamp)\\n            revert DistributionTimeframeError();\\n        if (totalDonations >= donationGoalMin)\\n            revert DonationGoalError(donationGoalMin, donationGoalMax, totalDonations);\\n        if (IERC20Upgradeable(VE_ERC_20).balanceOf(msg.sender) > 0)\\n            revert DonationAmountError();\\n\\n        uint256 donationAmount = donations[msg.sender];\\n        donations[msg.sender] = 0;\\n        totalDonations = totalDonations - donationAmount;\\n        IERC20Upgradeable(donationToken).safeTransfer(msg.sender, donationAmount);\\n    }\\n\\n    /**\\n     * @notice The admin can set new or edit existing token vesting details\\n     */\\n    function setDistributionVesting(\\n        uint64 _fullVestingSeconds,\\n        uint64 _cliffSeconds,\\n        uint64 _tgeUnlockRatio1e18,\\n        uint64 _vestingFrequencySeconds\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (_cliffSeconds > _fullVestingSeconds) {\\n            revert VestingError();\\n        }\\n        if (_tgeUnlockRatio1e18 > 1e18) {\\n            revert VestingError();\\n        }\\n        if (_vestingFrequencySeconds == 0 || _vestingFrequencySeconds > _fullVestingSeconds) {\\n            revert VestingError();\\n        }\\n        fullVestingSeconds = _fullVestingSeconds;\\n        cliffSeconds = _cliffSeconds;\\n        tgeUnlockRatio1e18 = _tgeUnlockRatio1e18;\\n        vestingFrequencySeconds = _vestingFrequencySeconds;\\n    }\\n\\n    /**\\n     * @notice The owner can set new or edit existing token distribution with no restrictions\\n     */\\n    function setDistributionInfo(\\n        uint64 _startTimestamp,\\n        uint64 _deadlineTimestamp,\\n        uint256 _donationGoalMin,\\n        uint256 _donationGoalMax,\\n        uint256 _minimumDonation,\\n        uint256 _maximumDonation,\\n        address _donationToken,\\n        uint256 _donationTokenToUSD1e18\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (_startTimestamp >= _deadlineTimestamp)\\n            revert DistributionTimeframeError();\\n        if (_donationGoalMin > _donationGoalMax)\\n            revert DonationGoalError(_donationGoalMin, _donationGoalMax, totalDonations);\\n        if (_minimumDonation > _maximumDonation)\\n            revert DonationAmountError();\\n        if(_donationToken == address(0))\\n            revert DonationTokenError();\\n\\n        startTimestamp = _startTimestamp;\\n        deadlineTimestamp = _deadlineTimestamp;\\n        donationGoalMin = _donationGoalMin;\\n        donationGoalMax = _donationGoalMax;\\n        minimumDonation = _minimumDonation;\\n        maximumDonation = _maximumDonation;\\n        donationToken = _donationToken;\\n        donationTokenToUSD1e18 = _donationTokenToUSD1e18;\\n    }\\n\\n    function setBondingCurve(int256[] memory _bondingCurvePolynomial1e18) external onlyRole(ADMIN_ROLE) {\\n        bondingCurvePolynomial1e18 = _bondingCurvePolynomial1e18;\\n    }\\n\\n    function setNftAccess(address accessNft, bool valid) external onlyRole(ADMIN_ROLE) {\\n        if (valid) {\\n            nftRequirement.add(accessNft);\\n        } else {\\n            nftRequirement.remove(accessNft);\\n        }\\n    }\\n\\n    receive() external payable {}\\n\\n    function getDistributorStaticData() view external returns (\\n        uint64 startTimestamp_,\\n        uint64 deadlineTimestamp_,\\n        uint256 minimumDonation_,\\n        uint256 maximumDonation_,\\n        uint256 donationGoalMin_,\\n        uint256 donationGoalMax_,\\n        address donationToken_,\\n        uint64 fullVestingSeconds_,\\n        uint64 cliffSeconds_,\\n        uint64 tgeUnlockRatio1e18_,\\n        uint64 vestingFrequencySeconds_\\n    ) {\\n        startTimestamp_ = startTimestamp;\\n        deadlineTimestamp_ = deadlineTimestamp;\\n        minimumDonation_ = minimumDonation;\\n        maximumDonation_ = maximumDonation;\\n        donationGoalMin_ = donationGoalMin;\\n        donationGoalMax_ = donationGoalMax;\\n        donationToken_ = donationToken;\\n        fullVestingSeconds_ = fullVestingSeconds;\\n        cliffSeconds_ = cliffSeconds;\\n        tgeUnlockRatio1e18_ = tgeUnlockRatio1e18;\\n        vestingFrequencySeconds_ = vestingFrequencySeconds;\\n    }\\n\\n    /**\\n     * @notice The DAO can take away donations.\\n     * @dev The DAO can't take away SuDAO token already distributed to users,\\n     *      because they are stored on different contract\\n     */\\n    function daoWithdraw(IERC20Upgradeable token, address to, uint256 amount) external onlyRole(DAO_ROLE) {\\n        if (block.timestamp < deadlineTimestamp)\\n            revert DistributionTimeframeError();\\n        if (totalDonations < donationGoalMin)\\n            revert DonationGoalError(donationGoalMin, donationGoalMax, totalDonations);\\n\\n        token.safeTransfer(to, amount);\\n    }\\n\\n//    function emergencyWithdraw(IERC20Upgradeable token) external onlyRole(DAO_ROLE) {\\n//        if (address(token) == address(0)) {\\n//            payable(msg.sender).transfer(address(this).balance);\\n//        } else {\\n//            token.safeTransfer(address(msg.sender), token.balanceOf(address(this)));\\n//        }\\n//    }\\n\\n    event Participated(address msg_sender, uint256 donationAmount);\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x66f07456deda69777c01948154aa8a517d278c666e149aabdfc868db88f3e85e\",\"license\":\"MIT\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `discountPresale` Discount during presale\\n    **/\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n    **/\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n    **/\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for NFT\\n     * `isAdmin` Address of admin\\n    **/\\n    function setNftInfo(address nft, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Set allocation and discountRatioPresale for user\\n     * `isAdmin` Address of admin\\n    **/\\n    function setUserInfo(address user, uint256 allocation, uint256 discountRatioPresale) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n    **/\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n    **/\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n    **/\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n    **/\\n    function distributeXp(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n    **/\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user bonus reward for donation\\n     * `user` Address of user\\n    **/\\n    function getBonus(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft allocation\\n     * `user` Address of user\\n    **/\\n    function getNftAllocation(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft bonus reward for donation\\n     * `user` Address of nft\\n    **/\\n    function getNftBonus(address nft) external view returns ( uint256 );\\n}\\n\",\"keccak256\":\"0x23bbd861d034aec4bdb32d8e01d88d999eec0fdea6172f5bcd68ce0df5e3a4eb\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"},\"contracts/interfaces/IveERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IveERC20 {\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3fce7c37422c1217a42572785409cd6ffc95c2c515fe0d777f111c4816c67ac1\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061490f806100206000396000f3fe6080604052600436106102555760003560e01c806395367f8911610139578063d1deda6a116100b6578063e9c265181161007a578063e9c2651814610900578063efb8f4fd1461092b578063f365642a14610942578063f49844601461096d578063f6d8414f146109aa578063f8c8765e146109d55761025c565b8063d1deda6a14610819578063d2051aa314610842578063dc4eff7e1461087f578063de2ed893146108aa578063e6fd48bc146108d55761025c565b8063a217fddf116100fd578063a217fddf14610732578063b51043111461075d578063b5b8a68a14610786578063c7ad6fc5146107b1578063cc6cb19a146107dc5761025c565b806395367f891461063957806396d8f4f3146106645780639954a9bc1461068f5780639d0c6846146106b85780639dbf7935146106f55761025c565b806347b8ce3f116101d257806375b238fc1161019657806375b238fc14610527578063770d2b12146105525780637b9fa8bd1461057d5780638341ee72146105a85780638821fd89146105d357806391d14854146105fc5761025c565b806347b8ce3f146104225780634a591c6d1461045f5780635deb395b1461048a5780635e10448b146104bf5780636c5a5428146104ea5761025c565b806313b186401161021957806313b1864014610348578063248a9ca31461036457806335864cdc146103a15780634369994c146103cc578063445c4c8d146103f75761025c565b806301ffc9a71461026157806303ee9f221461029e5780630afcdef5146102c95780630c277b96146102f45780630df721591461031d5761025c565b3661025c57005b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613185565b6109fe565b60405161029591906131cd565b60405180910390f35b3480156102aa57600080fd5b506102b3610aa3565b6040516102c09190613267565b60405180910390f35b3480156102d557600080fd5b506102de610ac9565b6040516102eb91906132a5565b60405180910390f35b34801561030057600080fd5b5061031b6004803603810190610316919061344f565b610ae3565b005b34801561032957600080fd5b50610332610b6c565b60405161033f91906134b9565b60405180910390f35b610362600480360381019061035d9190613536565b610b92565b005b34801561037057600080fd5b5061038b600480360381019061038691906135ac565b611439565b60405161039891906135e8565b60405180910390f35b3480156103ad57600080fd5b506103b66114de565b6040516103c391906132a5565b60405180910390f35b3480156103d857600080fd5b506103e16114f8565b6040516103ee91906136c1565b60405180910390f35b34801561040357600080fd5b5061040c611509565b6040516104199190613704565b60405180910390f35b34801561042e57600080fd5b506104496004803603810190610444919061371f565b61152f565b604051610456919061375b565b60405180910390f35b34801561046b57600080fd5b506104746115e4565b6040516104819190613785565b60405180910390f35b34801561049657600080fd5b5061049f6115ea565b6040516104b69b9a999897969594939291906137a0565b60405180910390f35b3480156104cb57600080fd5b506104d46116d7565b6040516104e191906132a5565b60405180910390f35b3480156104f657600080fd5b50610511600480360381019061050c919061371f565b6116f1565b60405161051e919061375b565b60405180910390f35b34801561053357600080fd5b5061053c611715565b60405161054991906135e8565b60405180910390f35b34801561055e57600080fd5b50610567611739565b6040516105749190613785565b60405180910390f35b34801561058957600080fd5b50610592611745565b60405161059f9190613785565b60405180910390f35b3480156105b457600080fd5b506105bd61174b565b6040516105ca91906132a5565b60405180910390f35b3480156105df57600080fd5b506105fa60048036038101906105f59190613877565b611765565b005b34801561060857600080fd5b50610623600480360381019061061e91906138de565b61197b565b60405161063091906131cd565b60405180910390f35b34801561064557600080fd5b5061064e611a23565b60405161065b91906135e8565b60405180910390f35b34801561067057600080fd5b50610679611a47565b6040516106869190613785565b60405180910390f35b34801561069b57600080fd5b506106b660048036038101906106b1919061394a565b611a4d565b005b3480156106c457600080fd5b506106df60048036038101906106da919061398a565b611af6565b6040516106ec9190613785565b60405180910390f35b34801561070157600080fd5b5061071c600480360381019061071791906139ca565b611bf0565b60405161072991906136c1565b60405180910390f35b34801561073e57600080fd5b50610747611d82565b60405161075491906135e8565b60405180910390f35b34801561076957600080fd5b50610784600480360381019061077f9190613a35565b611d89565b005b34801561079257600080fd5b5061079b611eb8565b6040516107a891906134b9565b60405180910390f35b3480156107bd57600080fd5b506107c6611ede565b6040516107d39190613785565b60405180910390f35b3480156107e857600080fd5b5061080360048036038101906107fe91906139ca565b611ee4565b6040516108109190613785565b60405180910390f35b34801561082557600080fd5b50610840600480360381019061083b9190613a88565b611efc565b005b34801561084e57600080fd5b506108696004803603810190610864919061371f565b612163565b6040516108769190613785565b60405180910390f35b34801561088b57600080fd5b506108946122c8565b6040516108a191906134b9565b60405180910390f35b3480156108b657600080fd5b506108bf6122ee565b6040516108cc9190613785565b60405180910390f35b3480156108e157600080fd5b506108ea6122f4565b6040516108f791906132a5565b60405180910390f35b34801561090c57600080fd5b5061091561230e565b60405161092291906135e8565b60405180910390f35b34801561093757600080fd5b50610940612315565b005b34801561094e57600080fd5b50610957612584565b6040516109649190613785565b60405180910390f35b34801561097957600080fd5b50610994600480360381019061098f919061371f565b61258a565b6040516109a19190613785565b60405180910390f35b3480156109b657600080fd5b506109bf61267d565b6040516109cc91906132a5565b60405180910390f35b3480156109e157600080fd5b506109fc60048036038101906109f79190613b3e565b612697565b005b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b8152600401610a5b9190613bb4565b602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190613be4565b9050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f60189054906101000a900467ffffffffffffffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b0e813361197b565b610b515780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610b48929190613c11565b60405180910390fd5b81606a9080519060200190610b679291906130af565b505050565b606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606e5403610bce576040517f76d9f52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606760149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421080610c1b575042606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610c52576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c6681607061293c90919063ffffffff16565b610ca757806040517f7f2e188c000000000000000000000000000000000000000000000000000000008152600401610c9e91906134b9565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ce291906134b9565b602060405180830381865afa158015610cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d239190613c4f565b03610d675733816040517f8afa396a000000000000000000000000000000000000000000000000000000008152600401610d5e929190613c7c565b60405180910390fd5b606b54821015610da3576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ee5606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e022923336040518263ffffffff1660e01b8152600401610e0391906134b9565b602060405180830381865afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190613c4f565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de6851f8856040518263ffffffff1660e01b8152600401610e9f91906134b9565b602060405180830381865afa158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190613c4f565b61296c565b90506000808214610ef65781610efa565b606c545b90508084607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f489190613cd4565b1115610f80576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f9860695486610f939190613d2a565b612163565b905060006110dc606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a740a63336040518263ffffffff1660e01b8152600401610ffa91906134b9565b602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190613c4f565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbcfb6bb886040518263ffffffff1660e01b815260040161109691906134b9565b602060405180830381865afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190613c4f565b61296c565b9050670de0b6b3a764000081836110f39190613d2a565b6110fd9190613db3565b607260000181905550670de0b6b3a764000081670de0b6b3a76400006111239190613cd4565b8361112e9190613d2a565b6111389190613db3565b9150611189333088606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612986909392919063ffffffff16565b856074546111979190613cd4565b60748190555085607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e89190613cd4565b607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161128791906134b9565b602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190613c4f565b1015611309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130090613e41565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393a56edc3384606f60009054906101000a900467ffffffffffffffff16606f60089054906101000a900467ffffffffffffffff16606f60109054906101000a900467ffffffffffffffff16606f60189054906101000a900467ffffffffffffffff166040518763ffffffff1660e01b81526004016113c696959493929190613e92565b600060405180830381600087803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b505050507fb198f199c43cc078ad46e5a5fabe03eba401f7417816c86af0bd2e7345c995063387604051611429929190613ef3565b60405180910390a1505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b815260040161149691906135e8565b602060405180830381865afa1580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190613f31565b9050919050565b606f60009054906101000a900467ffffffffffffffff1681565b60606115046070612a0f565b905090565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061153b83612a30565b90506000606a8054905090506000600190506000805b838110156115d75761157581670de0b6b3a76400006115709190614091565b612a30565b83606a838154811061158a576115896140dc565b5b906000526020600020015461159f919061410b565b6115a99190614222565b826115b4919061428c565b915084836115c2919061410b565b925080806115cf90614320565b915050611551565b5080945050505050919050565b606c5481565b6000806000806000806000806000806000606760149054906101000a900467ffffffffffffffff169a50606860009054906101000a900467ffffffffffffffff169950606b549850606c549750606d549650606e549550606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450606f60009054906101000a900467ffffffffffffffff169350606f60089054906101000a900467ffffffffffffffff169250606f60109054906101000a900467ffffffffffffffff169150606f60189054906101000a900467ffffffffffffffff169050909192939495969798999a565b606f60109054906101000a900467ffffffffffffffff1681565b606a818154811061170157600080fd5b906000526020600020016000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60728060000154905081565b606d5481565b606f60089054906101000a900467ffffffffffffffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611790813361197b565b6117d35780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016117ca929190613c11565b60405180910390fd5b8467ffffffffffffffff168467ffffffffffffffff161115611821576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a76400008367ffffffffffffffff16111561186d576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008267ffffffffffffffff16148061189957508467ffffffffffffffff168267ffffffffffffffff16115b156118d0576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84606f60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083606f60086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082606f60106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606f60186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b81526004016119da929190613c11565b602060405180830381865afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190613be4565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b606b5481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a78813361197b565b611abb5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611ab2929190613c11565b60405180910390fd5b8115611adb57611ad5836070612a9d90919063ffffffff16565b50611af1565b611aef836070612acd90919063ffffffff16565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611b3291906134b9565b602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b739190613c4f565b1115611be557611bde607360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606c54611bc99190614368565b607454606e54611bd99190614368565b612afd565b9050611bea565b600090505b92915050565b60606000611bfe6070612a0f565b905060008151905060008167ffffffffffffffff811115611c2257611c216132d6565b5b604051908082528060200260200182016040528015611c505781602001602082028036833780820191505090505b50905060005b82811015611d76576000848281518110611c7357611c726140dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401611cb391906134b9565b602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190613c4f565b1115611d6357838181518110611d0d57611d0c6140dc565b5b6020026020010151828281518110611d2857611d276140dc565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8080611d6e90614320565b915050611c56565b50809350505050919050565b6000801b81565b6000801b611d97813361197b565b611dda5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611dd1929190613c11565b60405180910390fd5b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015611e34576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d546074541015611e8757606d54606e546074546040517f2dc17330000000000000000000000000000000000000000000000000000000008152600401611e7e9392919061439c565b60405180910390fd5b611eb283838673ffffffffffffffffffffffffffffffffffffffff16612b169092919063ffffffff16565b50505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b60736020528060005260406000206000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611f27813361197b565b611f6a5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611f61929190613c11565b60405180910390fd5b8767ffffffffffffffff168967ffffffffffffffff1610611fb7576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858711156120025786866074546040517f2dc17330000000000000000000000000000000000000000000000000000000008152600401611ff99392919061439c565b60405180910390fd5b8385111561203c576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120a2576040517fe99064c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88606760146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555087606860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555086606d8190555085606e8190555084606b8190555083606c8190555082606860086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606981905550505050505050505050565b600080612191670de0b6b3a76400006069546074546121829190613d2a565b61218c9190613db3565b61258a565b905060006121cb670de0b6b3a7640000856069546074546121b29190613d2a565b6121bc9190613cd4565b6121c69190613db3565b61258a565b9050600082826121db9190614368565b9050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161223891906134b9565b602060405180830381865afa158015612255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122799190613c4f565b8111156122bd57846040517fb766b56f0000000000000000000000000000000000000000000000000000000081526004016122b49190613785565b60405180910390fd5b809350505050919050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60745481565b606760149054906101000a900467ffffffffffffffff1681565b6000801b81565b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642101561236f576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d54607454106123c157606d54606e546074546040517f2dc173300000000000000000000000000000000000000000000000000000000081526004016123b89392919061439c565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161241e91906134b9565b602060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190613c4f565b1115612497576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060745461252e9190614368565b6074819055506125813382606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612b169092919063ffffffff16565b50565b606e5481565b60008061259683612a30565b90506000606a80549050905060008290506000805b8381101561262a5760016125be82612a30565b6125c8919061428c565b83606a83815481106125dd576125dc6140dc565b5b90600052602060002001546125f2919061410b565b6125fc9190614222565b82612607919061428c565b91508483612615919061410b565b9250808061262290614320565b9150506125ab565b50600081121561267157856040517f68a667450000000000000000000000000000000000000000000000000000000081526004016126689190613785565b60405180910390fd5b80945050505050919050565b606860009054906101000a900467ffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156126c85750600160008054906101000a900460ff1660ff16105b806126f557506126d730612b9c565b1580156126f45750600160008054906101000a900460ff1660ff16145b5b612734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272b90614445565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015612771576001600060016101000a81548160ff0219169083151502179055505b61277a85612bbf565b83606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612898929190613ef3565b6020604051808303816000875af11580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190613be4565b5080156129355760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161292c91906144ad565b60405180910390a15b5050505050565b6000612964836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c52565b905092915050565b60008183101561297c578161297e565b825b905092915050565b612a09846323b872dd60e01b8585856040516024016129a7939291906144c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c75565b50505050565b60606000612a1f83600001612d3c565b905060608190508092505050919050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8c90614571565b60405180910390fd5b819050919050565b6000612ac5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d98565b905092915050565b6000612af5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612e08565b905092915050565b6000818310612b0c5781612b0e565b825b905092915050565b612b978363a9059cbb60e01b8484604051602401612b35929190613ef3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c75565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0590614603565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080836001016000848152602001908152602001600020541415905092915050565b6000612cd7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612f1c9092919063ffffffff16565b9050600081511115612d375780806020019051810190612cf79190613be4565b612d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2d90614695565b60405180910390fd5b5b505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612d8c57602002820191906000526020600020905b815481526020019060010190808311612d78575b50505050509050919050565b6000612da48383612c52565b612dfd578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612e02565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612f10576000600182612e3a9190614368565b9050600060018660000180549050612e529190614368565b9050818114612ec1576000866000018281548110612e7357612e726140dc565b5b9060005260206000200154905080876000018481548110612e9757612e966140dc565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612ed557612ed46146b5565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612f16565b60009150505b92915050565b6060612f2b8484600085612f34565b90509392505050565b606082471015612f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7090614756565b60405180910390fd5b612f8285612b9c565b612fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb8906147c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612fea919061485c565b60006040518083038185875af1925050503d8060008114613027576040519150601f19603f3d011682016040523d82523d6000602084013e61302c565b606091505b509150915061303c828286613048565b92505050949350505050565b60608315613058578290506130a8565b60008351111561306b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309f91906148b7565b60405180910390fd5b9392505050565b8280548282559060005260206000209081019282156130eb579160200282015b828111156130ea5782518255916020019190600101906130cf565b5b5090506130f891906130fc565b5090565b5b808211156131155760008160009055506001016130fd565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131628161312d565b811461316d57600080fd5b50565b60008135905061317f81613159565b92915050565b60006020828403121561319b5761319a613123565b5b60006131a984828501613170565b91505092915050565b60008115159050919050565b6131c7816131b2565b82525050565b60006020820190506131e260008301846131be565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061322d613228613223846131e8565b613208565b6131e8565b9050919050565b600061323f82613212565b9050919050565b600061325182613234565b9050919050565b61326181613246565b82525050565b600060208201905061327c6000830184613258565b92915050565b600067ffffffffffffffff82169050919050565b61329f81613282565b82525050565b60006020820190506132ba6000830184613296565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61330e826132c5565b810181811067ffffffffffffffff8211171561332d5761332c6132d6565b5b80604052505050565b6000613340613119565b905061334c8282613305565b919050565b600067ffffffffffffffff82111561336c5761336b6132d6565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61339581613382565b81146133a057600080fd5b50565b6000813590506133b28161338c565b92915050565b60006133cb6133c684613351565b613336565b905080838252602082019050602084028301858111156133ee576133ed61337d565b5b835b81811015613417578061340388826133a3565b8452602084019350506020810190506133f0565b5050509392505050565b600082601f830112613436576134356132c0565b5b81356134468482602086016133b8565b91505092915050565b60006020828403121561346557613464613123565b5b600082013567ffffffffffffffff81111561348357613482613128565b5b61348f84828501613421565b91505092915050565b60006134a3826131e8565b9050919050565b6134b381613498565b82525050565b60006020820190506134ce60008301846134aa565b92915050565b6000819050919050565b6134e7816134d4565b81146134f257600080fd5b50565b600081359050613504816134de565b92915050565b61351381613498565b811461351e57600080fd5b50565b6000813590506135308161350a565b92915050565b6000806040838503121561354d5761354c613123565b5b600061355b858286016134f5565b925050602061356c85828601613521565b9150509250929050565b6000819050919050565b61358981613576565b811461359457600080fd5b50565b6000813590506135a681613580565b92915050565b6000602082840312156135c2576135c1613123565b5b60006135d084828501613597565b91505092915050565b6135e281613576565b82525050565b60006020820190506135fd60008301846135d9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363881613498565b82525050565b600061364a838361362f565b60208301905092915050565b6000602082019050919050565b600061366e82613603565b613678818561360e565b93506136838361361f565b8060005b838110156136b457815161369b888261363e565b97506136a683613656565b925050600181019050613687565b5085935050505092915050565b600060208201905081810360008301526136db8184613663565b905092915050565b60006136ee82613234565b9050919050565b6136fe816136e3565b82525050565b600060208201905061371960008301846136f5565b92915050565b60006020828403121561373557613734613123565b5b6000613743848285016134f5565b91505092915050565b61375581613382565b82525050565b6000602082019050613770600083018461374c565b92915050565b61377f816134d4565b82525050565b600060208201905061379a6000830184613776565b92915050565b6000610160820190506137b6600083018e613296565b6137c3602083018d613296565b6137d0604083018c613776565b6137dd606083018b613776565b6137ea608083018a613776565b6137f760a0830189613776565b61380460c08301886134aa565b61381160e0830187613296565b61381f610100830186613296565b61382d610120830185613296565b61383b610140830184613296565b9c9b505050505050505050505050565b61385481613282565b811461385f57600080fd5b50565b6000813590506138718161384b565b92915050565b6000806000806080858703121561389157613890613123565b5b600061389f87828801613862565b94505060206138b087828801613862565b93505060406138c187828801613862565b92505060606138d287828801613862565b91505092959194509250565b600080604083850312156138f5576138f4613123565b5b600061390385828601613597565b925050602061391485828601613521565b9150509250929050565b613927816131b2565b811461393257600080fd5b50565b6000813590506139448161391e565b92915050565b6000806040838503121561396157613960613123565b5b600061396f85828601613521565b925050602061398085828601613935565b9150509250929050565b600080604083850312156139a1576139a0613123565b5b60006139af85828601613521565b92505060206139c085828601613521565b9150509250929050565b6000602082840312156139e0576139df613123565b5b60006139ee84828501613521565b91505092915050565b6000613a0282613498565b9050919050565b613a12816139f7565b8114613a1d57600080fd5b50565b600081359050613a2f81613a09565b92915050565b600080600060608486031215613a4e57613a4d613123565b5b6000613a5c86828701613a20565b9350506020613a6d86828701613521565b9250506040613a7e868287016134f5565b9150509250925092565b600080600080600080600080610100898b031215613aa957613aa8613123565b5b6000613ab78b828c01613862565b9850506020613ac88b828c01613862565b9750506040613ad98b828c016134f5565b9650506060613aea8b828c016134f5565b9550506080613afb8b828c016134f5565b94505060a0613b0c8b828c016134f5565b93505060c0613b1d8b828c01613521565b92505060e0613b2e8b828c016134f5565b9150509295985092959890939650565b60008060008060808587031215613b5857613b57613123565b5b6000613b6687828801613521565b9450506020613b7787828801613521565b9350506040613b8887828801613521565b9250506060613b9987828801613521565b91505092959194509250565b613bae8161312d565b82525050565b6000602082019050613bc96000830184613ba5565b92915050565b600081519050613bde8161391e565b92915050565b600060208284031215613bfa57613bf9613123565b5b6000613c0884828501613bcf565b91505092915050565b6000604082019050613c2660008301856135d9565b613c3360208301846134aa565b9392505050565b600081519050613c49816134de565b92915050565b600060208284031215613c6557613c64613123565b5b6000613c7384828501613c3a565b91505092915050565b6000604082019050613c9160008301856134aa565b613c9e60208301846134aa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cdf826134d4565b9150613cea836134d4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d1f57613d1e613ca5565b5b828201905092915050565b6000613d35826134d4565b9150613d40836134d4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7957613d78613ca5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613dbe826134d4565b9150613dc9836134d4565b925082613dd957613dd8613d84565b5b828204905092915050565b600082825260208201905092915050565b7f6e6f7420656e6f75676820726577617264206c65667400000000000000000000600082015250565b6000613e2b601683613de4565b9150613e3682613df5565b602082019050919050565b60006020820190508181036000830152613e5a81613e1e565b9050919050565b6000613e7c613e77613e7284613282565b613208565b6134d4565b9050919050565b613e8c81613e61565b82525050565b600060c082019050613ea760008301896134aa565b613eb46020830188613776565b613ec16040830187613e83565b613ece6060830186613e83565b613edb6080830185613e83565b613ee860a0830184613e83565b979650505050505050565b6000604082019050613f0860008301856134aa565b613f156020830184613776565b9392505050565b600081519050613f2b81613580565b92915050565b600060208284031215613f4757613f46613123565b5b6000613f5584828501613f1c565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115613fb557808604811115613f9157613f90613ca5565b5b6001851615613fa05780820291505b8081029050613fae85613f5e565b9450613f75565b94509492505050565b600082613fce576001905061408a565b81613fdc576000905061408a565b8160018114613ff25760028114613ffc5761402b565b600191505061408a565b60ff84111561400e5761400d613ca5565b5b8360020a91508482111561402557614024613ca5565b5b5061408a565b5060208310610133831016604e8410600b84101617156140605782820a90508381111561405b5761405a613ca5565b5b61408a565b61406d8484846001613f6b565b9250905081840481111561408457614083613ca5565b5b81810290505b9392505050565b600061409c826134d4565b91506140a7836134d4565b92506140d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613fbe565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061411682613382565b915061412183613382565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156141605761415f613ca5565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561419d5761419c613ca5565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156141da576141d9613ca5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561421757614216613ca5565b5b828202905092915050565b600061422d82613382565b915061423883613382565b92508261424857614247613d84565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561428157614280613ca5565b5b828205905092915050565b600061429782613382565b91506142a283613382565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156142dd576142dc613ca5565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561431557614314613ca5565b5b828201905092915050565b600061432b826134d4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361435d5761435c613ca5565b5b600182019050919050565b6000614373826134d4565b915061437e836134d4565b92508282101561439157614390613ca5565b5b828203905092915050565b60006060820190506143b16000830186613776565b6143be6020830185613776565b6143cb6040830184613776565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061442f602e83613de4565b915061443a826143d3565b604082019050919050565b6000602082019050818103600083015261445e81614422565b9050919050565b6000819050919050565b600060ff82169050919050565b600061449761449261448d84614465565b613208565b61446f565b9050919050565b6144a78161447c565b82525050565b60006020820190506144c2600083018461449e565b92915050565b60006060820190506144dd60008301866134aa565b6144ea60208301856134aa565b6144f76040830184613776565b949350505050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b600061455b602883613de4565b9150614566826144ff565b604082019050919050565b6000602082019050818103600083015261458a8161454e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006145ed602b83613de4565b91506145f882614591565b604082019050919050565b6000602082019050818103600083015261461c816145e0565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061467f602a83613de4565b915061468a82614623565b604082019050919050565b600060208201905081810360008301526146ae81614672565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614740602683613de4565b915061474b826146e4565b604082019050919050565b6000602082019050818103600083015261476f81614733565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006147ac601d83613de4565b91506147b782614776565b602082019050919050565b600060208201905081810360008301526147db8161479f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156148165780820151818401526020810190506147fb565b83811115614825576000848401525b50505050565b6000614836826147e2565b61484081856147ed565b93506148508185602086016147f8565b80840191505092915050565b6000614868828461482b565b915081905092915050565b600081519050919050565b600061488982614873565b6148938185613de4565b93506148a38185602086016147f8565b6148ac816132c5565b840191505092915050565b600060208201905081810360008301526148d1818461487e565b90509291505056fea264697066735822122012be8ef8c969a6dcc5172587937386888b66455093a5aca341ccdaaa39df184064736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102555760003560e01c806395367f8911610139578063d1deda6a116100b6578063e9c265181161007a578063e9c2651814610900578063efb8f4fd1461092b578063f365642a14610942578063f49844601461096d578063f6d8414f146109aa578063f8c8765e146109d55761025c565b8063d1deda6a14610819578063d2051aa314610842578063dc4eff7e1461087f578063de2ed893146108aa578063e6fd48bc146108d55761025c565b8063a217fddf116100fd578063a217fddf14610732578063b51043111461075d578063b5b8a68a14610786578063c7ad6fc5146107b1578063cc6cb19a146107dc5761025c565b806395367f891461063957806396d8f4f3146106645780639954a9bc1461068f5780639d0c6846146106b85780639dbf7935146106f55761025c565b806347b8ce3f116101d257806375b238fc1161019657806375b238fc14610527578063770d2b12146105525780637b9fa8bd1461057d5780638341ee72146105a85780638821fd89146105d357806391d14854146105fc5761025c565b806347b8ce3f146104225780634a591c6d1461045f5780635deb395b1461048a5780635e10448b146104bf5780636c5a5428146104ea5761025c565b806313b186401161021957806313b1864014610348578063248a9ca31461036457806335864cdc146103a15780634369994c146103cc578063445c4c8d146103f75761025c565b806301ffc9a71461026157806303ee9f221461029e5780630afcdef5146102c95780630c277b96146102f45780630df721591461031d5761025c565b3661025c57005b600080fd5b34801561026d57600080fd5b5061028860048036038101906102839190613185565b6109fe565b60405161029591906131cd565b60405180910390f35b3480156102aa57600080fd5b506102b3610aa3565b6040516102c09190613267565b60405180910390f35b3480156102d557600080fd5b506102de610ac9565b6040516102eb91906132a5565b60405180910390f35b34801561030057600080fd5b5061031b6004803603810190610316919061344f565b610ae3565b005b34801561032957600080fd5b50610332610b6c565b60405161033f91906134b9565b60405180910390f35b610362600480360381019061035d9190613536565b610b92565b005b34801561037057600080fd5b5061038b600480360381019061038691906135ac565b611439565b60405161039891906135e8565b60405180910390f35b3480156103ad57600080fd5b506103b66114de565b6040516103c391906132a5565b60405180910390f35b3480156103d857600080fd5b506103e16114f8565b6040516103ee91906136c1565b60405180910390f35b34801561040357600080fd5b5061040c611509565b6040516104199190613704565b60405180910390f35b34801561042e57600080fd5b506104496004803603810190610444919061371f565b61152f565b604051610456919061375b565b60405180910390f35b34801561046b57600080fd5b506104746115e4565b6040516104819190613785565b60405180910390f35b34801561049657600080fd5b5061049f6115ea565b6040516104b69b9a999897969594939291906137a0565b60405180910390f35b3480156104cb57600080fd5b506104d46116d7565b6040516104e191906132a5565b60405180910390f35b3480156104f657600080fd5b50610511600480360381019061050c919061371f565b6116f1565b60405161051e919061375b565b60405180910390f35b34801561053357600080fd5b5061053c611715565b60405161054991906135e8565b60405180910390f35b34801561055e57600080fd5b50610567611739565b6040516105749190613785565b60405180910390f35b34801561058957600080fd5b50610592611745565b60405161059f9190613785565b60405180910390f35b3480156105b457600080fd5b506105bd61174b565b6040516105ca91906132a5565b60405180910390f35b3480156105df57600080fd5b506105fa60048036038101906105f59190613877565b611765565b005b34801561060857600080fd5b50610623600480360381019061061e91906138de565b61197b565b60405161063091906131cd565b60405180910390f35b34801561064557600080fd5b5061064e611a23565b60405161065b91906135e8565b60405180910390f35b34801561067057600080fd5b50610679611a47565b6040516106869190613785565b60405180910390f35b34801561069b57600080fd5b506106b660048036038101906106b1919061394a565b611a4d565b005b3480156106c457600080fd5b506106df60048036038101906106da919061398a565b611af6565b6040516106ec9190613785565b60405180910390f35b34801561070157600080fd5b5061071c600480360381019061071791906139ca565b611bf0565b60405161072991906136c1565b60405180910390f35b34801561073e57600080fd5b50610747611d82565b60405161075491906135e8565b60405180910390f35b34801561076957600080fd5b50610784600480360381019061077f9190613a35565b611d89565b005b34801561079257600080fd5b5061079b611eb8565b6040516107a891906134b9565b60405180910390f35b3480156107bd57600080fd5b506107c6611ede565b6040516107d39190613785565b60405180910390f35b3480156107e857600080fd5b5061080360048036038101906107fe91906139ca565b611ee4565b6040516108109190613785565b60405180910390f35b34801561082557600080fd5b50610840600480360381019061083b9190613a88565b611efc565b005b34801561084e57600080fd5b506108696004803603810190610864919061371f565b612163565b6040516108769190613785565b60405180910390f35b34801561088b57600080fd5b506108946122c8565b6040516108a191906134b9565b60405180910390f35b3480156108b657600080fd5b506108bf6122ee565b6040516108cc9190613785565b60405180910390f35b3480156108e157600080fd5b506108ea6122f4565b6040516108f791906132a5565b60405180910390f35b34801561090c57600080fd5b5061091561230e565b60405161092291906135e8565b60405180910390f35b34801561093757600080fd5b50610940612315565b005b34801561094e57600080fd5b50610957612584565b6040516109649190613785565b60405180910390f35b34801561097957600080fd5b50610994600480360381019061098f919061371f565b61258a565b6040516109a19190613785565b60405180910390f35b3480156109b657600080fd5b506109bf61267d565b6040516109cc91906132a5565b60405180910390f35b3480156109e157600080fd5b506109fc60048036038101906109f79190613b3e565b612697565b005b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b8152600401610a5b9190613bb4565b602060405180830381865afa158015610a78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9c9190613be4565b9050919050565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606f60189054906101000a900467ffffffffffffffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610b0e813361197b565b610b515780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401610b48929190613c11565b60405180910390fd5b81606a9080519060200190610b679291906130af565b505050565b606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000606e5403610bce576040517f76d9f52e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606760149054906101000a900467ffffffffffffffff1667ffffffffffffffff16421080610c1b575042606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16105b15610c52576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c6681607061293c90919063ffffffff16565b610ca757806040517f7f2e188c000000000000000000000000000000000000000000000000000000008152600401610c9e91906134b9565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610ce291906134b9565b602060405180830381865afa158015610cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d239190613c4f565b03610d675733816040517f8afa396a000000000000000000000000000000000000000000000000000000008152600401610d5e929190613c7c565b60405180910390fd5b606b54821015610da3576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610ee5606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e022923336040518263ffffffff1660e01b8152600401610e0391906134b9565b602060405180830381865afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190613c4f565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de6851f8856040518263ffffffff1660e01b8152600401610e9f91906134b9565b602060405180830381865afa158015610ebc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee09190613c4f565b61296c565b90506000808214610ef65781610efa565b606c545b90508084607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f489190613cd4565b1115610f80576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f9860695486610f939190613d2a565b612163565b905060006110dc606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a740a63336040518263ffffffff1660e01b8152600401610ffa91906134b9565b602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190613c4f565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dbcfb6bb886040518263ffffffff1660e01b815260040161109691906134b9565b602060405180830381865afa1580156110b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d79190613c4f565b61296c565b9050670de0b6b3a764000081836110f39190613d2a565b6110fd9190613db3565b607260000181905550670de0b6b3a764000081670de0b6b3a76400006111239190613cd4565b8361112e9190613d2a565b6111389190613db3565b9150611189333088606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612986909392919063ffffffff16565b856074546111979190613cd4565b60748190555085607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111e89190613cd4565b607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161128791906134b9565b602060405180830381865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190613c4f565b1015611309576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130090613e41565b60405180910390fd5b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393a56edc3384606f60009054906101000a900467ffffffffffffffff16606f60089054906101000a900467ffffffffffffffff16606f60109054906101000a900467ffffffffffffffff16606f60189054906101000a900467ffffffffffffffff166040518763ffffffff1660e01b81526004016113c696959493929190613e92565b600060405180830381600087803b1580156113e057600080fd5b505af11580156113f4573d6000803e3d6000fd5b505050507fb198f199c43cc078ad46e5a5fabe03eba401f7417816c86af0bd2e7345c995063387604051611429929190613ef3565b60405180910390a1505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b815260040161149691906135e8565b602060405180830381865afa1580156114b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d79190613f31565b9050919050565b606f60009054906101000a900467ffffffffffffffff1681565b60606115046070612a0f565b905090565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061153b83612a30565b90506000606a8054905090506000600190506000805b838110156115d75761157581670de0b6b3a76400006115709190614091565b612a30565b83606a838154811061158a576115896140dc565b5b906000526020600020015461159f919061410b565b6115a99190614222565b826115b4919061428c565b915084836115c2919061410b565b925080806115cf90614320565b915050611551565b5080945050505050919050565b606c5481565b6000806000806000806000806000806000606760149054906101000a900467ffffffffffffffff169a50606860009054906101000a900467ffffffffffffffff169950606b549850606c549750606d549650606e549550606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450606f60009054906101000a900467ffffffffffffffff169350606f60089054906101000a900467ffffffffffffffff169250606f60109054906101000a900467ffffffffffffffff169150606f60189054906101000a900467ffffffffffffffff169050909192939495969798999a565b606f60109054906101000a900467ffffffffffffffff1681565b606a818154811061170157600080fd5b906000526020600020016000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60728060000154905081565b606d5481565b606f60089054906101000a900467ffffffffffffffff1681565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611790813361197b565b6117d35780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016117ca929190613c11565b60405180910390fd5b8467ffffffffffffffff168467ffffffffffffffff161115611821576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b670de0b6b3a76400008367ffffffffffffffff16111561186d576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008267ffffffffffffffff16148061189957508467ffffffffffffffff168267ffffffffffffffff16115b156118d0576040517ff7e1224400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84606f60006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555083606f60086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082606f60106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555081606f60186101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b81526004016119da929190613c11565b602060405180830381865afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190613be4565b905092915050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b606b5481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611a78813361197b565b611abb5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611ab2929190613c11565b60405180910390fd5b8115611adb57611ad5836070612a9d90919063ffffffff16565b50611af1565b611aef836070612acd90919063ffffffff16565b505b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611b3291906134b9565b602060405180830381865afa158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b739190613c4f565b1115611be557611bde607360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054606c54611bc99190614368565b607454606e54611bd99190614368565b612afd565b9050611bea565b600090505b92915050565b60606000611bfe6070612a0f565b905060008151905060008167ffffffffffffffff811115611c2257611c216132d6565b5b604051908082528060200260200182016040528015611c505781602001602082028036833780820191505090505b50905060005b82811015611d76576000848281518110611c7357611c726140dc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231886040518263ffffffff1660e01b8152600401611cb391906134b9565b602060405180830381865afa158015611cd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf49190613c4f565b1115611d6357838181518110611d0d57611d0c6140dc565b5b6020026020010151828281518110611d2857611d276140dc565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8080611d6e90614320565b915050611c56565b50809350505050919050565b6000801b81565b6000801b611d97813361197b565b611dda5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611dd1929190613c11565b60405180910390fd5b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff16421015611e34576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d546074541015611e8757606d54606e546074546040517f2dc17330000000000000000000000000000000000000000000000000000000008152600401611e7e9392919061439c565b60405180910390fd5b611eb283838673ffffffffffffffffffffffffffffffffffffffff16612b169092919063ffffffff16565b50505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60695481565b60736020528060005260406000206000915090505481565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775611f27813361197b565b611f6a5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611f61929190613c11565b60405180910390fd5b8767ffffffffffffffff168967ffffffffffffffff1610611fb7576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b858711156120025786866074546040517f2dc17330000000000000000000000000000000000000000000000000000000008152600401611ff99392919061439c565b60405180910390fd5b8385111561203c576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120a2576040517fe99064c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88606760146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555087606860006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555086606d8190555085606e8190555084606b8190555083606c8190555082606860086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606981905550505050505050505050565b600080612191670de0b6b3a76400006069546074546121829190613d2a565b61218c9190613db3565b61258a565b905060006121cb670de0b6b3a7640000856069546074546121b29190613d2a565b6121bc9190613cd4565b6121c69190613db3565b61258a565b9050600082826121db9190614368565b9050606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161223891906134b9565b602060405180830381865afa158015612255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122799190613c4f565b8111156122bd57846040517fb766b56f0000000000000000000000000000000000000000000000000000000081526004016122b49190613785565b60405180910390fd5b809350505050919050565b606660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60745481565b606760149054906101000a900467ffffffffffffffff1681565b6000801b81565b606860009054906101000a900467ffffffffffffffff1667ffffffffffffffff1642101561236f576040517fd3af728300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606d54607454106123c157606d54606e546074546040517f2dc173300000000000000000000000000000000000000000000000000000000081526004016123b89392919061439c565b60405180910390fd5b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161241e91906134b9565b602060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245f9190613c4f565b1115612497576040517f9e977e7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000607360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060745461252e9190614368565b6074819055506125813382606860089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612b169092919063ffffffff16565b50565b606e5481565b60008061259683612a30565b90506000606a80549050905060008290506000805b8381101561262a5760016125be82612a30565b6125c8919061428c565b83606a83815481106125dd576125dc6140dc565b5b90600052602060002001546125f2919061410b565b6125fc9190614222565b82612607919061428c565b91508483612615919061410b565b9250808061262290614320565b9150506125ab565b50600081121561267157856040517f68a667450000000000000000000000000000000000000000000000000000000081526004016126689190613785565b60405180910390fd5b80945050505050919050565b606860009054906101000a900467ffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156126c85750600160008054906101000a900460ff1660ff16105b806126f557506126d730612b9c565b1580156126f45750600160008054906101000a900460ff1660ff16145b5b612734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272b90614445565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015612771576001600060016101000a81548160ff0219169083151502179055505b61277a85612bbf565b83606660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612898929190613ef3565b6020604051808303816000875af11580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190613be4565b5080156129355760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161292c91906144ad565b60405180910390a15b5050505050565b6000612964836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612c52565b905092915050565b60008183101561297c578161297e565b825b905092915050565b612a09846323b872dd60e01b8585856040516024016129a7939291906144c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c75565b50505050565b60606000612a1f83600001612d3c565b905060608190508092505050919050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8c90614571565b60405180910390fd5b819050919050565b6000612ac5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612d98565b905092915050565b6000612af5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612e08565b905092915050565b6000818310612b0c5781612b0e565b825b905092915050565b612b978363a9059cbb60e01b8484604051602401612b35929190613ef3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612c75565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612c0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0590614603565b60405180910390fd5b80603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080836001016000848152602001908152602001600020541415905092915050565b6000612cd7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612f1c9092919063ffffffff16565b9050600081511115612d375780806020019051810190612cf79190613be4565b612d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2d90614695565b60405180910390fd5b5b505050565b606081600001805480602002602001604051908101604052809291908181526020018280548015612d8c57602002820191906000526020600020905b815481526020019060010190808311612d78575b50505050509050919050565b6000612da48383612c52565b612dfd578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612e02565b600090505b92915050565b60008083600101600084815260200190815260200160002054905060008114612f10576000600182612e3a9190614368565b9050600060018660000180549050612e529190614368565b9050818114612ec1576000866000018281548110612e7357612e726140dc565b5b9060005260206000200154905080876000018481548110612e9757612e966140dc565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612ed557612ed46146b5565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612f16565b60009150505b92915050565b6060612f2b8484600085612f34565b90509392505050565b606082471015612f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f7090614756565b60405180910390fd5b612f8285612b9c565b612fc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb8906147c2565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612fea919061485c565b60006040518083038185875af1925050503d8060008114613027576040519150601f19603f3d011682016040523d82523d6000602084013e61302c565b606091505b509150915061303c828286613048565b92505050949350505050565b60608315613058578290506130a8565b60008351111561306b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309f91906148b7565b60405180910390fd5b9392505050565b8280548282559060005260206000209081019282156130eb579160200282015b828111156130ea5782518255916020019190600101906130cf565b5b5090506130f891906130fc565b5090565b5b808211156131155760008160009055506001016130fd565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131628161312d565b811461316d57600080fd5b50565b60008135905061317f81613159565b92915050565b60006020828403121561319b5761319a613123565b5b60006131a984828501613170565b91505092915050565b60008115159050919050565b6131c7816131b2565b82525050565b60006020820190506131e260008301846131be565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061322d613228613223846131e8565b613208565b6131e8565b9050919050565b600061323f82613212565b9050919050565b600061325182613234565b9050919050565b61326181613246565b82525050565b600060208201905061327c6000830184613258565b92915050565b600067ffffffffffffffff82169050919050565b61329f81613282565b82525050565b60006020820190506132ba6000830184613296565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61330e826132c5565b810181811067ffffffffffffffff8211171561332d5761332c6132d6565b5b80604052505050565b6000613340613119565b905061334c8282613305565b919050565b600067ffffffffffffffff82111561336c5761336b6132d6565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61339581613382565b81146133a057600080fd5b50565b6000813590506133b28161338c565b92915050565b60006133cb6133c684613351565b613336565b905080838252602082019050602084028301858111156133ee576133ed61337d565b5b835b81811015613417578061340388826133a3565b8452602084019350506020810190506133f0565b5050509392505050565b600082601f830112613436576134356132c0565b5b81356134468482602086016133b8565b91505092915050565b60006020828403121561346557613464613123565b5b600082013567ffffffffffffffff81111561348357613482613128565b5b61348f84828501613421565b91505092915050565b60006134a3826131e8565b9050919050565b6134b381613498565b82525050565b60006020820190506134ce60008301846134aa565b92915050565b6000819050919050565b6134e7816134d4565b81146134f257600080fd5b50565b600081359050613504816134de565b92915050565b61351381613498565b811461351e57600080fd5b50565b6000813590506135308161350a565b92915050565b6000806040838503121561354d5761354c613123565b5b600061355b858286016134f5565b925050602061356c85828601613521565b9150509250929050565b6000819050919050565b61358981613576565b811461359457600080fd5b50565b6000813590506135a681613580565b92915050565b6000602082840312156135c2576135c1613123565b5b60006135d084828501613597565b91505092915050565b6135e281613576565b82525050565b60006020820190506135fd60008301846135d9565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61363881613498565b82525050565b600061364a838361362f565b60208301905092915050565b6000602082019050919050565b600061366e82613603565b613678818561360e565b93506136838361361f565b8060005b838110156136b457815161369b888261363e565b97506136a683613656565b925050600181019050613687565b5085935050505092915050565b600060208201905081810360008301526136db8184613663565b905092915050565b60006136ee82613234565b9050919050565b6136fe816136e3565b82525050565b600060208201905061371960008301846136f5565b92915050565b60006020828403121561373557613734613123565b5b6000613743848285016134f5565b91505092915050565b61375581613382565b82525050565b6000602082019050613770600083018461374c565b92915050565b61377f816134d4565b82525050565b600060208201905061379a6000830184613776565b92915050565b6000610160820190506137b6600083018e613296565b6137c3602083018d613296565b6137d0604083018c613776565b6137dd606083018b613776565b6137ea608083018a613776565b6137f760a0830189613776565b61380460c08301886134aa565b61381160e0830187613296565b61381f610100830186613296565b61382d610120830185613296565b61383b610140830184613296565b9c9b505050505050505050505050565b61385481613282565b811461385f57600080fd5b50565b6000813590506138718161384b565b92915050565b6000806000806080858703121561389157613890613123565b5b600061389f87828801613862565b94505060206138b087828801613862565b93505060406138c187828801613862565b92505060606138d287828801613862565b91505092959194509250565b600080604083850312156138f5576138f4613123565b5b600061390385828601613597565b925050602061391485828601613521565b9150509250929050565b613927816131b2565b811461393257600080fd5b50565b6000813590506139448161391e565b92915050565b6000806040838503121561396157613960613123565b5b600061396f85828601613521565b925050602061398085828601613935565b9150509250929050565b600080604083850312156139a1576139a0613123565b5b60006139af85828601613521565b92505060206139c085828601613521565b9150509250929050565b6000602082840312156139e0576139df613123565b5b60006139ee84828501613521565b91505092915050565b6000613a0282613498565b9050919050565b613a12816139f7565b8114613a1d57600080fd5b50565b600081359050613a2f81613a09565b92915050565b600080600060608486031215613a4e57613a4d613123565b5b6000613a5c86828701613a20565b9350506020613a6d86828701613521565b9250506040613a7e868287016134f5565b9150509250925092565b600080600080600080600080610100898b031215613aa957613aa8613123565b5b6000613ab78b828c01613862565b9850506020613ac88b828c01613862565b9750506040613ad98b828c016134f5565b9650506060613aea8b828c016134f5565b9550506080613afb8b828c016134f5565b94505060a0613b0c8b828c016134f5565b93505060c0613b1d8b828c01613521565b92505060e0613b2e8b828c016134f5565b9150509295985092959890939650565b60008060008060808587031215613b5857613b57613123565b5b6000613b6687828801613521565b9450506020613b7787828801613521565b9350506040613b8887828801613521565b9250506060613b9987828801613521565b91505092959194509250565b613bae8161312d565b82525050565b6000602082019050613bc96000830184613ba5565b92915050565b600081519050613bde8161391e565b92915050565b600060208284031215613bfa57613bf9613123565b5b6000613c0884828501613bcf565b91505092915050565b6000604082019050613c2660008301856135d9565b613c3360208301846134aa565b9392505050565b600081519050613c49816134de565b92915050565b600060208284031215613c6557613c64613123565b5b6000613c7384828501613c3a565b91505092915050565b6000604082019050613c9160008301856134aa565b613c9e60208301846134aa565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cdf826134d4565b9150613cea836134d4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613d1f57613d1e613ca5565b5b828201905092915050565b6000613d35826134d4565b9150613d40836134d4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7957613d78613ca5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613dbe826134d4565b9150613dc9836134d4565b925082613dd957613dd8613d84565b5b828204905092915050565b600082825260208201905092915050565b7f6e6f7420656e6f75676820726577617264206c65667400000000000000000000600082015250565b6000613e2b601683613de4565b9150613e3682613df5565b602082019050919050565b60006020820190508181036000830152613e5a81613e1e565b9050919050565b6000613e7c613e77613e7284613282565b613208565b6134d4565b9050919050565b613e8c81613e61565b82525050565b600060c082019050613ea760008301896134aa565b613eb46020830188613776565b613ec16040830187613e83565b613ece6060830186613e83565b613edb6080830185613e83565b613ee860a0830184613e83565b979650505050505050565b6000604082019050613f0860008301856134aa565b613f156020830184613776565b9392505050565b600081519050613f2b81613580565b92915050565b600060208284031215613f4757613f46613123565b5b6000613f5584828501613f1c565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115613fb557808604811115613f9157613f90613ca5565b5b6001851615613fa05780820291505b8081029050613fae85613f5e565b9450613f75565b94509492505050565b600082613fce576001905061408a565b81613fdc576000905061408a565b8160018114613ff25760028114613ffc5761402b565b600191505061408a565b60ff84111561400e5761400d613ca5565b5b8360020a91508482111561402557614024613ca5565b5b5061408a565b5060208310610133831016604e8410600b84101617156140605782820a90508381111561405b5761405a613ca5565b5b61408a565b61406d8484846001613f6b565b9250905081840481111561408457614083613ca5565b5b81810290505b9392505050565b600061409c826134d4565b91506140a7836134d4565b92506140d47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613fbe565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061411682613382565b915061412183613382565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156141605761415f613ca5565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561419d5761419c613ca5565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156141da576141d9613ca5565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561421757614216613ca5565b5b828202905092915050565b600061422d82613382565b915061423883613382565b92508261424857614247613d84565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561428157614280613ca5565b5b828205905092915050565b600061429782613382565b91506142a283613382565b9250817f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038313600083121516156142dd576142dc613ca5565b5b817f800000000000000000000000000000000000000000000000000000000000000003831260008312161561431557614314613ca5565b5b828201905092915050565b600061432b826134d4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361435d5761435c613ca5565b5b600182019050919050565b6000614373826134d4565b915061437e836134d4565b92508282101561439157614390613ca5565b5b828203905092915050565b60006060820190506143b16000830186613776565b6143be6020830185613776565b6143cb6040830184613776565b949350505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b600061442f602e83613de4565b915061443a826143d3565b604082019050919050565b6000602082019050818103600083015261445e81614422565b9050919050565b6000819050919050565b600060ff82169050919050565b600061449761449261448d84614465565b613208565b61446f565b9050919050565b6144a78161447c565b82525050565b60006020820190506144c2600083018461449e565b92915050565b60006060820190506144dd60008301866134aa565b6144ea60208301856134aa565b6144f76040830184613776565b949350505050565b7f53616665436173743a2076616c756520646f65736e27742066697420696e206160008201527f6e20696e74323536000000000000000000000000000000000000000000000000602082015250565b600061455b602883613de4565b9150614566826144ff565b604082019050919050565b6000602082019050818103600083015261458a8161454e565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006145ed602b83613de4565b91506145f882614591565b604082019050919050565b6000602082019050818103600083015261461c816145e0565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061467f602a83613de4565b915061468a82614623565b604082019050919050565b600060208201905081810360008301526146ae81614672565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614740602683613de4565b915061474b826146e4565b604082019050919050565b6000602082019050818103600083015261476f81614733565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006147ac601d83613de4565b91506147b782614776565b602082019050919050565b600060208201905081810360008301526147db8161479f565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156148165780820151818401526020810190506147fb565b83811115614825576000848401525b50505050565b6000614836826147e2565b61484081856147ed565b93506148508185602086016147f8565b80840191505092915050565b6000614868828461482b565b915081905092915050565b600081519050919050565b600061488982614873565b6148938185613de4565b93506148a38185602086016147f8565b6148ac816132c5565b840191505092915050565b600060208201905081810360008301526148d1818461487e565b90509291505056fea264697066735822122012be8ef8c969a6dcc5172587937386888b66455093a5aca341ccdaaa39df184064736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "daoWithdraw(address,address,uint256)": {
        "details": "The DAO can't take away SuDAO token already distributed to users,      because they are stored on different contract"
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "title": "The contract that distribute suDAO tokens for community based on NFT membership",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "daoWithdraw(address,address,uint256)": {
        "notice": "The DAO can take away donations."
      },
      "getMaximumDonationAmount(address,address)": {
        "notice": "Get the max donation that user can do"
      },
      "participate(uint256,address)": {
        "notice": "notice Allows to participate for users with required NFT param donationAmount The amount of tokens specified in donationToken"
      },
      "setDistributionInfo(uint64,uint64,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "The owner can set new or edit existing token distribution with no restrictions"
      },
      "setDistributionVesting(uint64,uint64,uint64,uint64)": {
        "notice": "The admin can set new or edit existing token vesting details"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 497,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 500,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4310,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11612,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(ISuAccessControl)12922"
      },
      {
        "astId": 11699,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11754,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "VE_ERC_20",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 11756,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "SU_DAO",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 11759,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "BONUS_CONTRACT",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IBonus)12895"
      },
      {
        "astId": 11761,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "startTimestamp",
        "offset": 20,
        "slot": "103",
        "type": "t_uint64"
      },
      {
        "astId": 11763,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "deadlineTimestamp",
        "offset": 0,
        "slot": "104",
        "type": "t_uint64"
      },
      {
        "astId": 11765,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationToken",
        "offset": 8,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 11767,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationTokenToUSD1e18",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 11770,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "bondingCurvePolynomial1e18",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 11772,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "minimumDonation",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 11774,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "maximumDonation",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 11776,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationGoalMin",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 11778,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donationGoalMax",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 11780,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "fullVestingSeconds",
        "offset": 0,
        "slot": "111",
        "type": "t_uint64"
      },
      {
        "astId": 11782,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "cliffSeconds",
        "offset": 8,
        "slot": "111",
        "type": "t_uint64"
      },
      {
        "astId": 11784,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "tgeUnlockRatio1e18",
        "offset": 16,
        "slot": "111",
        "type": "t_uint64"
      },
      {
        "astId": 11786,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "vestingFrequencySeconds",
        "offset": 24,
        "slot": "111",
        "type": "t_uint64"
      },
      {
        "astId": 11793,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "nftRequirement",
        "offset": 0,
        "slot": "112",
        "type": "t_struct(AddressSet)10322_storage"
      },
      {
        "astId": 11799,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "bonusStats",
        "offset": 0,
        "slot": "114",
        "type": "t_struct(BonusStats)11796_storage"
      },
      {
        "astId": 11803,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "donations",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11805,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "totalDonations",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 12784,
        "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
        "label": "__gap",
        "offset": 0,
        "slot": "117",
        "type": "t_array(t_uint256)48_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBonus)12895": {
        "encoding": "inplace",
        "label": "contract IBonus",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)12922": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)10322_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10321,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10021_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BonusStats)11796_storage": {
        "encoding": "inplace",
        "label": "struct TokenDistributorV4.BonusStats",
        "members": [
          {
            "astId": 11795,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "bonusRewarded",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)10021_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10016,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10020,
            "contract": "contracts/distributions/TokenDistributorV4.sol:TokenDistributorV4",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}