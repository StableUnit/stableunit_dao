{
  "address": "0xeC66789E1705e64fcd8f0c1072f474b2a1ea579e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract ERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGE_MAX_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "availableToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toDAO",
          "type": "address"
        }
      ],
      "name": "donateTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "contract ERC20Upgradeable",
          "name": "_lockedToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeUnlockRatio1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingFrequencySeconds",
          "type": "uint256"
        }
      ],
      "name": "lockUnderVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newTgeTimestamp",
          "type": "uint32"
        }
      ],
      "name": "updateTgeTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountAlreadyWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeUnlockRatio1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingFrequencySeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "f758b7a0534974279b090d6789581c7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE_MAX_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toDAO\",\"type\":\"address\"}],\"name\":\"donateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"_lockedToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeUnlockRatio1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingFrequencySeconds\",\"type\":\"uint256\"}],\"name\":\"lockUnderVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newTgeTimestamp\",\"type\":\"uint32\"}],\"name\":\"updateTgeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAlreadyWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeUnlockRatio1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingFrequencySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBalance(address,uint256)\":{\"params\":{\"account\":\"Beneficiary of the vesting account.\",\"amount\":\"Amount of token to be send to user under vesting, which will be deducted from msg.sender.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"availableToClaim(address)\":{\"returns\":{\"_0\":\"Returns amount of tokens the users can withdraw right now.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"account\":\"Beneficiary of the vesting account.\",\"amount\":\"Amount of tokens to be send, which will be deducted from msg.sender.\",\"cliffSeconds\":\"Amount of seconds while tokens would be completely locked.\",\"tgeUnlockRatio1e18\":\"ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\",\"vestingFrequencySeconds\":\"how frequently token are going to be unlocked after the cliff.\",\"vestingSeconds\":\"Amount of seconds when linear vesting would be over. Starts from cliff.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBalance(address,uint256)\":{\"notice\":\"Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!\"},\"availableToClaim(address)\":{\"notice\":\"Checks amount of vested tokens minus already withdrawn.\"},\"claim()\":{\"notice\":\"User can claim their vested tokens.\"},\"donateTokens(address)\":{\"notice\":\"User can donate tokens under vesting to DAO or other admin contract as us treasury.\"},\"lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\"},\"rescue(address)\":{\"notice\":\"The DAO can take away tokens accidentally sent to the contract.\"},\"totalClaimed(address)\":{\"notice\":\"Total amount of token user had claimed.\"},\"totalDeposited(address)\":{\"notice\":\"Total amount of token was deposited under vesting on behalf of the user.\"},\"updateTgeTimestamp(uint32)\":{\"notice\":\"owner of the contract can set up TGE date within set limits.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vested-escrow/VeERC20.sol\":\"VeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x7c7ac0bc6c340a7f320524b9a4b4b079ee9da3c51258080d4bab237f329a427c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xea2c6f9d434127bf36b1e3e5ebaaf6d28a64dbaeea560508e570014e905a5ad2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xd7ebe0f80affaa622b9efd95cc8db3e03e70d699176f7457b4a95e34a11f9834\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is Initializable, ISuAccessControl, ContextUpgradeable {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    function __SuAuthenticated_init(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n    //============================interfaces sugar============================\\n\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x945d2d816d58d609ca4a481ebc567a6f00a6e1cce88c869c681a867c06e50bb1\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"},\"contracts/interfaces/IveERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IveERC20 {\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3fce7c37422c1217a42572785409cd6ffc95c2c515fe0d777f111c4816c67ac1\",\"license\":\"UNLICENSED\"},\"contracts/vested-escrow/VeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\nimport \\\"../access-control/SuAccessControlAuthenticated.sol\\\";\\nimport \\\"../interfaces/IveERC20.sol\\\";\\n\\n/*\\n * @title The contact enables the storage of erc20 tokens under the linear time-vesting with the cliff time-lock.\\n * @notice During cliff period all tokens are locked so the user can't claim it.\\n * After the cliff period is over token gets gradually unlock every second until the vesting is over.\\n *\\n * For example, if cliff is 3 months and vesting is 12 months,\\n *      during the first 3 mouths user can't claim anything\\n *      after 4 months (i.e. 1 month after the cliff) user can claim 1/9 of all tokens\\n *      after 6 months user can claim 3/9 of all tokens etc.\\n * It's possible to claim tokens by parts during vesting, or claim all at once when vesting if over.\\n *\\n * To make balance visible in the erc20 wallets, the contact \\\"looks like\\\" erc20 token by implementing its interface\\n * however all non-view methods such as transfer or approve aren't active and will be reverted.\\n*/\\ncontract VeERC20 is ERC20BurnableUpgradeable, SuAccessControlAuthenticated, IveERC20 {\\n    using SafeERC20Upgradeable for ERC20Upgradeable;\\n\\n    ERC20Upgradeable public LOCKED_TOKEN;\\n    uint32 public TGE_MAX_TIMESTAMP;\\n    uint32 public tgeTimestamp;\\n\\n    struct VestingInfo {\\n        // we keep all data in one 256 bits slot to safe on gas usage\\n        uint256 amountAlreadyWithdrawn;\\n        uint256 cliffSeconds;\\n        uint256 vestingSeconds;\\n        uint256 tgeUnlockRatio1e18; // [0..1], uint64 is enough because log2(1e18) ~= 60\\n        uint256 vestingFrequencySeconds;\\n    }\\n    mapping(address => VestingInfo) public vestingInfo;\\n\\n    function initialize(address _accessControlSingleton, ERC20Upgradeable _lockedToken) initializer public {\\n        __SuAuthenticated_init(_accessControlSingleton);\\n        __ERC20_init(string.concat(\\\"vested escrow \\\", _lockedToken.name()), string.concat(\\\"ve\\\", _lockedToken.symbol()));\\n        LOCKED_TOKEN = _lockedToken;\\n        TGE_MAX_TIMESTAMP = 1685577600; // Unix Timestamp\\t1685577600 = GMT+0 Thu Jun 01 2023 00:00:00 GMT+0000\\n        tgeTimestamp = TGE_MAX_TIMESTAMP;\\n    }\\n\\n    /**\\n    * @notice owner of the contract can set up TGE date within set limits.\\n    */\\n    function updateTgeTimestamp(uint32 newTgeTimestamp) external onlyRole(ADMIN_ROLE) {\\n        require(uint32(block.timestamp) <= newTgeTimestamp, \\\"veERC20: TGE date can't be in the past\\\");\\n        require(newTgeTimestamp <= TGE_MAX_TIMESTAMP, \\\"veERC20: new TGE date is beyond limit\\\");\\n        tgeTimestamp = newTgeTimestamp;\\n    }\\n\\n    /**\\n    * @notice Total amount of token was deposited under vesting on behalf of the user.\\n    */\\n    function totalDeposited(address user) public view returns (uint256) {\\n        return super.balanceOf(user) + vestingInfo[user].amountAlreadyWithdrawn;\\n    }\\n\\n    /**\\n    * @notice Total amount of token user had claimed.\\n    */\\n    function totalClaimed(address user) public view returns (uint256) {\\n        return vestingInfo[user].amountAlreadyWithdrawn;\\n    }\\n\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external onlyRole(ADMIN_ROLE) override\\n    {\\n        _mergeVesting(account, vestingSeconds, cliffSeconds, tgeUnlockRatio1e18, vestingFrequencySeconds);\\n        addBalance(account, amount);\\n    }\\n\\n    /**\\n    * @notice updates lock settings for the account and chose longest among existing one and passed arguments\\n    * @param account Beneficiary of the vesting account.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function _mergeVesting(\\n        address account,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) internal {\\n        require(cliffSeconds <= vestingSeconds, \\\"cliffTime should be less then vestingTime\\\");\\n        require(tgeUnlockRatio1e18 <= 1e18, \\\"tgeUnlockRatio should be less than 1\\\");\\n\\n        if (vestingInfo[account].vestingSeconds < vestingSeconds) {\\n            vestingInfo[account].vestingSeconds = vestingSeconds;\\n        }\\n\\n        if (vestingInfo[account].cliffSeconds < cliffSeconds) {\\n            vestingInfo[account].cliffSeconds = cliffSeconds;\\n        }\\n\\n        if (vestingInfo[account].tgeUnlockRatio1e18 > tgeUnlockRatio1e18) {\\n            vestingInfo[account].tgeUnlockRatio1e18 = tgeUnlockRatio1e18;\\n        }\\n\\n        if (vestingInfo[account].vestingFrequencySeconds < vestingFrequencySeconds) {\\n            vestingInfo[account].vestingFrequencySeconds = vestingFrequencySeconds;\\n        }\\n    }\\n\\n    /**\\n    * @notice Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of token to be send to user under vesting, which will be deducted from msg.sender.\\n    */\\n    function addBalance(address account, uint256 amount) public {\\n        LOCKED_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        // mint more veERC20 tokens for the account\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Checks amount of vested tokens minus already withdrawn.\\n     * @return Returns amount of tokens the users can withdraw right now.\\n     */\\n    function availableToClaim(address user) public view returns (uint256) {\\n        VestingInfo memory info = vestingInfo[user];\\n        uint256 t = block.timestamp;\\n        // if the time is before the TGE - there's nothing vested yet\\n        if (t < tgeTimestamp) return 0;\\n\\n        // if it's past TGE, there's at lest tgeUnlockRatio is vested\\n         uint256 vested = totalDeposited(user) * info.tgeUnlockRatio1e18/1e18;\\n\\n        // if the time is before the cliff\\n        if (t < (tgeTimestamp + info.cliffSeconds)) {\\n            // there's nothing additional vested yet\\n        } else {\\n            // if after the cliff\\n\\n            // if it's beyond vesting time\\n            if ((tgeTimestamp + info.vestingSeconds) < t) {\\n                // everything is vested\\n                vested = totalDeposited(user);\\n            } else {\\n                // otherwise the amount is proportional to the amount after the cliff before end of vesting\\n                uint256 x = totalDeposited(user);\\n                // how much second passed after cliff\\n                uint256 y = (t - (tgeTimestamp + info.cliffSeconds));\\n                // how much seconds from cliff to end of vesting\\n                uint256 z = (uint256(info.vestingSeconds) - uint256(info.cliffSeconds));\\n                // y2 := max y2 : vestingFrequencySeconds*N <= y\\n                uint256 y2 = y / info.vestingFrequencySeconds * info.vestingFrequencySeconds;\\n\\n                vested = x * y2 / z;\\n            }\\n        }\\n\\n        // the answer is how much is vested in total minute how much already withdrawn\\n        return vested - uint256(info.amountAlreadyWithdrawn);\\n    }\\n\\n    /**\\n     * @notice User can claim their vested tokens.\\n     */\\n    function claim() external {\\n        uint256 claimAmount = availableToClaim(msg.sender);\\n        require(claimAmount > 0, \\\"Can't claim 0 tokens\\\");\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = vestingInfo[msg.sender].amountAlreadyWithdrawn + claimAmount;\\n        _burn(msg.sender, claimAmount);\\n        LOCKED_TOKEN.safeTransfer(msg.sender, claimAmount);\\n    }\\n\\n    /**\\n     * @notice User can donate tokens under vesting to DAO or other admin contract as us treasury.\\n     */\\n    function donateTokens(address toDAO) external {\\n        require(hasRole(DAO_ROLE, toDAO) == true, \\\"invalid DAO address\\\");\\n        uint256 balance = super.balanceOf(msg.sender);\\n        require(balance > 0, \\\"nothing to donate\\\");\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = vestingInfo[msg.sender].amountAlreadyWithdrawn + uint64(balance);\\n        _burn(msg.sender, balance);\\n        LOCKED_TOKEN.safeTransfer(toDAO, balance);\\n    }\\n\\n    /**\\n    * @notice The DAO can take away tokens accidentally sent to the contract.\\n    */\\n    function rescue(ERC20Upgradeable token) external onlyRole(DAO_ROLE) {\\n        require(token != LOCKED_TOKEN, \\\"No allowed to rescue this token\\\");\\n        // allow to rescue ether\\n        if (address(token) == address(0)) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            token.safeTransfer(address(msg.sender), token.balanceOf(address(this)));\\n        }\\n    }\\n    receive() external payable {}\\n\\n    function transfer(address, uint256) public virtual override returns (bool) {\\n        revert(\\\"not possible to transfer vested token\\\");\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n    internal\\n    override\\n    {\\n        super._burn(account, amount);\\n    }\\n\\n    function burnAll() external {\\n        uint256 balance = super.balanceOf(msg.sender);\\n        super._burn(msg.sender, balance);\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0a30b1ca4cb3805f0e86d8cfb8bfee1c9955787a22d5801144e481e9266ff01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506149aa806100206000396000f3fe6080604052600436106102135760003560e01c806375b238fc11610118578063a217fddf116100a0578063dd62ed3e1161006f578063dd62ed3e146107e2578063e9c265181461081f578063ea9e9a811461084a578063ef5d9ae814610875578063f78e633d146108b25761021a565b8063a217fddf14610712578063a4317ef41461073d578063a457c2d714610768578063a9059cbb146107a55761021a565b8063925bf5d4116100e7578063925bf5d41461065357806393a56edc1461067c57806395367f89146106a557806395d89b41146106d05780639975038c146106fb5761021a565b806375b238fc1461059957806379cc6790146105c4578063839006f2146105ed57806391d14854146106165761021a565b8063248a9ca31161019b578063485cc9551161016a578063485cc955146104b45780634e71d92d146104dd57806353055481146104f4578063692878621461053157806370a082311461055c5761021a565b8063248a9ca3146103e6578063313ce56714610423578063395093511461044e57806342966c681461048b5761021a565b8063095ea7b3116101e2578063095ea7b3146102db5780630da451881461031857806318160ddd1461035557806321e5383a1461038057806323b872dd146103a95761021a565b806301ffc9a71461021f57806303ee9f221461025c57806306fdde031461028757806308614362146102b25761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b5061024660048036038101906102419190612cf5565b6108f3565b6040516102539190612d3d565b60405180910390f35b34801561026857600080fd5b50610271610998565b60405161027e9190612dd7565b60405180910390f35b34801561029357600080fd5b5061029c6109be565b6040516102a99190612e8b565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612eeb565b610a50565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190612f4e565b610bec565b60405161030f9190612d3d565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a9190612eeb565b610c0f565b60405161034c9190612f9d565b60405180910390f35b34801561036157600080fd5b5061036a610e15565b6040516103779190612f9d565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190612f4e565b610e1f565b005b3480156103b557600080fd5b506103d060048036038101906103cb9190612fb8565b610e7c565b6040516103dd9190612d3d565b60405180910390f35b3480156103f257600080fd5b5061040d60048036038101906104089190613041565b610eab565b60405161041a919061307d565b60405180910390f35b34801561042f57600080fd5b50610438610f50565b60405161044591906130b4565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190612f4e565b610f59565b6040516104829190612d3d565b60405180910390f35b34801561049757600080fd5b506104b260048036038101906104ad91906130cf565b610f90565b005b3480156104c057600080fd5b506104db60048036038101906104d6919061313a565b610fa4565b005b3480156104e957600080fd5b506104f26112ac565b005b34801561050057600080fd5b5061051b60048036038101906105169190612eeb565b6113ea565b6040516105289190612f9d565b60405180910390f35b34801561053d57600080fd5b50610546611449565b604051610553919061319b565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e9190612eeb565b61146f565b6040516105909190612f9d565b60405180910390f35b3480156105a557600080fd5b506105ae6114b8565b6040516105bb919061307d565b60405180910390f35b3480156105d057600080fd5b506105eb60048036038101906105e69190612f4e565b6114dc565b005b3480156105f957600080fd5b50610614600480360381019061060f91906131b6565b6114fc565b005b34801561062257600080fd5b5061063d600480360381019061063891906131e3565b611706565b60405161064a9190612d3d565b60405180910390f35b34801561065f57600080fd5b5061067a6004803603810190610675919061325f565b6117ae565b005b34801561068857600080fd5b506106a3600480360381019061069e919061328c565b6118f1565b005b3480156106b157600080fd5b506106ba61197f565b6040516106c7919061307d565b60405180910390f35b3480156106dc57600080fd5b506106e56119a3565b6040516106f29190612e8b565b60405180910390f35b34801561070757600080fd5b50610710611a35565b005b34801561071e57600080fd5b50610727611a97565b604051610734919061307d565b60405180910390f35b34801561074957600080fd5b50610752611a9e565b60405161075f9190613328565b60405180910390f35b34801561077457600080fd5b5061078f600480360381019061078a9190612f4e565b611ab4565b60405161079c9190612d3d565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c79190612f4e565b611b2b565b6040516107d99190612d3d565b60405180910390f35b3480156107ee57600080fd5b5061080960048036038101906108049190613343565b611b68565b6040516108169190612f9d565b60405180910390f35b34801561082b57600080fd5b50610834611bef565b604051610841919061307d565b60405180910390f35b34801561085657600080fd5b5061085f611bf6565b60405161086c9190613328565b60405180910390f35b34801561088157600080fd5b5061089c60048036038101906108979190612eeb565b611c0c565b6040516108a99190612f9d565b60405180910390f35b3480156108be57600080fd5b506108d960048036038101906108d49190612eeb565b611c58565b6040516108ea959493929190613383565b60405180910390f35b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161095091906133e5565b602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610991919061342c565b9050919050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060603680546109cd90613488565b80601f01602080910402602001604051908101604052809291908181526020018280546109f990613488565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b5050505050905090565b60011515610a616000801b83611706565b151514610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90613505565b60405180910390fd5b6000610aae3361146f565b905060008111610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90613571565b60405180910390fd5b8067ffffffffffffffff1660ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b4b91906135c0565b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610b9b3382611c8e565b610be8828260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b5050565b600080610bf7611d22565b9050610c04818585611d2a565b600191505092915050565b60008060ca60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600042905060c960189054906101000a900463ffffffff1663ffffffff16811015610cc057600092505050610e10565b6000670de0b6b3a76400008360600151610cd9876113ea565b610ce39190613616565b610ced919061369f565b9050826020015160c960189054906101000a900463ffffffff1663ffffffff16610d1791906135c0565b8210610dfa5781836040015160c960189054906101000a900463ffffffff1663ffffffff16610d4691906135c0565b1015610d5c57610d55856113ea565b9050610df9565b6000610d67866113ea565b90506000846020015160c960189054906101000a900463ffffffff1663ffffffff16610d9391906135c0565b84610d9e91906136d0565b9050600085602001518660400151610db691906136d0565b905060008660800151876080015184610dcf919061369f565b610dd99190613616565b9050818185610de89190613616565b610df2919061369f565b9450505050505b5b826000015181610e0a91906136d0565b93505050505b919050565b6000603554905090565b610e6e33308360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ef3909392919063ffffffff16565b610e788282611f7c565b5050565b600080610e87611d22565b9050610e948582856120dc565b610e9f858585612168565b60019150509392505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b8152600401610f08919061307d565b602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190613719565b9050919050565b60006012905090565b600080610f64611d22565b9050610f85818585610f768589611b68565b610f8091906135c0565b611d2a565b600191505092915050565b610fa1610f9b611d22565b82611c8e565b50565b60008060019054906101000a900460ff16159050808015610fd55750600160008054906101000a900460ff1660ff16105b806110025750610fe4306123ea565b1580156110015750600160008054906101000a900460ff1660ff16145b5b611041576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611038906137b8565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561107e576001600060016101000a81548160ff0219169083151502179055505b6110878361240d565b6111b58273ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110fe91906138fe565b60405160200161110e91906139a9565b6040516020818303038152906040528373ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061119191906138fe565b6040516020016111a191906139f5565b6040516020818303038152906040526124a0565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550636477df8060c960146101000a81548163ffffffff021916908363ffffffff16021790555060c960149054906101000a900463ffffffff1660c960186101000a81548163ffffffff021916908363ffffffff16021790555080156112a75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161129e9190613a56565b60405180910390a15b505050565b60006112b733610c0f565b9050600081116112fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f390613abd565b60405180910390fd5b8060ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461134a91906135c0565b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061139a3382611c8e565b6113e7338260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b50565b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546114388361146f565b61144291906135c0565b9050919050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6114ee826114e8611d22565b836120dc565b6114f88282611c8e565b5050565b6000801b61150a8133611706565b61154d5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611544929190613aec565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d490613b61565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361165d573373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611657573d6000803e3d6000fd5b50611702565b611701338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161169a9190613b81565b602060405180830381865afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190613bb1565b8473ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b5b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401611765929190613aec565b602060405180830381865afa158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a6919061342c565b905092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117d98133611706565b61181c5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611813929190613aec565b60405180910390fd5b8163ffffffff164263ffffffff16111561186b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186290613c50565b60405180910390fd5b60c960149054906101000a900463ffffffff1663ffffffff168263ffffffff1611156118cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c390613ce2565b60405180910390fd5b8160c960186101000a81548163ffffffff021916908363ffffffff1602179055505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561191c8133611706565b61195f5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611956929190613aec565b60405180910390fd5b61196c87868686866124fd565b6119768787610e1f565b50505050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b6060603780546119b290613488565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90613488565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b5050505050905090565b6000611a403361146f565b9050611a4c33826127da565b600060ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b6000801b81565b60c960189054906101000a900463ffffffff1681565b600080611abf611d22565b90506000611acd8286611b68565b905083811015611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0990613d74565b60405180910390fd5b611b1f8286868403611d2a565b60019250505092915050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f90613e06565b60405180910390fd5b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000801b81565b60c960149054906101000a900463ffffffff1681565b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60ca6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b611c9882826127da565b5050565b611d1d8363a9059cbb60e01b8484604051602401611cbb929190613e26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506129b2565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9090613ec1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dff90613f53565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611ee69190612f9d565b60405180910390a3505050565b611f76846323b872dd60e01b858585604051602401611f1493929190613f73565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506129b2565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe290613ff6565b60405180910390fd5b611ff760008383612a79565b806035600082825461200991906135c0565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461205f91906135c0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120c49190612f9d565b60405180910390a36120d860008383612a7e565b5050565b60006120e88484611b68565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146121625781811015612154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214b90614062565b60405180910390fd5b6121618484848403611d2a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036121d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ce906140f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223d90614186565b60405180910390fd5b612251838383612a79565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156122d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cf90614218565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461236d91906135c0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123d19190612f9d565b60405180910390a36123e4848484612a7e565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661245c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612453906142aa565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff166124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906142aa565b60405180910390fd5b6124f98282612a83565b5050565b83831115612540576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125379061433c565b60405180910390fd5b670de0b6b3a764000082111561258b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612582906143ce565b60405180910390fd5b8360ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154101561261d578360ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b8260ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156126af578260ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8160ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541115612741578160ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b8060ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015410156127d3578060ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284090614460565b60405180910390fd5b61285582600083612a79565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156128dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d3906144f2565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816035600082825461293491906136d0565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516129999190612f9d565b60405180910390a36129ad83600084612a7e565b505050565b6000612a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612af69092919063ffffffff16565b9050600081511115612a745780806020019051810190612a34919061342c565b612a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6a90614584565b60405180910390fd5b5b505050565b505050565b505050565b600060019054906101000a900460ff16612ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac9906142aa565b60405180910390fd5b8160369081612ae19190614746565b508060379081612af19190614746565b505050565b6060612b058484600085612b0e565b90509392505050565b606082471015612b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4a9061488a565b60405180910390fd5b612b5c856123ea565b612b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b92906148f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612bc4919061495d565b60006040518083038185875af1925050503d8060008114612c01576040519150601f19603f3d011682016040523d82523d6000602084013e612c06565b606091505b5091509150612c16828286612c22565b92505050949350505050565b60608315612c3257829050612c82565b600083511115612c455782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c799190612e8b565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612cd281612c9d565b8114612cdd57600080fd5b50565b600081359050612cef81612cc9565b92915050565b600060208284031215612d0b57612d0a612c93565b5b6000612d1984828501612ce0565b91505092915050565b60008115159050919050565b612d3781612d22565b82525050565b6000602082019050612d526000830184612d2e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612d9d612d98612d9384612d58565b612d78565b612d58565b9050919050565b6000612daf82612d82565b9050919050565b6000612dc182612da4565b9050919050565b612dd181612db6565b82525050565b6000602082019050612dec6000830184612dc8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e2c578082015181840152602081019050612e11565b83811115612e3b576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e5d82612df2565b612e678185612dfd565b9350612e77818560208601612e0e565b612e8081612e41565b840191505092915050565b60006020820190508181036000830152612ea58184612e52565b905092915050565b6000612eb882612d58565b9050919050565b612ec881612ead565b8114612ed357600080fd5b50565b600081359050612ee581612ebf565b92915050565b600060208284031215612f0157612f00612c93565b5b6000612f0f84828501612ed6565b91505092915050565b6000819050919050565b612f2b81612f18565b8114612f3657600080fd5b50565b600081359050612f4881612f22565b92915050565b60008060408385031215612f6557612f64612c93565b5b6000612f7385828601612ed6565b9250506020612f8485828601612f39565b9150509250929050565b612f9781612f18565b82525050565b6000602082019050612fb26000830184612f8e565b92915050565b600080600060608486031215612fd157612fd0612c93565b5b6000612fdf86828701612ed6565b9350506020612ff086828701612ed6565b925050604061300186828701612f39565b9150509250925092565b6000819050919050565b61301e8161300b565b811461302957600080fd5b50565b60008135905061303b81613015565b92915050565b60006020828403121561305757613056612c93565b5b60006130658482850161302c565b91505092915050565b6130778161300b565b82525050565b6000602082019050613092600083018461306e565b92915050565b600060ff82169050919050565b6130ae81613098565b82525050565b60006020820190506130c960008301846130a5565b92915050565b6000602082840312156130e5576130e4612c93565b5b60006130f384828501612f39565b91505092915050565b600061310782612ead565b9050919050565b613117816130fc565b811461312257600080fd5b50565b6000813590506131348161310e565b92915050565b6000806040838503121561315157613150612c93565b5b600061315f85828601612ed6565b925050602061317085828601613125565b9150509250929050565b600061318582612da4565b9050919050565b6131958161317a565b82525050565b60006020820190506131b0600083018461318c565b92915050565b6000602082840312156131cc576131cb612c93565b5b60006131da84828501613125565b91505092915050565b600080604083850312156131fa576131f9612c93565b5b60006132088582860161302c565b925050602061321985828601612ed6565b9150509250929050565b600063ffffffff82169050919050565b61323c81613223565b811461324757600080fd5b50565b60008135905061325981613233565b92915050565b60006020828403121561327557613274612c93565b5b60006132838482850161324a565b91505092915050565b60008060008060008060c087890312156132a9576132a8612c93565b5b60006132b789828a01612ed6565b96505060206132c889828a01612f39565b95505060406132d989828a01612f39565b94505060606132ea89828a01612f39565b93505060806132fb89828a01612f39565b92505060a061330c89828a01612f39565b9150509295509295509295565b61332281613223565b82525050565b600060208201905061333d6000830184613319565b92915050565b6000806040838503121561335a57613359612c93565b5b600061336885828601612ed6565b925050602061337985828601612ed6565b9150509250929050565b600060a0820190506133986000830188612f8e565b6133a56020830187612f8e565b6133b26040830186612f8e565b6133bf6060830185612f8e565b6133cc6080830184612f8e565b9695505050505050565b6133df81612c9d565b82525050565b60006020820190506133fa60008301846133d6565b92915050565b61340981612d22565b811461341457600080fd5b50565b60008151905061342681613400565b92915050565b60006020828403121561344257613441612c93565b5b600061345084828501613417565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134a057607f821691505b6020821081036134b3576134b2613459565b5b50919050565b7f696e76616c69642044414f206164647265737300000000000000000000000000600082015250565b60006134ef601383612dfd565b91506134fa826134b9565b602082019050919050565b6000602082019050818103600083015261351e816134e2565b9050919050565b7f6e6f7468696e6720746f20646f6e617465000000000000000000000000000000600082015250565b600061355b601183612dfd565b915061356682613525565b602082019050919050565b6000602082019050818103600083015261358a8161354e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135cb82612f18565b91506135d683612f18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561360b5761360a613591565b5b828201905092915050565b600061362182612f18565b915061362c83612f18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561366557613664613591565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006136aa82612f18565b91506136b583612f18565b9250826136c5576136c4613670565b5b828204905092915050565b60006136db82612f18565b91506136e683612f18565b9250828210156136f9576136f8613591565b5b828203905092915050565b60008151905061371381613015565b92915050565b60006020828403121561372f5761372e612c93565b5b600061373d84828501613704565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006137a2602e83612dfd565b91506137ad82613746565b604082019050919050565b600060208201905081810360008301526137d181613795565b9050919050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61381a82612e41565b810181811067ffffffffffffffff82111715613839576138386137e2565b5b80604052505050565b600061384c612c89565b90506138588282613811565b919050565b600067ffffffffffffffff821115613878576138776137e2565b5b61388182612e41565b9050602081019050919050565b60006138a161389c8461385d565b613842565b9050828152602081018484840111156138bd576138bc6137dd565b5b6138c8848285612e0e565b509392505050565b600082601f8301126138e5576138e46137d8565b5b81516138f584826020860161388e565b91505092915050565b60006020828403121561391457613913612c93565b5b600082015167ffffffffffffffff81111561393257613931612c98565b5b61393e848285016138d0565b91505092915050565b7f76657374656420657363726f7720000000000000000000000000000000000000815250565b600081905092915050565b600061398382612df2565b61398d818561396d565b935061399d818560208601612e0e565b80840191505092915050565b60006139b482613947565b600e820191506139c48284613978565b915081905092915050565b7f7665000000000000000000000000000000000000000000000000000000000000815250565b6000613a00826139cf565b600282019150613a108284613978565b915081905092915050565b6000819050919050565b6000613a40613a3b613a3684613a1b565b612d78565b613098565b9050919050565b613a5081613a25565b82525050565b6000602082019050613a6b6000830184613a47565b92915050565b7f43616e277420636c61696d203020746f6b656e73000000000000000000000000600082015250565b6000613aa7601483612dfd565b9150613ab282613a71565b602082019050919050565b60006020820190508181036000830152613ad681613a9a565b9050919050565b613ae681612ead565b82525050565b6000604082019050613b01600083018561306e565b613b0e6020830184613add565b9392505050565b7f4e6f20616c6c6f77656420746f20726573637565207468697320746f6b656e00600082015250565b6000613b4b601f83612dfd565b9150613b5682613b15565b602082019050919050565b60006020820190508181036000830152613b7a81613b3e565b9050919050565b6000602082019050613b966000830184613add565b92915050565b600081519050613bab81612f22565b92915050565b600060208284031215613bc757613bc6612c93565b5b6000613bd584828501613b9c565b91505092915050565b7f766545524332303a2054474520646174652063616e277420626520696e20746860008201527f6520706173740000000000000000000000000000000000000000000000000000602082015250565b6000613c3a602683612dfd565b9150613c4582613bde565b604082019050919050565b60006020820190508181036000830152613c6981613c2d565b9050919050565b7f766545524332303a206e6577205447452064617465206973206265796f6e642060008201527f6c696d6974000000000000000000000000000000000000000000000000000000602082015250565b6000613ccc602583612dfd565b9150613cd782613c70565b604082019050919050565b60006020820190508181036000830152613cfb81613cbf565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613d5e602583612dfd565b9150613d6982613d02565b604082019050919050565b60006020820190508181036000830152613d8d81613d51565b9050919050565b7f6e6f7420706f737369626c6520746f207472616e73666572207665737465642060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000613df0602583612dfd565b9150613dfb82613d94565b604082019050919050565b60006020820190508181036000830152613e1f81613de3565b9050919050565b6000604082019050613e3b6000830185613add565b613e486020830184612f8e565b9392505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613eab602483612dfd565b9150613eb682613e4f565b604082019050919050565b60006020820190508181036000830152613eda81613e9e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f3d602283612dfd565b9150613f4882613ee1565b604082019050919050565b60006020820190508181036000830152613f6c81613f30565b9050919050565b6000606082019050613f886000830186613add565b613f956020830185613add565b613fa26040830184612f8e565b949350505050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613fe0601f83612dfd565b9150613feb82613faa565b602082019050919050565b6000602082019050818103600083015261400f81613fd3565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061404c601d83612dfd565b915061405782614016565b602082019050919050565b6000602082019050818103600083015261407b8161403f565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006140de602583612dfd565b91506140e982614082565b604082019050919050565b6000602082019050818103600083015261410d816140d1565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614170602383612dfd565b915061417b82614114565b604082019050919050565b6000602082019050818103600083015261419f81614163565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614202602683612dfd565b915061420d826141a6565b604082019050919050565b60006020820190508181036000830152614231816141f5565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614294602b83612dfd565b915061429f82614238565b604082019050919050565b600060208201905081810360008301526142c381614287565b9050919050565b7f636c69666654696d652073686f756c64206265206c657373207468656e20766560008201527f7374696e6754696d650000000000000000000000000000000000000000000000602082015250565b6000614326602983612dfd565b9150614331826142ca565b604082019050919050565b6000602082019050818103600083015261435581614319565b9050919050565b7f746765556e6c6f636b526174696f2073686f756c64206265206c65737320746860008201527f616e203100000000000000000000000000000000000000000000000000000000602082015250565b60006143b8602483612dfd565b91506143c38261435c565b604082019050919050565b600060208201905081810360008301526143e7816143ab565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061444a602183612dfd565b9150614455826143ee565b604082019050919050565b600060208201905081810360008301526144798161443d565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006144dc602283612dfd565b91506144e782614480565b604082019050919050565b6000602082019050818103600083015261450b816144cf565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061456e602a83612dfd565b915061457982614512565b604082019050919050565b6000602082019050818103600083015261459d81614561565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145c9565b61461086836145c9565b95508019841693508086168417925050509392505050565b600061464361463e61463984612f18565b612d78565b612f18565b9050919050565b6000819050919050565b61465d83614628565b6146716146698261464a565b8484546145d6565b825550505050565b600090565b614686614679565b614691818484614654565b505050565b5b818110156146b5576146aa60008261467e565b600181019050614697565b5050565b601f8211156146fa576146cb816145a4565b6146d4846145b9565b810160208510156146e3578190505b6146f76146ef856145b9565b830182614696565b50505b505050565b600082821c905092915050565b600061471d600019846008026146ff565b1980831691505092915050565b6000614736838361470c565b9150826002028217905092915050565b61474f82612df2565b67ffffffffffffffff811115614768576147676137e2565b5b6147728254613488565b61477d8282856146b9565b600060209050601f8311600181146147b0576000841561479e578287015190505b6147a8858261472a565b865550614810565b601f1984166147be866145a4565b60005b828110156147e6578489015182556001820191506020850194506020810190506147c1565b8683101561480357848901516147ff601f89168261470c565b8355505b6001600288020188555050505b505050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614874602683612dfd565b915061487f82614818565b604082019050919050565b600060208201905081810360008301526148a381614867565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006148e0601d83612dfd565b91506148eb826148aa565b602082019050919050565b6000602082019050818103600083015261490f816148d3565b9050919050565b600081519050919050565b600081905092915050565b600061493782614916565b6149418185614921565b9350614951818560208601612e0e565b80840191505092915050565b6000614969828461492c565b91508190509291505056fea264697066735822122042d70fdbb3349aa8e025bd9fb8736f8a38c53657fe9b295b419ebb078c2aaa1564736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106102135760003560e01c806375b238fc11610118578063a217fddf116100a0578063dd62ed3e1161006f578063dd62ed3e146107e2578063e9c265181461081f578063ea9e9a811461084a578063ef5d9ae814610875578063f78e633d146108b25761021a565b8063a217fddf14610712578063a4317ef41461073d578063a457c2d714610768578063a9059cbb146107a55761021a565b8063925bf5d4116100e7578063925bf5d41461065357806393a56edc1461067c57806395367f89146106a557806395d89b41146106d05780639975038c146106fb5761021a565b806375b238fc1461059957806379cc6790146105c4578063839006f2146105ed57806391d14854146106165761021a565b8063248a9ca31161019b578063485cc9551161016a578063485cc955146104b45780634e71d92d146104dd57806353055481146104f4578063692878621461053157806370a082311461055c5761021a565b8063248a9ca3146103e6578063313ce56714610423578063395093511461044e57806342966c681461048b5761021a565b8063095ea7b3116101e2578063095ea7b3146102db5780630da451881461031857806318160ddd1461035557806321e5383a1461038057806323b872dd146103a95761021a565b806301ffc9a71461021f57806303ee9f221461025c57806306fdde031461028757806308614362146102b25761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b5061024660048036038101906102419190612cf5565b6108f3565b6040516102539190612d3d565b60405180910390f35b34801561026857600080fd5b50610271610998565b60405161027e9190612dd7565b60405180910390f35b34801561029357600080fd5b5061029c6109be565b6040516102a99190612e8b565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612eeb565b610a50565b005b3480156102e757600080fd5b5061030260048036038101906102fd9190612f4e565b610bec565b60405161030f9190612d3d565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a9190612eeb565b610c0f565b60405161034c9190612f9d565b60405180910390f35b34801561036157600080fd5b5061036a610e15565b6040516103779190612f9d565b60405180910390f35b34801561038c57600080fd5b506103a760048036038101906103a29190612f4e565b610e1f565b005b3480156103b557600080fd5b506103d060048036038101906103cb9190612fb8565b610e7c565b6040516103dd9190612d3d565b60405180910390f35b3480156103f257600080fd5b5061040d60048036038101906104089190613041565b610eab565b60405161041a919061307d565b60405180910390f35b34801561042f57600080fd5b50610438610f50565b60405161044591906130b4565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190612f4e565b610f59565b6040516104829190612d3d565b60405180910390f35b34801561049757600080fd5b506104b260048036038101906104ad91906130cf565b610f90565b005b3480156104c057600080fd5b506104db60048036038101906104d6919061313a565b610fa4565b005b3480156104e957600080fd5b506104f26112ac565b005b34801561050057600080fd5b5061051b60048036038101906105169190612eeb565b6113ea565b6040516105289190612f9d565b60405180910390f35b34801561053d57600080fd5b50610546611449565b604051610553919061319b565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e9190612eeb565b61146f565b6040516105909190612f9d565b60405180910390f35b3480156105a557600080fd5b506105ae6114b8565b6040516105bb919061307d565b60405180910390f35b3480156105d057600080fd5b506105eb60048036038101906105e69190612f4e565b6114dc565b005b3480156105f957600080fd5b50610614600480360381019061060f91906131b6565b6114fc565b005b34801561062257600080fd5b5061063d600480360381019061063891906131e3565b611706565b60405161064a9190612d3d565b60405180910390f35b34801561065f57600080fd5b5061067a6004803603810190610675919061325f565b6117ae565b005b34801561068857600080fd5b506106a3600480360381019061069e919061328c565b6118f1565b005b3480156106b157600080fd5b506106ba61197f565b6040516106c7919061307d565b60405180910390f35b3480156106dc57600080fd5b506106e56119a3565b6040516106f29190612e8b565b60405180910390f35b34801561070757600080fd5b50610710611a35565b005b34801561071e57600080fd5b50610727611a97565b604051610734919061307d565b60405180910390f35b34801561074957600080fd5b50610752611a9e565b60405161075f9190613328565b60405180910390f35b34801561077457600080fd5b5061078f600480360381019061078a9190612f4e565b611ab4565b60405161079c9190612d3d565b60405180910390f35b3480156107b157600080fd5b506107cc60048036038101906107c79190612f4e565b611b2b565b6040516107d99190612d3d565b60405180910390f35b3480156107ee57600080fd5b5061080960048036038101906108049190613343565b611b68565b6040516108169190612f9d565b60405180910390f35b34801561082b57600080fd5b50610834611bef565b604051610841919061307d565b60405180910390f35b34801561085657600080fd5b5061085f611bf6565b60405161086c9190613328565b60405180910390f35b34801561088157600080fd5b5061089c60048036038101906108979190612eeb565b611c0c565b6040516108a99190612f9d565b60405180910390f35b3480156108be57600080fd5b506108d960048036038101906108d49190612eeb565b611c58565b6040516108ea959493929190613383565b60405180910390f35b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161095091906133e5565b602060405180830381865afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610991919061342c565b9050919050565b609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060603680546109cd90613488565b80601f01602080910402602001604051908101604052809291908181526020018280546109f990613488565b8015610a465780601f10610a1b57610100808354040283529160200191610a46565b820191906000526020600020905b815481529060010190602001808311610a2957829003601f168201915b5050505050905090565b60011515610a616000801b83611706565b151514610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90613505565b60405180910390fd5b6000610aae3361146f565b905060008111610af3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aea90613571565b60405180910390fd5b8067ffffffffffffffff1660ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b4b91906135c0565b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610b9b3382611c8e565b610be8828260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b5050565b600080610bf7611d22565b9050610c04818585611d2a565b600191505092915050565b60008060ca60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600042905060c960189054906101000a900463ffffffff1663ffffffff16811015610cc057600092505050610e10565b6000670de0b6b3a76400008360600151610cd9876113ea565b610ce39190613616565b610ced919061369f565b9050826020015160c960189054906101000a900463ffffffff1663ffffffff16610d1791906135c0565b8210610dfa5781836040015160c960189054906101000a900463ffffffff1663ffffffff16610d4691906135c0565b1015610d5c57610d55856113ea565b9050610df9565b6000610d67866113ea565b90506000846020015160c960189054906101000a900463ffffffff1663ffffffff16610d9391906135c0565b84610d9e91906136d0565b9050600085602001518660400151610db691906136d0565b905060008660800151876080015184610dcf919061369f565b610dd99190613616565b9050818185610de89190613616565b610df2919061369f565b9450505050505b5b826000015181610e0a91906136d0565b93505050505b919050565b6000603554905090565b610e6e33308360c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611ef3909392919063ffffffff16565b610e788282611f7c565b5050565b600080610e87611d22565b9050610e948582856120dc565b610e9f858585612168565b60019150509392505050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b8152600401610f08919061307d565b602060405180830381865afa158015610f25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f499190613719565b9050919050565b60006012905090565b600080610f64611d22565b9050610f85818585610f768589611b68565b610f8091906135c0565b611d2a565b600191505092915050565b610fa1610f9b611d22565b82611c8e565b50565b60008060019054906101000a900460ff16159050808015610fd55750600160008054906101000a900460ff1660ff16105b806110025750610fe4306123ea565b1580156110015750600160008054906101000a900460ff1660ff16145b5b611041576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611038906137b8565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561107e576001600060016101000a81548160ff0219169083151502179055505b6110878361240d565b6111b58273ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa1580156110d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110fe91906138fe565b60405160200161110e91906139a9565b6040516020818303038152906040528373ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611168573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061119191906138fe565b6040516020016111a191906139f5565b6040516020818303038152906040526124a0565b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550636477df8060c960146101000a81548163ffffffff021916908363ffffffff16021790555060c960149054906101000a900463ffffffff1660c960186101000a81548163ffffffff021916908363ffffffff16021790555080156112a75760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161129e9190613a56565b60405180910390a15b505050565b60006112b733610c0f565b9050600081116112fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f390613abd565b60405180910390fd5b8060ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461134a91906135c0565b60ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555061139a3382611c8e565b6113e7338260c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b50565b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546114388361146f565b61144291906135c0565b9050919050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6114ee826114e8611d22565b836120dc565b6114f88282611c8e565b5050565b6000801b61150a8133611706565b61154d5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611544929190613aec565b60405180910390fd5b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d490613b61565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361165d573373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611657573d6000803e3d6000fd5b50611702565b611701338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161169a9190613b81565b602060405180830381865afa1580156116b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116db9190613bb1565b8473ffffffffffffffffffffffffffffffffffffffff16611c9c9092919063ffffffff16565b5b5050565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401611765929190613aec565b602060405180830381865afa158015611782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a6919061342c565b905092915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117d98133611706565b61181c5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611813929190613aec565b60405180910390fd5b8163ffffffff164263ffffffff16111561186b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186290613c50565b60405180910390fd5b60c960149054906101000a900463ffffffff1663ffffffff168263ffffffff1611156118cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c390613ce2565b60405180910390fd5b8160c960186101000a81548163ffffffff021916908363ffffffff1602179055505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561191c8133611706565b61195f5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611956929190613aec565b60405180910390fd5b61196c87868686866124fd565b6119768787610e1f565b50505050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b6060603780546119b290613488565b80601f01602080910402602001604051908101604052809291908181526020018280546119de90613488565b8015611a2b5780601f10611a0057610100808354040283529160200191611a2b565b820191906000526020600020905b815481529060010190602001808311611a0e57829003601f168201915b5050505050905090565b6000611a403361146f565b9050611a4c33826127da565b600060ca60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b6000801b81565b60c960189054906101000a900463ffffffff1681565b600080611abf611d22565b90506000611acd8286611b68565b905083811015611b12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0990613d74565b60405180910390fd5b611b1f8286868403611d2a565b60019250505092915050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5f90613e06565b60405180910390fd5b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000801b81565b60c960149054906101000a900463ffffffff1681565b600060ca60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60ca6020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b611c9882826127da565b5050565b611d1d8363a9059cbb60e01b8484604051602401611cbb929190613e26565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506129b2565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9090613ec1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611e08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dff90613f53565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611ee69190612f9d565b60405180910390a3505050565b611f76846323b872dd60e01b858585604051602401611f1493929190613f73565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506129b2565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe290613ff6565b60405180910390fd5b611ff760008383612a79565b806035600082825461200991906135c0565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461205f91906135c0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120c49190612f9d565b60405180910390a36120d860008383612a7e565b5050565b60006120e88484611b68565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146121625781811015612154576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214b90614062565b60405180910390fd5b6121618484848403611d2a565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036121d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ce906140f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223d90614186565b60405180910390fd5b612251838383612a79565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156122d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cf90614218565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461236d91906135c0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516123d19190612f9d565b60405180910390a36123e4848484612a7e565b50505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661245c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612453906142aa565b60405180910390fd5b80609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff166124ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e6906142aa565b60405180910390fd5b6124f98282612a83565b5050565b83831115612540576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125379061433c565b60405180910390fd5b670de0b6b3a764000082111561258b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612582906143ce565b60405180910390fd5b8360ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154101561261d578360ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b8260ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156126af578260ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b8160ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301541115612741578160ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b8060ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015410156127d3578060ca60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612849576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284090614460565b60405180910390fd5b61285582600083612a79565b6000603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156128dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d3906144f2565b60405180910390fd5b818103603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816035600082825461293491906136d0565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516129999190612f9d565b60405180910390a36129ad83600084612a7e565b505050565b6000612a14826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612af69092919063ffffffff16565b9050600081511115612a745780806020019051810190612a34919061342c565b612a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a6a90614584565b60405180910390fd5b5b505050565b505050565b505050565b600060019054906101000a900460ff16612ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac9906142aa565b60405180910390fd5b8160369081612ae19190614746565b508060379081612af19190614746565b505050565b6060612b058484600085612b0e565b90509392505050565b606082471015612b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4a9061488a565b60405180910390fd5b612b5c856123ea565b612b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b92906148f6565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612bc4919061495d565b60006040518083038185875af1925050503d8060008114612c01576040519150601f19603f3d011682016040523d82523d6000602084013e612c06565b606091505b5091509150612c16828286612c22565b92505050949350505050565b60608315612c3257829050612c82565b600083511115612c455782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c799190612e8b565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612cd281612c9d565b8114612cdd57600080fd5b50565b600081359050612cef81612cc9565b92915050565b600060208284031215612d0b57612d0a612c93565b5b6000612d1984828501612ce0565b91505092915050565b60008115159050919050565b612d3781612d22565b82525050565b6000602082019050612d526000830184612d2e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612d9d612d98612d9384612d58565b612d78565b612d58565b9050919050565b6000612daf82612d82565b9050919050565b6000612dc182612da4565b9050919050565b612dd181612db6565b82525050565b6000602082019050612dec6000830184612dc8565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e2c578082015181840152602081019050612e11565b83811115612e3b576000848401525b50505050565b6000601f19601f8301169050919050565b6000612e5d82612df2565b612e678185612dfd565b9350612e77818560208601612e0e565b612e8081612e41565b840191505092915050565b60006020820190508181036000830152612ea58184612e52565b905092915050565b6000612eb882612d58565b9050919050565b612ec881612ead565b8114612ed357600080fd5b50565b600081359050612ee581612ebf565b92915050565b600060208284031215612f0157612f00612c93565b5b6000612f0f84828501612ed6565b91505092915050565b6000819050919050565b612f2b81612f18565b8114612f3657600080fd5b50565b600081359050612f4881612f22565b92915050565b60008060408385031215612f6557612f64612c93565b5b6000612f7385828601612ed6565b9250506020612f8485828601612f39565b9150509250929050565b612f9781612f18565b82525050565b6000602082019050612fb26000830184612f8e565b92915050565b600080600060608486031215612fd157612fd0612c93565b5b6000612fdf86828701612ed6565b9350506020612ff086828701612ed6565b925050604061300186828701612f39565b9150509250925092565b6000819050919050565b61301e8161300b565b811461302957600080fd5b50565b60008135905061303b81613015565b92915050565b60006020828403121561305757613056612c93565b5b60006130658482850161302c565b91505092915050565b6130778161300b565b82525050565b6000602082019050613092600083018461306e565b92915050565b600060ff82169050919050565b6130ae81613098565b82525050565b60006020820190506130c960008301846130a5565b92915050565b6000602082840312156130e5576130e4612c93565b5b60006130f384828501612f39565b91505092915050565b600061310782612ead565b9050919050565b613117816130fc565b811461312257600080fd5b50565b6000813590506131348161310e565b92915050565b6000806040838503121561315157613150612c93565b5b600061315f85828601612ed6565b925050602061317085828601613125565b9150509250929050565b600061318582612da4565b9050919050565b6131958161317a565b82525050565b60006020820190506131b0600083018461318c565b92915050565b6000602082840312156131cc576131cb612c93565b5b60006131da84828501613125565b91505092915050565b600080604083850312156131fa576131f9612c93565b5b60006132088582860161302c565b925050602061321985828601612ed6565b9150509250929050565b600063ffffffff82169050919050565b61323c81613223565b811461324757600080fd5b50565b60008135905061325981613233565b92915050565b60006020828403121561327557613274612c93565b5b60006132838482850161324a565b91505092915050565b60008060008060008060c087890312156132a9576132a8612c93565b5b60006132b789828a01612ed6565b96505060206132c889828a01612f39565b95505060406132d989828a01612f39565b94505060606132ea89828a01612f39565b93505060806132fb89828a01612f39565b92505060a061330c89828a01612f39565b9150509295509295509295565b61332281613223565b82525050565b600060208201905061333d6000830184613319565b92915050565b6000806040838503121561335a57613359612c93565b5b600061336885828601612ed6565b925050602061337985828601612ed6565b9150509250929050565b600060a0820190506133986000830188612f8e565b6133a56020830187612f8e565b6133b26040830186612f8e565b6133bf6060830185612f8e565b6133cc6080830184612f8e565b9695505050505050565b6133df81612c9d565b82525050565b60006020820190506133fa60008301846133d6565b92915050565b61340981612d22565b811461341457600080fd5b50565b60008151905061342681613400565b92915050565b60006020828403121561344257613441612c93565b5b600061345084828501613417565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806134a057607f821691505b6020821081036134b3576134b2613459565b5b50919050565b7f696e76616c69642044414f206164647265737300000000000000000000000000600082015250565b60006134ef601383612dfd565b91506134fa826134b9565b602082019050919050565b6000602082019050818103600083015261351e816134e2565b9050919050565b7f6e6f7468696e6720746f20646f6e617465000000000000000000000000000000600082015250565b600061355b601183612dfd565b915061356682613525565b602082019050919050565b6000602082019050818103600083015261358a8161354e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135cb82612f18565b91506135d683612f18565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561360b5761360a613591565b5b828201905092915050565b600061362182612f18565b915061362c83612f18565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561366557613664613591565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006136aa82612f18565b91506136b583612f18565b9250826136c5576136c4613670565b5b828204905092915050565b60006136db82612f18565b91506136e683612f18565b9250828210156136f9576136f8613591565b5b828203905092915050565b60008151905061371381613015565b92915050565b60006020828403121561372f5761372e612c93565b5b600061373d84828501613704565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006137a2602e83612dfd565b91506137ad82613746565b604082019050919050565b600060208201905081810360008301526137d181613795565b9050919050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61381a82612e41565b810181811067ffffffffffffffff82111715613839576138386137e2565b5b80604052505050565b600061384c612c89565b90506138588282613811565b919050565b600067ffffffffffffffff821115613878576138776137e2565b5b61388182612e41565b9050602081019050919050565b60006138a161389c8461385d565b613842565b9050828152602081018484840111156138bd576138bc6137dd565b5b6138c8848285612e0e565b509392505050565b600082601f8301126138e5576138e46137d8565b5b81516138f584826020860161388e565b91505092915050565b60006020828403121561391457613913612c93565b5b600082015167ffffffffffffffff81111561393257613931612c98565b5b61393e848285016138d0565b91505092915050565b7f76657374656420657363726f7720000000000000000000000000000000000000815250565b600081905092915050565b600061398382612df2565b61398d818561396d565b935061399d818560208601612e0e565b80840191505092915050565b60006139b482613947565b600e820191506139c48284613978565b915081905092915050565b7f7665000000000000000000000000000000000000000000000000000000000000815250565b6000613a00826139cf565b600282019150613a108284613978565b915081905092915050565b6000819050919050565b6000613a40613a3b613a3684613a1b565b612d78565b613098565b9050919050565b613a5081613a25565b82525050565b6000602082019050613a6b6000830184613a47565b92915050565b7f43616e277420636c61696d203020746f6b656e73000000000000000000000000600082015250565b6000613aa7601483612dfd565b9150613ab282613a71565b602082019050919050565b60006020820190508181036000830152613ad681613a9a565b9050919050565b613ae681612ead565b82525050565b6000604082019050613b01600083018561306e565b613b0e6020830184613add565b9392505050565b7f4e6f20616c6c6f77656420746f20726573637565207468697320746f6b656e00600082015250565b6000613b4b601f83612dfd565b9150613b5682613b15565b602082019050919050565b60006020820190508181036000830152613b7a81613b3e565b9050919050565b6000602082019050613b966000830184613add565b92915050565b600081519050613bab81612f22565b92915050565b600060208284031215613bc757613bc6612c93565b5b6000613bd584828501613b9c565b91505092915050565b7f766545524332303a2054474520646174652063616e277420626520696e20746860008201527f6520706173740000000000000000000000000000000000000000000000000000602082015250565b6000613c3a602683612dfd565b9150613c4582613bde565b604082019050919050565b60006020820190508181036000830152613c6981613c2d565b9050919050565b7f766545524332303a206e6577205447452064617465206973206265796f6e642060008201527f6c696d6974000000000000000000000000000000000000000000000000000000602082015250565b6000613ccc602583612dfd565b9150613cd782613c70565b604082019050919050565b60006020820190508181036000830152613cfb81613cbf565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613d5e602583612dfd565b9150613d6982613d02565b604082019050919050565b60006020820190508181036000830152613d8d81613d51565b9050919050565b7f6e6f7420706f737369626c6520746f207472616e73666572207665737465642060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000613df0602583612dfd565b9150613dfb82613d94565b604082019050919050565b60006020820190508181036000830152613e1f81613de3565b9050919050565b6000604082019050613e3b6000830185613add565b613e486020830184612f8e565b9392505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613eab602483612dfd565b9150613eb682613e4f565b604082019050919050565b60006020820190508181036000830152613eda81613e9e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f3d602283612dfd565b9150613f4882613ee1565b604082019050919050565b60006020820190508181036000830152613f6c81613f30565b9050919050565b6000606082019050613f886000830186613add565b613f956020830185613add565b613fa26040830184612f8e565b949350505050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613fe0601f83612dfd565b9150613feb82613faa565b602082019050919050565b6000602082019050818103600083015261400f81613fd3565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061404c601d83612dfd565b915061405782614016565b602082019050919050565b6000602082019050818103600083015261407b8161403f565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006140de602583612dfd565b91506140e982614082565b604082019050919050565b6000602082019050818103600083015261410d816140d1565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000614170602383612dfd565b915061417b82614114565b604082019050919050565b6000602082019050818103600083015261419f81614163565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614202602683612dfd565b915061420d826141a6565b604082019050919050565b60006020820190508181036000830152614231816141f5565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614294602b83612dfd565b915061429f82614238565b604082019050919050565b600060208201905081810360008301526142c381614287565b9050919050565b7f636c69666654696d652073686f756c64206265206c657373207468656e20766560008201527f7374696e6754696d650000000000000000000000000000000000000000000000602082015250565b6000614326602983612dfd565b9150614331826142ca565b604082019050919050565b6000602082019050818103600083015261435581614319565b9050919050565b7f746765556e6c6f636b526174696f2073686f756c64206265206c65737320746860008201527f616e203100000000000000000000000000000000000000000000000000000000602082015250565b60006143b8602483612dfd565b91506143c38261435c565b604082019050919050565b600060208201905081810360008301526143e7816143ab565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061444a602183612dfd565b9150614455826143ee565b604082019050919050565b600060208201905081810360008301526144798161443d565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006144dc602283612dfd565b91506144e782614480565b604082019050919050565b6000602082019050818103600083015261450b816144cf565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061456e602a83612dfd565b915061457982614512565b604082019050919050565b6000602082019050818103600083015261459d81614561565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026146067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826145c9565b61461086836145c9565b95508019841693508086168417925050509392505050565b600061464361463e61463984612f18565b612d78565b612f18565b9050919050565b6000819050919050565b61465d83614628565b6146716146698261464a565b8484546145d6565b825550505050565b600090565b614686614679565b614691818484614654565b505050565b5b818110156146b5576146aa60008261467e565b600181019050614697565b5050565b601f8211156146fa576146cb816145a4565b6146d4846145b9565b810160208510156146e3578190505b6146f76146ef856145b9565b830182614696565b50505b505050565b600082821c905092915050565b600061471d600019846008026146ff565b1980831691505092915050565b6000614736838361470c565b9150826002028217905092915050565b61474f82612df2565b67ffffffffffffffff811115614768576147676137e2565b5b6147728254613488565b61477d8282856146b9565b600060209050601f8311600181146147b0576000841561479e578287015190505b6147a8858261472a565b865550614810565b601f1984166147be866145a4565b60005b828110156147e6578489015182556001820191506020850194506020810190506147c1565b8683101561480357848901516147ff601f89168261470c565b8355505b6001600288020188555050505b505050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614874602683612dfd565b915061487f82614818565b604082019050919050565b600060208201905081810360008301526148a381614867565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006148e0601d83612dfd565b91506148eb826148aa565b602082019050919050565b6000602082019050818103600083015261490f816148d3565b9050919050565b600081519050919050565b600081905092915050565b600061493782614916565b6149418185614921565b9350614951818560208601612e0e565b80840191505092915050565b6000614969828461492c565b91508190509291505056fea264697066735822122042d70fdbb3349aa8e025bd9fb8736f8a38c53657fe9b295b419ebb078c2aaa1564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBalance(address,uint256)": {
        "params": {
          "account": "Beneficiary of the vesting account.",
          "amount": "Amount of token to be send to user under vesting, which will be deducted from msg.sender."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "availableToClaim(address)": {
        "returns": {
          "_0": "Returns amount of tokens the users can withdraw right now."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "account": "Beneficiary of the vesting account.",
          "amount": "Amount of tokens to be send, which will be deducted from msg.sender.",
          "cliffSeconds": "Amount of seconds while tokens would be completely locked.",
          "tgeUnlockRatio1e18": "ratio/1e18 ⊂ [0..1] that indicates how many tokens are going to be unlocked during TGE",
          "vestingFrequencySeconds": "how frequently token are going to be unlocked after the cliff.",
          "vestingSeconds": "Amount of seconds when linear vesting would be over. Starts from cliff."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBalance(address,uint256)": {
        "notice": "Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!"
      },
      "availableToClaim(address)": {
        "notice": "Checks amount of vested tokens minus already withdrawn."
      },
      "claim()": {
        "notice": "User can claim their vested tokens."
      },
      "donateTokens(address)": {
        "notice": "User can donate tokens under vesting to DAO or other admin contract as us treasury."
      },
      "lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Creates an account with time-vesting for the user and withdraws these tokens from msg.sender."
      },
      "rescue(address)": {
        "notice": "The DAO can take away tokens accidentally sent to the contract."
      },
      "totalClaimed(address)": {
        "notice": "Total amount of token user had claimed."
      },
      "totalDeposited(address)": {
        "notice": "Total amount of token was deposited under vesting on behalf of the user."
      },
      "updateTgeTimestamp(uint32)": {
        "notice": "owner of the contract can set up TGE date within set limits."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 497,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 500,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4310,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 660,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 666,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 668,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 670,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 672,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1251,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1393,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13374,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ISuAccessControl)14743"
      },
      {
        "astId": 13461,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15171,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "LOCKED_TOKEN",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(ERC20Upgradeable)1252"
      },
      {
        "astId": 15173,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "TGE_MAX_TIMESTAMP",
        "offset": 20,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 15175,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "tgeTimestamp",
        "offset": 24,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 15191,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "vestingInfo",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_struct(VestingInfo)15186_storage)"
      },
      {
        "astId": 15810,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20Upgradeable)1252": {
        "encoding": "inplace",
        "label": "contract ERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)14743": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(VestingInfo)15186_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VeERC20.VestingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingInfo)15186_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VestingInfo)15186_storage": {
        "encoding": "inplace",
        "label": "struct VeERC20.VestingInfo",
        "members": [
          {
            "astId": 15177,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "amountAlreadyWithdrawn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15179,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "cliffSeconds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15181,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "vestingSeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15183,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "tgeUnlockRatio1e18",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15185,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "vestingFrequencySeconds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}