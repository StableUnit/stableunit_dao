{
  "address": "0xB2D2638705F88d25872a879eFe7f807bF610A4b7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_lockedToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMMUNITY_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LOCKED_TOKEN",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TGE_MAX_TIMESTAMP",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "availableToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAdmin",
          "type": "address"
        }
      ],
      "name": "donateTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeUnlockRatio1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingFrequencySeconds",
          "type": "uint256"
        }
      ],
      "name": "lockUnderVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tgeTimestamp",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newTgeTimestamp",
          "type": "uint32"
        }
      ],
      "name": "updateTgeTimestamp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountAlreadyWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tgeUnlockRatio1e18",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingFrequencySeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e6ca6dfc91ad2a5b30c2ff647e3d9b8fe1d8524dbde64485b3f07cb2a9378b7",
  "receipt": {
    "to": null,
    "from": "0xf0629Ac74076EeAc7b502ce19398c2E47bb6B692",
    "contractAddress": "0xB2D2638705F88d25872a879eFe7f807bF610A4b7",
    "transactionIndex": 85,
    "gasUsed": "3778414",
    "logsBloom": "0x
    "blockHash": "0x5a3aceb1da94434a603931be59a8e9a2386d0608a203860780c142782843a25c",
    "transactionHash": "0x0e6ca6dfc91ad2a5b30c2ff647e3d9b8fe1d8524dbde64485b3f07cb2a9378b7",
    "logs": [],
    "blockNumber": 7867464,
    "cumulativeGasUsed": "14603174",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x657c358D196d4009CC81b722a489DeaF52214119",
    "0x4B1F15600f21B8863C8642608559144986212C43"
  ],
  "numDeployments": 1,
  "solcInputHash": "d20c42d9e30e37c98bc070f359fc13a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_lockedToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMMUNITY_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOCKED_TOKEN\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TGE_MAX_TIMESTAMP\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"availableToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAdmin\",\"type\":\"address\"}],\"name\":\"donateTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeUnlockRatio1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingFrequencySeconds\",\"type\":\"uint256\"}],\"name\":\"lockUnderVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tgeTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newTgeTimestamp\",\"type\":\"uint32\"}],\"name\":\"updateTgeTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAlreadyWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tgeUnlockRatio1e18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingFrequencySeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addBalance(address,uint256)\":{\"params\":{\"account\":\"Beneficiary of the vesting account.\",\"amount\":\"Amount of token to be send to user under vesting, which will be deducted from msg.sender.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"availableToClaim(address)\":{\"returns\":{\"_0\":\"Returns amount of tokens the users can withdraw right now.\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"account\":\"Beneficiary of the vesting account.\",\"amount\":\"Amount of tokens to be send, which will be deducted from msg.sender.\",\"cliffSeconds\":\"Amount of seconds while tokens would be completely locked.\",\"tgeUnlockRatio1e18\":\"ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\",\"vestingFrequencySeconds\":\"how frequently token are going to be unlocked after the cliff.\",\"vestingSeconds\":\"Amount of seconds when linear vesting would be over. Starts from cliff.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addBalance(address,uint256)\":{\"notice\":\"Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!\"},\"availableToClaim(address)\":{\"notice\":\"Checks amount of vested tokens minus already withdrawn.\"},\"claim()\":{\"notice\":\"User can claim their vested tokens.\"},\"donateTokens(address)\":{\"notice\":\"User can donate tokens under vesting to DAO or other admin contract as us treasury.\"},\"lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\"},\"rescue(address)\":{\"notice\":\"The owner of the contact can take away tokens accidentally sent to the contract.\"},\"totalClaimed(address)\":{\"notice\":\"Total amount of token user had claimed.\"},\"totalDeposited(address)\":{\"notice\":\"Total amount of token was deposited under vesting on behalf of the user.\"},\"updateTgeTimestamp(uint32)\":{\"notice\":\"owner of the contract can set up TGE date within set limits.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vested-escrow/VeERC20.sol\":\"VeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf98cb1651a90d20ef77d8c1dd10d5fce4954e747603e5672a8292bd4368120dd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/access-control/SuAccessControlAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity >=0.7.6;\\n\\nimport \\\"../interfaces/ISuAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated\\n */\\nabstract contract SuAccessControlAuthenticated is ISuAccessControl, Context {\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n    bytes32 public constant DAO_ROLE = 0x00;\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant COMMUNITY_ADMIN_ROLE = keccak256(\\\"COMMUNITY_ADMIN_ROLE\\\");\\n\\n    /// @dev the address of SuAccessControlSingleton - it should be one for all contract that inherits SuAuthenticated\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyRoleError(bytes32 role, address msgSender);\\n\\n    /// @dev should be passed in constructor\\n    constructor(address _accessControlSingleton) {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n    }\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) revert OnlyRoleError(role, msg.sender);\\n        _;\\n    }\\n\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.hasRole(role, account);\\n    }\\n\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return ACCESS_CONTROL_SINGLETON.getRoleAdmin(role);\\n    }\\n\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x319cc40585ce6e5d4df540ccefd3de664d96b8b1aa9fc9cdb2ed86951b924799\",\"license\":\"BSL 1.1\"},\"contracts/interfaces/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6;\\n\\n/**\\n * @dev External interface of oz AccessControl and ERC165 detection, need to help to resolve circle dependency.\\n */\\ninterface ISuAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8319c248f002af92f0d8f81748fb116602fa48eb08ef372de28ba241600a4ebc\",\"license\":\"MIT\"},\"contracts/interfaces/IveERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IveERC20 {\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3fce7c37422c1217a42572785409cd6ffc95c2c515fe0d777f111c4816c67ac1\",\"license\":\"UNLICENSED\"},\"contracts/vested-escrow/VeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n\\n*/\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"../access-control/SuAccessControlAuthenticated.sol\\\";\\nimport \\\"../interfaces/IveERC20.sol\\\";\\n\\n\\n/*\\n * @title The contact enables the storage of erc20 tokens under the linear time-vesting with the cliff time-lock.\\n * @notice During cliff period all tokens are locked so the user can't claim it.\\n * After the cliff period is over token gets gradually unlock every second until the vesting is over.\\n *\\n * For example, if cliff is 3 months and vesting is 12 months,\\n *      during the first 3 mouths user can't claim anything\\n *      after 4 months (i.e. 1 month after the cliff) user can claim 1/9 of all tokens\\n *      after 6 months user can claim 3/9 of all tokens etc.\\n * It's possible to claim tokens by parts during vesting, or claim all at once when vesting if over.\\n *\\n * To make balance visible in the erc20 wallets, the contact \\\"looks like\\\" erc20 token by implementing its interface\\n * however all non-view methods such as transfer or approve aren't active and will be reverted.\\n*/\\ncontract VeERC20 is ERC20Burnable, SuAccessControlAuthenticated, IveERC20 {\\n    using SafeERC20 for ERC20;\\n\\n    ERC20 public LOCKED_TOKEN;\\n    uint32 public immutable TGE_MAX_TIMESTAMP = 1685577600; // Unix Timestamp\\t1685577600 = GMT+0 Thu Jun 01 2023 00:00:00 GMT+0000;\\n    uint32 public tgeTimestamp;\\n\\n    struct VestingInfo {\\n        // we keep all data in one 256 bits slot to safe on gas usage\\n        uint256 amountAlreadyWithdrawn;\\n        uint256 cliffSeconds;\\n        uint256 vestingSeconds;\\n        uint256 tgeUnlockRatio1e18; // [0..1], uint64 is enough because log2(1e18) ~= 60\\n        uint256 vestingFrequencySeconds;\\n    }\\n    mapping(address => VestingInfo) public vestingInfo;\\n\\n    constructor(address _accessControlSingleton, ERC20 _lockedToken)\\n        SuAccessControlAuthenticated(_accessControlSingleton)\\n        ERC20(string.concat(\\\"vested escrow \\\", _lockedToken.name()), string.concat(\\\"ve\\\", _lockedToken.symbol()))\\n    {\\n        LOCKED_TOKEN = _lockedToken;\\n        tgeTimestamp = TGE_MAX_TIMESTAMP;\\n    }\\n\\n    /**\\n    * @notice owner of the contract can set up TGE date within set limits.\\n    */\\n    function updateTgeTimestamp(uint32 newTgeTimestamp) external onlyRole(DAO_ROLE) {\\n        require(uint32(block.timestamp) <= newTgeTimestamp, \\\"veERC20: TGE date can't be in the past\\\");\\n        require(newTgeTimestamp <= TGE_MAX_TIMESTAMP, \\\"veERC20: new TGE date is beyond limit\\\");\\n        tgeTimestamp = newTgeTimestamp;\\n    }\\n\\n    /**\\n    * @notice Total amount of token was deposited under vesting on behalf of the user.\\n    */\\n    function totalDeposited(address user) public view returns (uint256) {\\n        return IERC20(this).balanceOf(user);\\n    }\\n\\n    /**\\n    * @notice Total amount of token user had claimed.\\n    */\\n    function totalClaimed(address user) public view returns (uint256) {\\n        return vestingInfo[user].amountAlreadyWithdrawn;\\n    }\\n\\n    /**\\n    * @notice Creates an account with time-vesting for the user and withdraws these tokens from msg.sender.\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of tokens to be send, which will be deducted from msg.sender.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function lockUnderVesting(\\n        address account,\\n        uint256 amount,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) external onlyRole(ADMIN_ROLE) override\\n    {\\n        _mergeVesting(account, vestingSeconds, cliffSeconds, tgeUnlockRatio1e18, vestingFrequencySeconds);\\n        addBalance(account, amount);\\n    }\\n\\n    /**\\n    * @notice updates lock settings for the account and chose longest among existing one and passed arguments\\n    * @param account Beneficiary of the vesting account.\\n    * @param vestingSeconds Amount of seconds when linear vesting would be over. Starts from cliff.\\n    * @param cliffSeconds Amount of seconds while tokens would be completely locked.\\n    * @param tgeUnlockRatio1e18 ratio/1e18 \\u2282 [0..1] that indicates how many tokens are going to be unlocked during TGE\\n    * @param vestingFrequencySeconds how frequently token are going to be unlocked after the cliff.\\n    */\\n    function _mergeVesting(\\n        address account,\\n        uint256 vestingSeconds,\\n        uint256 cliffSeconds,\\n        uint256 tgeUnlockRatio1e18,\\n        uint256 vestingFrequencySeconds\\n    ) internal {\\n        require(cliffSeconds <= vestingSeconds, \\\"cliffTime should be less then vestingTime\\\");\\n        require(tgeUnlockRatio1e18 <= 1e18, \\\"tgeUnlockRatio should be less than 1\\\");\\n\\n        if (vestingInfo[account].vestingSeconds < vestingSeconds) {\\n            vestingInfo[account].vestingSeconds = vestingSeconds;\\n        }\\n\\n        if (vestingInfo[account].cliffSeconds < cliffSeconds) {\\n            vestingInfo[account].cliffSeconds = cliffSeconds;\\n        }\\n\\n        if (vestingInfo[account].tgeUnlockRatio1e18 > tgeUnlockRatio1e18) {\\n            vestingInfo[account].tgeUnlockRatio1e18 = tgeUnlockRatio1e18;\\n        }\\n\\n        if (vestingInfo[account].vestingFrequencySeconds < vestingFrequencySeconds) {\\n            vestingInfo[account].vestingFrequencySeconds = vestingFrequencySeconds;\\n        }\\n    }\\n\\n    /**\\n    * @notice Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!\\n    * @param account Beneficiary of the vesting account.\\n    * @param amount Amount of token to be send to user under vesting, which will be deducted from msg.sender.\\n    */\\n    function addBalance(address account, uint256 amount) public {\\n        LOCKED_TOKEN.safeTransferFrom(msg.sender, address(this), amount);\\n        // mint more veERC20 tokens for the account\\n        _mint(account, amount);\\n    }\\n\\n    /**\\n     * @notice Checks amount of vested tokens minus already withdrawn.\\n     * @return Returns amount of tokens the users can withdraw right now.\\n     */\\n    function availableToClaim(address user) public view returns (uint256) {\\n        VestingInfo memory info = vestingInfo[user];\\n        uint256 t = block.timestamp;\\n        // if the time is before the TGE - there's nothing vested yet\\n        if (t < tgeTimestamp) return 0;\\n\\n        // if it's past TGE, there's at lest tgeUnlockRatio is vested\\n         uint256 vested = super.balanceOf(user) * info.tgeUnlockRatio1e18/1e18;\\n\\n        // if the time is before the cliff\\n        if (t < (tgeTimestamp + info.cliffSeconds)) {\\n            // there's nothing additional vested yet\\n        } else {\\n            // if after the cliff\\n\\n            // if it's beyond vesting time\\n            if ((tgeTimestamp + info.vestingSeconds) < t) {\\n                // everything is vested\\n                vested = super.balanceOf(user);\\n            } else {\\n                // otherwise the amount is proportional to the amount after the cliff before end of vesting\\n                uint256 x = super.balanceOf(user);\\n                // how much second passed after cliff\\n                uint256 y = (t - (tgeTimestamp + info.cliffSeconds));\\n                // how much seconds from cliff to end of vesting\\n                uint256 z = (uint256(info.vestingSeconds) - uint256(info.cliffSeconds));\\n                // y2 := max y2 : vestingFrequencySeconds*N <= y\\n                uint256 y2 = y / info.vestingFrequencySeconds * info.vestingFrequencySeconds;\\n\\n                vested = x * y2 / z;\\n            }\\n        }\\n\\n        // the answer is how much is vested in total minute how much already withdrawn\\n        return vested - uint256(info.amountAlreadyWithdrawn);\\n    }\\n\\n    /**\\n     * @notice User can claim their vested tokens.\\n     */\\n    function claim() external {\\n        uint256 claimAmount = availableToClaim(msg.sender);\\n        require(claimAmount > 0, \\\"Can't claim 0 tokens\\\");\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = vestingInfo[msg.sender].amountAlreadyWithdrawn + claimAmount;\\n        LOCKED_TOKEN.safeTransfer(msg.sender, claimAmount);\\n    }\\n\\n    /**\\n     * @notice User can donate tokens under vesting to DAO or other admin contract as us treasury.\\n     */\\n    function donateTokens(address toAdmin) external {\\n        require(hasRole(ADMIN_ROLE, toAdmin) == true, \\\"invalid admin address\\\");\\n        uint256 balance = balanceOf(msg.sender);\\n        require(balance > 0, \\\"nothing to donate\\\");\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = vestingInfo[msg.sender].amountAlreadyWithdrawn + uint64(balance);\\n        LOCKED_TOKEN.safeTransfer(toAdmin, balance);\\n    }\\n\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return super.balanceOf(account) - vestingInfo[account].amountAlreadyWithdrawn;\\n    }\\n\\n    /**\\n    * @notice The owner of the contact can take away tokens accidentally sent to the contract.\\n    */\\n    function rescue(ERC20 token) external onlyRole(DAO_ROLE) {\\n        require(token != LOCKED_TOKEN, \\\"No allowed to rescue this token\\\");\\n        // allow to rescue ether\\n        if (address(token) == address(0)) {\\n            payable(msg.sender).transfer(address(this).balance);\\n        } else {\\n            token.safeTransfer(address(msg.sender), token.balanceOf(address(this)));\\n        }\\n    }\\n    receive() external payable {}\\n\\n    function transfer(address, uint256) public virtual override returns (bool) {\\n        revert(\\\"not possible to transfer vested token\\\");\\n    }\\n\\n    function _burn(address account, uint256 amount)\\n    internal\\n    override\\n    {\\n        super._burn(account, amount);\\n    }\\n\\n    function burnAll() external {\\n        uint256 balance = super.balanceOf(msg.sender);\\n        super._burn(msg.sender, balance);\\n        vestingInfo[msg.sender].amountAlreadyWithdrawn = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc4480f3a5de612d1924338baf81161bd964b958b5eb6dc1b47ed90c08fe32b42\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102085760003560e01c806375b238fc11610118578063a217fddf116100a0578063dd62ed3e1161006f578063dd62ed3e146107ae578063e9c26518146107eb578063ea9e9a8114610816578063ef5d9ae814610841578063f78e633d1461087e5761020f565b8063a217fddf146106de578063a4317ef414610709578063a457c2d714610734578063a9059cbb146107715761020f565b8063925bf5d4116100e7578063925bf5d41461061f57806393a56edc1461064857806395367f891461067157806395d89b411461069c5780639975038c146106c75761020f565b806375b238fc1461056557806379cc679014610590578063839006f2146105b957806391d14854146105e25761020f565b806323b872dd1161019b57806342966c681161016a57806342966c68146104805780634e71d92d146104a957806353055481146104c057806369287862146104fd57806370a08231146105285761020f565b806323b872dd1461039e578063248a9ca3146103db578063313ce5671461041857806339509351146104435761020f565b8063095ea7b3116101d7578063095ea7b3146102d05780630da451881461030d57806318160ddd1461034a57806321e5383a146103755761020f565b806301ffc9a71461021457806303ee9f221461025157806306fdde031461027c57806308614362146102a75761020f565b3661020f57005b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190612a37565b6108bf565b6040516102489190612a7f565b60405180910390f35b34801561025d57600080fd5b50610266610964565b6040516102739190612b19565b60405180910390f35b34801561028857600080fd5b5061029161098a565b60405161029e9190612bcd565b60405180910390f35b3480156102b357600080fd5b506102ce60048036038101906102c99190612c2d565b610a1c565b005b3480156102dc57600080fd5b506102f760048036038101906102f29190612c90565b610bcb565b6040516103049190612a7f565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190612c2d565b610be9565b6040516103419190612cdf565b60405180910390f35b34801561035657600080fd5b5061035f610def565b60405161036c9190612cdf565b60405180910390f35b34801561038157600080fd5b5061039c60048036038101906103979190612c90565b610df9565b005b3480156103aa57600080fd5b506103c560048036038101906103c09190612cfa565b610e56565b6040516103d29190612a7f565b60405180910390f35b3480156103e757600080fd5b5061040260048036038101906103fd9190612d83565b610f4e565b60405161040f9190612dbf565b60405180910390f35b34801561042457600080fd5b5061042d610ff3565b60405161043a9190612df6565b60405180910390f35b34801561044f57600080fd5b5061046a60048036038101906104659190612c90565b610ffc565b6040516104779190612a7f565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a29190612e11565b6110a8565b005b3480156104b557600080fd5b506104be6110bc565b005b3480156104cc57600080fd5b506104e760048036038101906104e29190612c2d565b6111f0565b6040516104f49190612cdf565b60405180910390f35b34801561050957600080fd5b50610512611273565b60405161051f9190612e5f565b60405180910390f35b34801561053457600080fd5b5061054f600480360381019061054a9190612c2d565b611299565b60405161055c9190612cdf565b60405180910390f35b34801561057157600080fd5b5061057a6112f8565b6040516105879190612dbf565b60405180910390f35b34801561059c57600080fd5b506105b760048036038101906105b29190612c90565b61131c565b005b3480156105c557600080fd5b506105e060048036038101906105db9190612eb8565b611397565b005b3480156105ee57600080fd5b5061060960048036038101906106049190612ee5565b6115a1565b6040516106169190612a7f565b60405180910390f35b34801561062b57600080fd5b5061064660048036038101906106419190612f61565b611649565b005b34801561065457600080fd5b5061066f600480360381019061066a9190612f8e565b61177d565b005b34801561067d57600080fd5b5061068661180b565b6040516106939190612dbf565b60405180910390f35b3480156106a857600080fd5b506106b161182f565b6040516106be9190612bcd565b60405180910390f35b3480156106d357600080fd5b506106dc6118c1565b005b3480156106ea57600080fd5b506106f3611923565b6040516107009190612dbf565b60405180910390f35b34801561071557600080fd5b5061071e61192a565b60405161072b919061302a565b60405180910390f35b34801561074057600080fd5b5061075b60048036038101906107569190612c90565b611940565b6040516107689190612a7f565b60405180910390f35b34801561077d57600080fd5b5061079860048036038101906107939190612c90565b611a2b565b6040516107a59190612a7f565b60405180910390f35b3480156107ba57600080fd5b506107d560048036038101906107d09190613045565b611a68565b6040516107e29190612cdf565b60405180910390f35b3480156107f757600080fd5b50610800611aef565b60405161080d9190612dbf565b60405180910390f35b34801561082257600080fd5b5061082b611af6565b604051610838919061302a565b60405180910390f35b34801561084d57600080fd5b5061086860048036038101906108639190612c2d565b611b1a565b6040516108759190612cdf565b60405180910390f35b34801561088a57600080fd5b506108a560048036038101906108a09190612c2d565b611b66565b6040516108b6959493929190613085565b60405180910390f35b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166301ffc9a7836040518263ffffffff1660e01b815260040161091c91906130e7565b602060405180830381865afa158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d919061312e565b9050919050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600380546109999061318a565b80601f01602080910402602001604051908101604052809291908181526020018280546109c59061318a565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b5050505050905090565b60011515610a4a7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775836115a1565b151514610a8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8390613207565b60405180910390fd5b6000610a9733611299565b905060008111610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad390613273565b60405180910390fd5b8067ffffffffffffffff16600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610b3491906132c2565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610bc78282600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b9c9092919063ffffffff16565b5050565b6000610bdf610bd8611c22565b8484611c2a565b6001905092915050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000429050600660149054906101000a900463ffffffff1663ffffffff16811015610c9a57600092505050610dea565b6000670de0b6b3a76400008360600151610cb387611df3565b610cbd9190613318565b610cc791906133a1565b90508260200151600660149054906101000a900463ffffffff1663ffffffff16610cf191906132c2565b8210610dd457818360400151600660149054906101000a900463ffffffff1663ffffffff16610d2091906132c2565b1015610d3657610d2f85611df3565b9050610dd3565b6000610d4186611df3565b905060008460200151600660149054906101000a900463ffffffff1663ffffffff16610d6d91906132c2565b84610d7891906133d2565b9050600085602001518660400151610d9091906133d2565b905060008660800151876080015184610da991906133a1565b610db39190613318565b9050818185610dc29190613318565b610dcc91906133a1565b9450505050505b5b826000015181610de491906133d2565b93505050505b919050565b6000600254905090565b610e48333083600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611e3b909392919063ffffffff16565b610e528282611ec4565b5050565b6000610e63848484612023565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610eae611c22565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2590613478565b60405180910390fd5b610f4285610f3a611c22565b858403611c2a565b60019150509392505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663248a9ca3836040518263ffffffff1660e01b8152600401610fab9190612dbf565b602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec91906134ad565b9050919050565b60006012905090565b600061109e611009611c22565b848460016000611017611c22565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461109991906132c2565b611c2a565b6001905092915050565b6110b96110b3611c22565b826122a2565b50565b60006110c733610be9565b90506000811161110c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110390613526565b60405180910390fd5b80600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461115a91906132c2565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506111ed3382600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611b9c9092919063ffffffff16565b50565b60003073ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b815260040161122b9190613555565b602060405180830381865afa158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c9190613585565b9050919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546112e783611df3565b6112f191906133d2565b9050919050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b600061132f8361132a611c22565b611a68565b905081811015611374576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136b90613624565b60405180910390fd5b61138883611380611c22565b848403611c2a565b61139283836122a2565b505050565b6000801b6113a581336115a1565b6113e85780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016113df929190613644565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146f906136b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114f8573373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156114f2573d6000803e3d6000fd5b5061159d565b61159c338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115359190613555565b602060405180830381865afa158015611552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115769190613585565b8473ffffffffffffffffffffffffffffffffffffffff16611b9c9092919063ffffffff16565b5b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166391d1485484846040518363ffffffff1660e01b8152600401611600929190613644565b602060405180830381865afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611641919061312e565b905092915050565b6000801b61165781336115a1565b61169a5780336040517f37c2e343000000000000000000000000000000000000000000000000000000008152600401611691929190613644565b60405180910390fd5b8163ffffffff164263ffffffff1611156116e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116e09061374b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff161115611758576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174f906137dd565b60405180910390fd5b81600660146101000a81548163ffffffff021916908363ffffffff1602179055505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756117a881336115a1565b6117eb5780336040517f37c2e3430000000000000000000000000000000000000000000000000000000081526004016117e2929190613644565b60405180910390fd5b6117f887868686866122b0565b6118028787610df9565b50505050505050565b7f0a7cc066f24e107ff77c42c8a1bdaf1a5f775fa4a74e45530aaf9c866368f65381565b60606004805461183e9061318a565b80601f016020809104026020016040519081016040528092919081815260200182805461186a9061318a565b80156118b75780601f1061188c576101008083540402835291602001916118b7565b820191906000526020600020905b81548152906001019060200180831161189a57829003601f168201915b5050505050905090565b60006118cc33611df3565b90506118d8338261258d565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555050565b6000801b81565b600660149054906101000a900463ffffffff1681565b6000806001600061194f611c22565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a039061386f565b60405180910390fd5b611a20611a17611c22565b85858403611c2a565b600191505092915050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5f90613901565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000801b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b611c1d8363a9059cbb60e01b8484604051602401611bbb929190613921565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612763565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611c99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c90906139bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cff90613a4e565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611de69190612cdf565b60405180910390a3505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611ebe846323b872dd60e01b858585604051602401611e5c93929190613a6e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612763565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2a90613af1565b60405180910390fd5b611f3f6000838361282a565b8060026000828254611f5191906132c2565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fa691906132c2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161200b9190612cdf565b60405180910390a361201f6000838361282f565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612092576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208990613b83565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f890613c15565b60405180910390fd5b61210c83838361282a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015612192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218990613ca7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461222591906132c2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516122899190612cdf565b60405180910390a361229c84848461282f565b50505050565b6122ac828261258d565b5050565b838311156122f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ea90613d39565b60405180910390fd5b670de0b6b3a764000082111561233e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233590613dcb565b60405180910390fd5b83600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410156123d05783600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055505b82600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410156124625782600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b81600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411156124f45781600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055505b80600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015410156125865780600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055505b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036125fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f390613e5d565b60405180910390fd5b6126088260008361282a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561268e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268590613eef565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546126e591906133d2565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161274a9190612cdf565b60405180910390a361275e8360008461282f565b505050565b60006127c5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166128349092919063ffffffff16565b905060008151111561282557808060200190518101906127e5919061312e565b612824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281b90613f81565b60405180910390fd5b5b505050565b505050565b505050565b6060612843848460008561284c565b90509392505050565b606082471015612891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288890614013565b60405180910390fd5b61289a85612960565b6128d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128d09061407f565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161290291906140e6565b60006040518083038185875af1925050503d806000811461293f576040519150601f19603f3d011682016040523d82523d6000602084013e612944565b606091505b5091509150612954828286612973565b92505050949350505050565b600080823b905060008111915050919050565b60608315612983578290506129d3565b6000835111156129965782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ca9190612bcd565b60405180910390fd5b9392505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612a14816129df565b8114612a1f57600080fd5b50565b600081359050612a3181612a0b565b92915050565b600060208284031215612a4d57612a4c6129da565b5b6000612a5b84828501612a22565b91505092915050565b60008115159050919050565b612a7981612a64565b82525050565b6000602082019050612a946000830184612a70565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612adf612ada612ad584612a9a565b612aba565b612a9a565b9050919050565b6000612af182612ac4565b9050919050565b6000612b0382612ae6565b9050919050565b612b1381612af8565b82525050565b6000602082019050612b2e6000830184612b0a565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b6e578082015181840152602081019050612b53565b83811115612b7d576000848401525b50505050565b6000601f19601f8301169050919050565b6000612b9f82612b34565b612ba98185612b3f565b9350612bb9818560208601612b50565b612bc281612b83565b840191505092915050565b60006020820190508181036000830152612be78184612b94565b905092915050565b6000612bfa82612a9a565b9050919050565b612c0a81612bef565b8114612c1557600080fd5b50565b600081359050612c2781612c01565b92915050565b600060208284031215612c4357612c426129da565b5b6000612c5184828501612c18565b91505092915050565b6000819050919050565b612c6d81612c5a565b8114612c7857600080fd5b50565b600081359050612c8a81612c64565b92915050565b60008060408385031215612ca757612ca66129da565b5b6000612cb585828601612c18565b9250506020612cc685828601612c7b565b9150509250929050565b612cd981612c5a565b82525050565b6000602082019050612cf46000830184612cd0565b92915050565b600080600060608486031215612d1357612d126129da565b5b6000612d2186828701612c18565b9350506020612d3286828701612c18565b9250506040612d4386828701612c7b565b9150509250925092565b6000819050919050565b612d6081612d4d565b8114612d6b57600080fd5b50565b600081359050612d7d81612d57565b92915050565b600060208284031215612d9957612d986129da565b5b6000612da784828501612d6e565b91505092915050565b612db981612d4d565b82525050565b6000602082019050612dd46000830184612db0565b92915050565b600060ff82169050919050565b612df081612dda565b82525050565b6000602082019050612e0b6000830184612de7565b92915050565b600060208284031215612e2757612e266129da565b5b6000612e3584828501612c7b565b91505092915050565b6000612e4982612ae6565b9050919050565b612e5981612e3e565b82525050565b6000602082019050612e746000830184612e50565b92915050565b6000612e8582612bef565b9050919050565b612e9581612e7a565b8114612ea057600080fd5b50565b600081359050612eb281612e8c565b92915050565b600060208284031215612ece57612ecd6129da565b5b6000612edc84828501612ea3565b91505092915050565b60008060408385031215612efc57612efb6129da565b5b6000612f0a85828601612d6e565b9250506020612f1b85828601612c18565b9150509250929050565b600063ffffffff82169050919050565b612f3e81612f25565b8114612f4957600080fd5b50565b600081359050612f5b81612f35565b92915050565b600060208284031215612f7757612f766129da565b5b6000612f8584828501612f4c565b91505092915050565b60008060008060008060c08789031215612fab57612faa6129da565b5b6000612fb989828a01612c18565b9650506020612fca89828a01612c7b565b9550506040612fdb89828a01612c7b565b9450506060612fec89828a01612c7b565b9350506080612ffd89828a01612c7b565b92505060a061300e89828a01612c7b565b9150509295509295509295565b61302481612f25565b82525050565b600060208201905061303f600083018461301b565b92915050565b6000806040838503121561305c5761305b6129da565b5b600061306a85828601612c18565b925050602061307b85828601612c18565b9150509250929050565b600060a08201905061309a6000830188612cd0565b6130a76020830187612cd0565b6130b46040830186612cd0565b6130c16060830185612cd0565b6130ce6080830184612cd0565b9695505050505050565b6130e1816129df565b82525050565b60006020820190506130fc60008301846130d8565b92915050565b61310b81612a64565b811461311657600080fd5b50565b60008151905061312881613102565b92915050565b600060208284031215613144576131436129da565b5b600061315284828501613119565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806131a257607f821691505b6020821081036131b5576131b461315b565b5b50919050565b7f696e76616c69642061646d696e20616464726573730000000000000000000000600082015250565b60006131f1601583612b3f565b91506131fc826131bb565b602082019050919050565b60006020820190508181036000830152613220816131e4565b9050919050565b7f6e6f7468696e6720746f20646f6e617465000000000000000000000000000000600082015250565b600061325d601183612b3f565b915061326882613227565b602082019050919050565b6000602082019050818103600083015261328c81613250565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132cd82612c5a565b91506132d883612c5a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561330d5761330c613293565b5b828201905092915050565b600061332382612c5a565b915061332e83612c5a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561336757613366613293565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133ac82612c5a565b91506133b783612c5a565b9250826133c7576133c6613372565b5b828204905092915050565b60006133dd82612c5a565b91506133e883612c5a565b9250828210156133fb576133fa613293565b5b828203905092915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000613462602883612b3f565b915061346d82613406565b604082019050919050565b6000602082019050818103600083015261349181613455565b9050919050565b6000815190506134a781612d57565b92915050565b6000602082840312156134c3576134c26129da565b5b60006134d184828501613498565b91505092915050565b7f43616e277420636c61696d203020746f6b656e73000000000000000000000000600082015250565b6000613510601483612b3f565b915061351b826134da565b602082019050919050565b6000602082019050818103600083015261353f81613503565b9050919050565b61354f81612bef565b82525050565b600060208201905061356a6000830184613546565b92915050565b60008151905061357f81612c64565b92915050565b60006020828403121561359b5761359a6129da565b5b60006135a984828501613570565b91505092915050565b7f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f7760008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b600061360e602483612b3f565b9150613619826135b2565b604082019050919050565b6000602082019050818103600083015261363d81613601565b9050919050565b60006040820190506136596000830185612db0565b6136666020830184613546565b9392505050565b7f4e6f20616c6c6f77656420746f20726573637565207468697320746f6b656e00600082015250565b60006136a3601f83612b3f565b91506136ae8261366d565b602082019050919050565b600060208201905081810360008301526136d281613696565b9050919050565b7f766545524332303a2054474520646174652063616e277420626520696e20746860008201527f6520706173740000000000000000000000000000000000000000000000000000602082015250565b6000613735602683612b3f565b9150613740826136d9565b604082019050919050565b6000602082019050818103600083015261376481613728565b9050919050565b7f766545524332303a206e6577205447452064617465206973206265796f6e642060008201527f6c696d6974000000000000000000000000000000000000000000000000000000602082015250565b60006137c7602583612b3f565b91506137d28261376b565b604082019050919050565b600060208201905081810360008301526137f6816137ba565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000613859602583612b3f565b9150613864826137fd565b604082019050919050565b600060208201905081810360008301526138888161384c565b9050919050565b7f6e6f7420706f737369626c6520746f207472616e73666572207665737465642060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b60006138eb602583612b3f565b91506138f68261388f565b604082019050919050565b6000602082019050818103600083015261391a816138de565b9050919050565b60006040820190506139366000830185613546565b6139436020830184612cd0565b9392505050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006139a6602483612b3f565b91506139b18261394a565b604082019050919050565b600060208201905081810360008301526139d581613999565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613a38602283612b3f565b9150613a43826139dc565b604082019050919050565b60006020820190508181036000830152613a6781613a2b565b9050919050565b6000606082019050613a836000830186613546565b613a906020830185613546565b613a9d6040830184612cd0565b949350505050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613adb601f83612b3f565b9150613ae682613aa5565b602082019050919050565b60006020820190508181036000830152613b0a81613ace565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613b6d602583612b3f565b9150613b7882613b11565b604082019050919050565b60006020820190508181036000830152613b9c81613b60565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613bff602383612b3f565b9150613c0a82613ba3565b604082019050919050565b60006020820190508181036000830152613c2e81613bf2565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000613c91602683612b3f565b9150613c9c82613c35565b604082019050919050565b60006020820190508181036000830152613cc081613c84565b9050919050565b7f636c69666654696d652073686f756c64206265206c657373207468656e20766560008201527f7374696e6754696d650000000000000000000000000000000000000000000000602082015250565b6000613d23602983612b3f565b9150613d2e82613cc7565b604082019050919050565b60006020820190508181036000830152613d5281613d16565b9050919050565b7f746765556e6c6f636b526174696f2073686f756c64206265206c65737320746860008201527f616e203100000000000000000000000000000000000000000000000000000000602082015250565b6000613db5602483612b3f565b9150613dc082613d59565b604082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e47602183612b3f565b9150613e5282613deb565b604082019050919050565b60006020820190508181036000830152613e7681613e3a565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000613ed9602283612b3f565b9150613ee482613e7d565b604082019050919050565b60006020820190508181036000830152613f0881613ecc565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613f6b602a83612b3f565b9150613f7682613f0f565b604082019050919050565b60006020820190508181036000830152613f9a81613f5e565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000613ffd602683612b3f565b915061400882613fa1565b604082019050919050565b6000602082019050818103600083015261402c81613ff0565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614069601d83612b3f565b915061407482614033565b602082019050919050565b600060208201905081810360008301526140988161405c565b9050919050565b600081519050919050565b600081905092915050565b60006140c08261409f565b6140ca81856140aa565b93506140da818560208601612b50565b80840191505092915050565b60006140f282846140b5565b91508190509291505056fea26469706673582212200954532f1617ab555c4fb11137754fbfb17ed61a4519a5cd177852be5d42210364736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addBalance(address,uint256)": {
        "params": {
          "account": "Beneficiary of the vesting account.",
          "amount": "Amount of token to be send to user under vesting, which will be deducted from msg.sender."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "availableToClaim(address)": {
        "returns": {
          "_0": "Returns amount of tokens the users can withdraw right now."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "account": "Beneficiary of the vesting account.",
          "amount": "Amount of tokens to be send, which will be deducted from msg.sender.",
          "cliffSeconds": "Amount of seconds while tokens would be completely locked.",
          "tgeUnlockRatio1e18": "ratio/1e18 ⊂ [0..1] that indicates how many tokens are going to be unlocked during TGE",
          "vestingFrequencySeconds": "how frequently token are going to be unlocked after the cliff.",
          "vestingSeconds": "Amount of seconds when linear vesting would be over. Starts from cliff."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addBalance(address,uint256)": {
        "notice": "Adds more tokens to the existing (possibly zero) vesting account. Doesn't change vesting period!"
      },
      "availableToClaim(address)": {
        "notice": "Checks amount of vested tokens minus already withdrawn."
      },
      "claim()": {
        "notice": "User can claim their vested tokens."
      },
      "donateTokens(address)": {
        "notice": "User can donate tokens under vesting to DAO or other admin contract as us treasury."
      },
      "lockUnderVesting(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Creates an account with time-vesting for the user and withdraws these tokens from msg.sender."
      },
      "rescue(address)": {
        "notice": "The owner of the contact can take away tokens accidentally sent to the contract."
      },
      "totalClaimed(address)": {
        "notice": "Total amount of token user had claimed."
      },
      "totalDeposited(address)": {
        "notice": "Total amount of token was deposited under vesting on behalf of the user."
      },
      "updateTgeTimestamp(uint32)": {
        "notice": "owner of the contract can set up TGE date within set limits."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8060,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8066,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8068,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8070,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8072,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 14213,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISuAccessControl)15657"
      },
      {
        "astId": 15934,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "LOCKED_TOKEN",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ERC20)8590"
      },
      {
        "astId": 15939,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "tgeTimestamp",
        "offset": 20,
        "slot": "6",
        "type": "t_uint32"
      },
      {
        "astId": 15955,
        "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
        "label": "vestingInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(VestingInfo)15950_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)8590": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ISuAccessControl)15657": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(VestingInfo)15950_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VeERC20.VestingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingInfo)15950_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VestingInfo)15950_storage": {
        "encoding": "inplace",
        "label": "struct VeERC20.VestingInfo",
        "members": [
          {
            "astId": 15941,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "amountAlreadyWithdrawn",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15943,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "cliffSeconds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15945,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "vestingSeconds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15947,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "tgeUnlockRatio1e18",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15949,
            "contract": "contracts/vested-escrow/VeERC20.sol:VeERC20",
            "label": "vestingFrequencySeconds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}