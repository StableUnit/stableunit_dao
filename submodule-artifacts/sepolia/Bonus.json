{
  "address": "0x97eaA69F210426eaC3A391d6d4377cfe85443494",
  "abi": [
    {
      "inputs": [],
      "name": "BadAccessControlSingleton",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAdminError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAlerterError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyDAOError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidationAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMintAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRewardAccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRoleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVaultAccessError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCESS_CONTROL_SINGLETON",
      "outputs": [
        {
          "internalType": "contract ISuAccessControl",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ALERTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYSTEM_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ACCESS_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adminInfo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "communityAdminInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "distributeXp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        }
      ],
      "name": "getLevelByXP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        }
      ],
      "name": "getNftBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlSingleton",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "levelMap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nftInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAdmin",
          "type": "bool"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "communityAdmin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "xpLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "levelLimit",
          "type": "uint16"
        }
      ],
      "name": "setCommunityAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "name": "setNftInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "name": "setUserInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "xp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donationBonusRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "a74e30bb844720d1485a32b7747b45a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BadAccessControlSingleton\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAdminError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAlerterError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDAOError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidationAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMintAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRewardAccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRoleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVaultAccessError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCESS_CONTROL_SINGLETON\",\"outputs\":[{\"internalType\":\"contract ISuAccessControl\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ALERTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDATION_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYSTEM_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"communityAdminInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"distributeXp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"}],\"name\":\"getLevelByXP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"}],\"name\":\"getNftBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlSingleton\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"levelMap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAdmin\",\"type\":\"bool\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"communityAdmin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"xpLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"levelLimit\",\"type\":\"uint16\"}],\"name\":\"setCommunityAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"name\":\"setNftInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"name\":\"setUserInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"xp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donationBonusRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isTokenTransferable(address,uint256)\":{\"details\":\"See {IBonus-isTokenTransferable}.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"distributeXp(address,uint256)\":{\"notice\":\"Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\"},\"getAllocation(address)\":{\"notice\":\"Get user allocation `user` Address of user\"},\"getBonus(address)\":{\"notice\":\"Get user bonus reward for donation `user` Address of user\"},\"getLevel(address)\":{\"notice\":\"Get user level according to constant distribution. Max value: 65535 `user` Address of user\"},\"getNftAllocation(address)\":{\"notice\":\"Get nft allocation `user` Address of user\"},\"getNftBonus(address)\":{\"notice\":\"Get nft bonus reward for donation `user` Address of nft\"},\"setAdmin(address,bool)\":{\"notice\":\"Add or remove new admin `isAdmin` Address of admin\"},\"setNftInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and donationBonusRatio for NFT `isAdmin` Address of admin\"},\"setUserInfo(address,uint256,uint256)\":{\"notice\":\"Set allocation and donationBonusRatio for user `isAdmin` Address of admin\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bonus.sol\":\"Bonus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/Bonus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/*\\n      /$$$$$$            /$$$$$$$   /$$$$$$   /$$$$$$\\n     /$$__  $$          | $$__  $$ /$$__  $$ /$$__  $$\\n    | $$  \\\\__/ /$$   /$$| $$  \\\\ $$| $$  \\\\ $$| $$  \\\\ $$\\n    |  $$$$$$ | $$  | $$| $$  | $$| $$$$$$$$| $$  | $$\\n     \\\\____  $$| $$  | $$| $$  | $$| $$__  $$| $$  | $$\\n     /$$  \\\\ $$| $$  | $$| $$  | $$| $$  | $$| $$  | $$\\n    |  $$$$$$/|  $$$$$$/| $$$$$$$/| $$  | $$|  $$$$$$/\\n     \\\\______/  \\\\______/ |_______/ |__/  |__/ \\\\______/\\n*/\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IBonus.sol\\\";\\nimport \\\"./periphery/contracts/access-control/SuAuthenticated.sol\\\";\\n\\ncontract Bonus is IBonus, SuAuthenticated {\\n    mapping(address => NFTInfo) public nftInfo;\\n    mapping(address => UserInfo) public userInfo;\\n\\n    mapping(address => AdminInfo) public adminInfo;\\n    mapping(address => CommunityAdminInfo) public communityAdminInfo;\\n\\n    mapping(uint16 => uint256) public levelMap;\\n\\n    function initialize(address _accessControlSingleton, address defaultAdmin) public initializer {\\n        __suAuthenticatedInit(_accessControlSingleton);\\n        adminInfo[defaultAdmin].isAdmin = true;\\n\\n        levelMap[1] = 1000;\\n        levelMap[2] = 2000;\\n        levelMap[3] = 3200;\\n        levelMap[4] = 4600;\\n        levelMap[5] = 6200;\\n        levelMap[6] = 8000;\\n        levelMap[7] = 10000;\\n        levelMap[8] = 12200;\\n        levelMap[9] = 14700;\\n        levelMap[10] = 17500;\\n        levelMap[11] = 20600;\\n        levelMap[12] = 24320;\\n        levelMap[13] = 28784;\\n        levelMap[14] = 34140;\\n        levelMap[15] = 40567;\\n        levelMap[16] = 48279;\\n        levelMap[17] = 57533;\\n        levelMap[18] = 68637;\\n        levelMap[19] = 81961;\\n        levelMap[20] = 97949;\\n        levelMap[21] = 117134;\\n        levelMap[22] = 140156;\\n        levelMap[23] = 167782;\\n        levelMap[24] = 200933;\\n        levelMap[25] = 240714;\\n        levelMap[26] = 288451;\\n        levelMap[27] = 345735;\\n        levelMap[28] = 414475;\\n        levelMap[29] = 496963;\\n        levelMap[30] = 595948;\\n        levelMap[31] = 714730;\\n        levelMap[32] = 857268;\\n        levelMap[33] = 1028313;\\n        levelMap[34] = 1233567;\\n        levelMap[35] = 1479871;\\n        levelMap[36] = 1775435;\\n        levelMap[37] = 2130111;\\n        levelMap[38] = 2555722;\\n        levelMap[39] = 3066455;\\n        levelMap[40] = 3679334;\\n        levelMap[41] = 4414788;\\n        levelMap[42] = 5297332;\\n        levelMap[43] = 6356384;\\n        levelMap[44] = 7627246;\\n        levelMap[45] = 9152280;\\n        levelMap[46] = 10982320;\\n        levelMap[47] = 13178368;\\n        levelMap[48] = 15813625;\\n        levelMap[49] = 18975933;\\n        levelMap[50] = 22770702;\\n        levelMap[51] = 27324424;\\n        levelMap[52] = 32788890;\\n        levelMap[53] = 39346249;\\n        levelMap[54] = 47215079;\\n        levelMap[55] = 56657675;\\n        levelMap[56] = 67988790;\\n        levelMap[57] = 81586128;\\n        levelMap[58] = 97902933;\\n        levelMap[59] = 117483099;\\n        levelMap[60] = 140979298;\\n        levelMap[61] = 169174736;\\n        levelMap[62] = 203009261;\\n        levelMap[63] = 243610691;\\n        levelMap[64] = 292332407;\\n        levelMap[65] = 350798466;\\n        levelMap[66] = 420957736;\\n        levelMap[67] = 505148860;\\n        levelMap[68] = 606178208;\\n        levelMap[69] = 727413425;\\n        levelMap[70] = 872895685;\\n        levelMap[71] = 1047474397;\\n        levelMap[72] = 1256968851;\\n        levelMap[73] = 1508362195;\\n        levelMap[74] = 1810034207;\\n    }\\n\\n    function getLevelByXP(uint256 xp) public view returns (uint16) {\\n        for (uint16 i = 1; i <= 74; ++i) {\\n            if (xp < levelMap[i]) {\\n                return i;\\n            }\\n        }\\n        if (xp > levelMap[74]) {\\n            return 75;\\n        }\\n        return 1;\\n    }\\n\\n    function getLevel(address user) public view override returns (uint16) {\\n        return getLevelByXP(userInfo[user].xp);\\n    }\\n\\n    function setAdmin(address admin, bool isAdmin) public onlyRole(DAO_ROLE) override {\\n        adminInfo[admin].isAdmin = isAdmin;\\n    }\\n\\n    function setCommunityAdmin(address communityAdmin, uint256 xpLimit, uint16 levelLimit) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        communityAdminInfo[communityAdmin].xpLimit = xpLimit;\\n        communityAdminInfo[communityAdmin].levelLimit = levelLimit;\\n    }\\n\\n    function setNftInfo(address nft, uint256 allocation, uint256 donationBonusRatio) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        nftInfo[nft].allocation = allocation;\\n        nftInfo[nft].donationBonusRatio = donationBonusRatio;\\n    }\\n\\n    function setUserInfo(address user, uint256 allocation, uint256 donationBonusRatio) public override {\\n        require(adminInfo[msg.sender].isAdmin, \\\"Need admin rights\\\");\\n        userInfo[user].allocation = allocation;\\n        userInfo[user].donationBonusRatio = donationBonusRatio;\\n    }\\n\\n    function distributeXp(address user, uint256 xp) public override {\\n        require(communityAdminInfo[msg.sender].levelLimit > 0, \\\"Need communityAdmin rights\\\");\\n        require(\\n            xp <= communityAdminInfo[msg.sender].xpLimit,\\n            \\\"XP to distribute shouldn't be more than admin xpLimit\\\"\\n        );\\n\\n        communityAdminInfo[msg.sender].xpLimit = communityAdminInfo[msg.sender].xpLimit - xp;\\n        userInfo[user].xp = userInfo[user].xp + xp;\\n\\n        uint16 newUserLevel = getLevelByXP(userInfo[user].xp);\\n        require(\\n            newUserLevel <= communityAdminInfo[msg.sender].levelLimit,\\n            \\\"User level should be less than admin levelLimit\\\"\\n        );\\n    }\\n\\n    function getAllocation(address user) public view override returns (uint256) {\\n        return userInfo[user].allocation;\\n    }\\n\\n    function getNftAllocation(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].allocation;\\n    }\\n\\n\\n    function getBonus(address user) public view override returns (uint256) {\\n        return userInfo[user].donationBonusRatio;\\n    }\\n\\n    function getNftBonus(address nft) public view override returns (uint256) {\\n        return nftInfo[nft].donationBonusRatio;\\n    }\\n\\n    /**\\n     * @dev See {IBonus-isTokenTransferable}.\\n     */\\n    function isTokenTransferable(address nft, uint256 tokenId) external pure returns (bool) {\\n        return false;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x804f14cb62e00dea92d406bef3f0387ab6989d1fc0fd9809254bf002cae1333e\",\"license\":\"MIT\"},\"contracts/interfaces/IBonus.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IBonus {\\n    /**\\n     * @notice Info for each nft.\\n     * `allocation` User allocation\\n     * `donationBonusRatio` Bonus during distribution\\n     */\\n    struct NFTInfo {\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each user.\\n     * `xp` The amount of XP.\\n     * `allocation` User allocation\\n     * `donationBonusRatio` Bonus during distribution\\n     */\\n    struct UserInfo {\\n        uint256 xp;\\n        uint256 allocation;\\n        uint256 donationBonusRatio;\\n    }\\n\\n    /**\\n     * @notice Info of each admin (Can setup communityAdmin)\\n     * `isAdmin` Boolean if it's admin\\n     */\\n    struct AdminInfo {\\n        bool isAdmin;\\n    }\\n\\n    /**\\n     * @notice Info of each community admin (Can distribute XP).\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level > levelLimit)\\n     */\\n    struct CommunityAdminInfo {\\n        uint256 xpLimit;\\n        uint16 levelLimit;\\n    }\\n\\n    /**\\n     * @notice Set allocation and donationBonusRatio for NFT\\n     * `isAdmin` Address of admin\\n     */\\n    function setNftInfo(address nft, uint256 allocation, uint256 donationBonusRatio) external;\\n\\n    /**\\n     * @notice Set allocation and donationBonusRatio for user\\n     * `isAdmin` Address of admin\\n     */\\n    function setUserInfo(address user, uint256 allocation, uint256 donationBonusRatio) external;\\n\\n    /**\\n     * @notice Get user level according to constant distribution. Max value: 65535\\n     * `user` Address of user\\n     */\\n    function getLevel(address user) external view returns ( uint16 );\\n\\n    /**\\n     * @notice Add or remove new admin\\n     * `isAdmin` Address of admin\\n     */\\n    function setAdmin(address admin, bool isAdmin) external;\\n\\n    /**\\n     * @notice Set new community admin parameters\\n     * `admin` Address of admin\\n     * `xpLimit` The amount of XP that admin can distribute over other users\\n     * `levelLimit` Admins can't distribute tokens so that (user level >= levelLimit)\\n     */\\n    function setCommunityAdmin(address admin, uint256 xpLimit, uint16 levelLimit) external;\\n\\n    /**\\n     * @notice Admin can give xp points to user\\n     * `user` Address of user\\n     * `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)\\n     */\\n    function distributeXp(address user, uint256 xp) external;\\n\\n    /**\\n     * @notice Get user allocation\\n     * `user` Address of user\\n     */\\n    function getAllocation(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get user bonus reward for donation\\n     * `user` Address of user\\n     */\\n    function getBonus(address user) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft allocation\\n     * `user` Address of user\\n     */\\n    function getNftAllocation(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Get nft bonus reward for donation\\n     * `user` Address of nft\\n     */\\n    function getNftBonus(address nft) external view returns ( uint256 );\\n\\n    /**\\n     * @notice Returns true/false whether this NFT with tokenId can do transfer\\n     */\\n    function isTokenTransferable(address nft, uint256 tokenId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa8d62842817350ce769ee1f20e6e2a1a177138d1007747a1db26b2923de0bb14\",\"license\":\"UNLICENSED\"},\"contracts/periphery/contracts/access-control/SuAccessRoles.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title SuAccessRoles Library\\n * @dev SuAuthenticated and SuAccessControlSingleton need to have this constants\\n * Hierarchy:\\n *      1. DAO - can give admins and system roles\\n *      2.1. Admin - can set Alerters\\n *      2.2. System - includes Minter, Vault, Liquidation and Reward roles, don't have access to give some roles.\\n *      3. Alerter - can send alerts and trigger rate limits, don't have access to give some roles.\\n */\\nabstract contract SuAccessRoles {\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    bytes32 public constant ALERTER_ROLE = keccak256(\\\"ALERTER_ROLE\\\");\\n\\n    // system roles\\n    bytes32 public constant MINT_ACCESS_ROLE = keccak256(\\\"MINT_ACCESS_ROLE\\\");\\n    bytes32 public constant VAULT_ACCESS_ROLE = keccak256(\\\"VAULT_ACCESS_ROLE\\\");\\n    bytes32 public constant LIQUIDATION_ACCESS_ROLE = keccak256(\\\"LIQUIDATION_ACCESS_ROLE\\\");\\n    bytes32 public constant REWARD_ACCESS_ROLE = keccak256(\\\"REWARD_ACCESS_ROLE\\\");\\n    bytes32 public constant SYSTEM_ROLE = keccak256(\\\"SYSTEM_ROLE\\\");\\n}\\n\",\"keccak256\":\"0xce71310378d7b30dfc4beda0af58490c09cb2cc6c4d951ce1b62bf2fb62d6dbc\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/access-control/SuAuthenticated.sol\":{\"content\":\"// SPDX-License-Identifier: BSL 1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/access-control/ISuAccessControl.sol\\\";\\nimport \\\"./SuAccessRoles.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @title SuAuthenticated\\n * @dev other contracts should inherit to be authenticated.\\n * The address of SuAccessControlSingleton should be one for all contract that inherits SuAuthenticated\\n */\\nabstract contract SuAuthenticated is Initializable, SuAccessRoles, IERC165Upgradeable {\\n    ISuAccessControl public ACCESS_CONTROL_SINGLETON;\\n\\n    error OnlyDAOError();\\n    error OnlyAdminError();\\n    error OnlyAlerterError();\\n    error OnlyVaultAccessError();\\n    error OnlyLiquidationAccessError();\\n    error OnlyMintAccessError();\\n    error OnlyRewardAccessError();\\n    error OnlyRoleError();\\n    error BadAccessControlSingleton();\\n\\n    /**\\n     * @dev should be passed in constructor\\n     */\\n    function __suAuthenticatedInit(address _accessControlSingleton) internal onlyInitializing {\\n        ACCESS_CONTROL_SINGLETON = ISuAccessControl(_accessControlSingleton);\\n        if (\\n            _accessControlSingleton != address(0) &&\\n            !ISuAccessControl(_accessControlSingleton).supportsInterface(type(IAccessControlUpgradeable).interfaceId)\\n        ) revert BadAccessControlSingleton();\\n    }\\n\\n    /** CORE ROLES */\\n\\n    modifier onlyDAO() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(DAO_ROLE, msg.sender)) revert OnlyDAOError();\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ADMIN_ROLE, msg.sender)) revert OnlyAdminError();\\n        _;\\n    }\\n\\n    modifier onlyAlerter() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(ALERTER_ROLE, msg.sender)) revert OnlyAlerterError();\\n        _;\\n    }\\n\\n    /** SYSTEM ROLES */\\n\\n    modifier onlyVaultAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(VAULT_ACCESS_ROLE, msg.sender)) revert OnlyVaultAccessError();\\n        _;\\n    }\\n\\n    modifier onlyLiquidationAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(LIQUIDATION_ACCESS_ROLE, msg.sender)) revert OnlyLiquidationAccessError();\\n        _;\\n    }\\n\\n    modifier onlyMintAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(MINT_ACCESS_ROLE, msg.sender)) revert OnlyMintAccessError();\\n        _;\\n    }\\n\\n    modifier onlyRewardAccess() {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(REWARD_ACCESS_ROLE, msg.sender)) revert OnlyRewardAccessError();\\n        _;\\n    }\\n\\n    // syntax sugar under ACCESS_CONTROL_SINGLETON\\n    modifier onlyRole(bytes32 role) {\\n        if (!ACCESS_CONTROL_SINGLETON.hasRole(role, msg.sender)) revert OnlyRoleError();\\n        _;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return ACCESS_CONTROL_SINGLETON.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x4e1ac84371a46e7534714397cf0ea5cf30d0e338caee0fde64771f276a5a4303\",\"license\":\"BSL 1.1\"},\"contracts/periphery/contracts/interfaces/access-control/ISuAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport \\\"../../access-control/SuAccessRoles.sol\\\";\\n\\n/**\\n * @notice Access control for contracts\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n **/\\ninterface ISuAccessControl is IAccessControlUpgradeable, IERC165Upgradeable {\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n}\\n\",\"keccak256\":\"0x25724ac502fd6418ccd38273b276de4b2fdecd023d723c5d80c9f0a27c407bcd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101545760003560e01c806301ffc9a71461015957806303ee9f22146101815780630e022923146101b257806314c376dc146101ec5780631959a002146102135780633a740a631461025c578063438280dd14610289578063485cc955146102b05780634b0bddd2146102c557806371d0fb41146102d857806375071d2a146102ff57806375b238fc14610326578063817c89661461032e578063894ab265146103545780638a52b2fa1461036a5780638e5313e01461037d578063903ba689146103a4578063935920dd146103c4578063b68ce71c146103d7578063bdab5331146103fa578063c3c41f871461040d578063dbcfb6bb14610450578063dc97e84e1461047d578063de6851f8146104a4578063e3ac1e77146104cd578063e9545b92146104e0578063e9c265181461051c578063f5c972ac14610531575b600080fd5b61016c610167366004611771565b610544565b60405190151581526020015b60405180910390f35b60005461019a906201000090046001600160a01b031681565b6040516001600160a01b039091168152602001610178565b6101de6101c03660046117be565b6001600160a01b031660009081526002602052604090206001015490565b604051908152602001610178565b6101de7fe965846df3dd5b1dfa65f58e31477079e90140e0908b6dd31b5aead5a57cf36581565b6102416102213660046117be565b600260208190526000918252604090912080546001820154919092015483565b60408051938452602084019290925290820152606001610178565b6101de61026a3660046117be565b6001600160a01b03166000908152600260208190526040909120015490565b6101de7f39f61ca2a1a28fee144218173ec637b649a353e4026b2738c673800e5bf1437b81565b6102c36102be3660046117d9565b6105c1565b005b6102c36102d336600461181a565b6111fa565b6101de7f880a91047114272656e533301261260c75e4d11543ac7303d6fe4204579ec72781565b6101de7f5719df9ef2c4678b547f89e4f5ae410dbf400fc51cf3ded434c55f6adea2c43f81565b6101de600081565b61034161033c3660046117be565b6112ca565b60405161ffff9091168152602001610178565b61016c610362366004611851565b600092915050565b61034161037836600461187b565b6112e8565b6101de7fe453bacb314e78dcd5192e6b1a2b1f0e7c76e92f6b7e429a6a90f04e39db3b7681565b6101de6103b23660046118a6565b60056020526000908152604090205481565b6102c36103d2366004611851565b61135c565b61016c6103e53660046117be565b60036020526000908152604090205460ff1681565b6102c36104083660046118c1565b611531565b61043861041b3660046117be565b6004602052600090815260409020805460019091015461ffff1682565b6040805192835261ffff909116602083015201610178565b6101de61045e3660046117be565b6001600160a01b03166000908152600160208190526040909120015490565b6101de7f9a9aef7c1247d5fc769b0185c052913e39673da29a880317dfd20ebf86f26a4981565b6101de6104b23660046117be565b6001600160a01b031660009081526001602052604090205490565b6102c36104db3660046118f4565b611583565b6105076104ee3660046117be565b6001602081905260009182526040909120805491015482565b60408051928352602083019190915201610178565b6101de6000805160206119eb83398151915281565b6102c361053f3660046118c1565b6115e7565b600080546040516301ffc9a760e01b8152620100009091046001600160a01b0316906301ffc9a79061057a908590600401611930565b602060405180830381865afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611945565b92915050565b600054610100900460ff16158080156105e15750600054600160ff909116105b806105fb5750303b1580156105fb575060005460ff166001145b6106635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610686576000805461ff0019166101001790555b61068f8361163e565b6001600160a01b03821660009081526003602090815260408220805460ff19166001179055600590526103e87f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b556107d07f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a55610c807fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc0556111f87f3eec716f11ba9e820c81ca75eb978ffb45831ef8b7a53e5e422c26008e1ca6d5556118387f458b30c2d72bfd2c6317304a4594ecbafe5f729d3111b65fdc3a33bd48e5432d55611f407f069400f22b28c6c362558d92f66163cec5671cba50b61abd2eecfcd0eaeac518556127107feddb6698d7c569ff62ff64f1f1492bf14a54594835ba0faac91f84b4f5d8146055612fa87ffb33122aa9f93cc639ebe80a7bc4784c11e6053dde89c6f4f7e268c6a623da1e5561396c7fc0a4a8be475dfebc377ebef2d7c4ff47656f572a08dd92b81017efcdba0febe15561445c7fa18b128af1c8fc61ff46f02d146e54546f34d340574cf2cef6a753cba6b6701d556150787f40f28f99a40bc9f6beea1013afdbc3cdcc689eb76b82c4de06c0acf1e1932ed555615f007ff907e7e6656fa73566b18c1215272fe9fca2c55c552e62c923e21e000ac4b4e6556170707f03145c75015e7a856ecd94c41432ef3cb669d6360af23433588937fefdfac8255561855c7f783638979e3582b3ffd6d53fc06c949ac31d1ac75a5e2c3531fbe1f91045eb5355619e777f58f00e8ecc6f5419941dd0bafec65a4cc188d31713fb1fe224257460930df8af5561bc977f8b32256db898364c465749decac34aee435952ffe1739257aa5b0235e266d9c55561e0bd7fb4e18992ad424cdedc46668609f2bafcf665a8d99577618d5923c69264d9cf5f5562010c1d7fd1ccbf1f9f869f51cd81e6f099f905636b057f682c706fe990614b112051692855620140297f872ac8b0ab547ba6ba6686d487265a409b97d09cf043f98287b4b34e7bc04a715562017e9d7f3dfec54401578e5ad10d5cfe74972cfc24c82740aaca9c2d34cbb4be4a761cc5556201c98e7fdcae836ed36bf3d20474cfcca00229d5b3b00239a2a956d8ca4bf29e25a7143c556202237c7fb8657d180a4d2444fb942e94a4266075e5a1b59d96d88e88cf308d6927f00ff25562028f667f1759eeb783be12e6871ee15567296c25cea65699ad38e9965540ba6254a9037f55620310e57f5cc25df4297f13907c2e8c8bb7612ac7d899f1e24c7e8664c22a89192ac286a7556203ac4a7fae2f6b16f0e0ac80673d6caef460ba44e001264158bf422be5bc239018ccc67755620466c37fce1f324a8a5d5daa4a6b2281780ab321637fd4089413dd89c573bbf705027cb955620546877f2c8eed490e2e8e94ab99e89b6202d0db22c83d972d2b78b681fe35c98d2baa33556206530b7f66eeecffab615cf4c69d47d3aa51576e95b697767264fa754ea36f4e363ea19355620795437f348e8fe0716b12afdd2e814ae0b8b1bb9b5c7a197ef418c73b8bdd93bee14de555620917ec7f3fb1f8b5b572f385df2ff517fa4200d6781fd017f742a2f073e874e0dca7758b55620ae7ea7ff0566fba57f394cfd00b7b328d5cff9d096b0b4609f559321788bcbb79ff612c55620d14b47f071e9cfece6dd892566e0eb3e2a591eadf7d95b3a63c4bb6c30897234d67d5cc55620fb0d97ffde35737db706c16fba5e9f098619e9536256befd6f412f408865e7267b38573556212d29f7fe220d357edf822f4321b23cffbfab413ad8eeb56a2713716f7e2bbfeb0b5430055621694bf7fe56c6ef332cefbe99d2b7259f3225990cbd3f699378f2a746f66c2ce6ebd99f255621b174b7f4d86b00d2ea4cfb01847b7956081673f71c56ef4a250d3ffa5902b0df4fc970655622080bf7fe7b2f5b8ff880c1a599b26d8cd3d962e19d4d36b9a4f72f9192d1462655a2e40556226ff4a7f20b4ded72103adf3888643381b049681544c9cf7421ba3a953a980da85628e3f55622eca577f8ec4d803bc2cd2bec8ceaf2e5a0dec14ca32ca78fa74656eb25549e85d5772b155623824667f68ec43d1fa25ecab18a22465ce1f8255926468a3d494eb646e020d9745efacba5562435d447f3b07644517d2f667e1f84d4fb6c23df68138cb298509f38ac23f8d4d0fa756f4556250d4b47fd3e7a847b0e4be9f2ff1f88564b0a771bb9789c2c82f98679296a6042483791d556260fda07feba08e2c8348651115080ff16aec63b0e8f9b0c03ed2a6ca5b8b4f7e25945edf55627461ee7ff741ec76f1fe7f69472258a1aadfdfa26e2ebd1eab0ccf01974a49e36fb53ba455628ba7187f2eb64dace9e373e1977085b49848a1e4396fe576dfe9452fe2fa0c3fe5f8fba05562a793b07fae270e5247e83553a186c234978857f1a6553a1b52420196e84cc06e71c5126c5562c916007f37ddd4560c83ab741802f29a9f0f3a51fcf0dbfd15f8c9ef42cab43805af040f5562f14bf97ff98ab02c2564d0809bdc6b9948bf0bbe855fb6b57200cc712fdd9f8014978f0e556301218cbd7f8f74d209ba00c83aad077872353e1c6320e5f9eed7ba50170b85c5792a54dcad5563015b740e7f641a7e47c832ef1f4ef72e654761ca2c0b592dc5a9de41ec09261efc0afea2be556301a0f0087f354f9940ed6a1b290b3c1c5b50e9b42ff556724d10fadf83a38bec6611feca7d556301f4519a7f435915fe0cc7d5828f82144e618e237c9849cdfcda4f5a535c14cd1691d7d3aa5563025860497fffb9ccdad97d168b86d2150a0f29f5a728f9b67a6736384c6466de22a987aafa556302d071e77f4f66f33ac65df0650a263ea44962e2a6099e2bb49e7689e96b2d42cef897854a55630360870b7f5e667707a8fb6259bba1c3596f1ccc3371b17a1038602b75e1b70ca276b5c9fc5563040d6d367f5f395545d7c2ebf6d2fe0bd3c2073d7c4780f2b676eec0a614b06e38606c9b7a556304dce7d07f9d647ecee62923badebb7059815a9a79c851a99044fe0171fd7131336fc5562a556305d5e1557f50a46fb2cf80836b1c0b6321fa2e615506f5dec6bbdad282f0bba912031fe7be55630700a65b7f1a955fa41ac018d54070585de14e4be67ef3b5a56405190e90d632a872ab3b11556308672c627f251d9ec284fd981039307083734139a5137ee1b6185374514892855fcbc5bd9d55630a1566d07fc1e4ab78a93992ee6fa5897690163464c8f8afa9af264f2d83bf6e5bb209a73a55630c19aced7f0e4439da0f5e13593fa65268ba122e984104c23e93195f67ae3ccd394337e11d55630e8534437f0ecf77c8d822de9a75e1c3b7dd008c8047ee3733797d0b6cb600dd0fa8bbf4485563116ca3777f3b76df054e785744bcc53428683977700d8e6107fd2472955dc9b627907a5d8e556314e8c2827f40b774bb4cbea2da026b022e415a02f4741eaee1c7766ff17f16d5d987e033a6556319174e287fc8639fa93c99e972d23979b5ef6ff200152eeaed3026e6aea7600e105e992e2a55631e1bf5bc7f8308aaa4b897cf610894f4f06f942218a8bd5b82e14357430bf8c2a675cdc912556324218ba07f03eb07f93538319a7c066f99124d4f598669465a92b898712329bbdc56e2736155632b5b72b17f255bd12404c0db0a705eca148fa6521c260fb6db297889a2332aca30dffa75e55563340754c57f70fa29fc5cec322db7b003c515ab75bb14ba058b3cfa18e94aa593ef8889bfc855633e6f30dd7f8f06c6b03979cbc0d92235611ab581d9eea306abcbab3bb1da382104060a1fc655634aebd2937f1d87c3377c62b76e969d2b0db015e24647df9fee4d414b11c6817618df8537f3556359e7c7d37f5f14e0ea4eb83b384b305c1689b771279ab2a8c55fa6b7e6e7ee2c6319a7a34955604a9052636be2ee1f600080516020611a0b8339815191525580156111f5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054604051632474521560e21b81526000805160206119eb83398151915260048201819052336024830152916201000090046001600160a01b0316906391d1485490604401602060405180830381865afa15801561125d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112819190611945565b61129e57604051632f33a5b560e01b815260040160405180910390fd5b506001600160a01b03919091166000908152600360205260409020805460ff1916911515919091179055565b6001600160a01b0381166000908152600260205260408120546105bb905b600060015b604a8161ffff161161132a5761ffff811660009081526005602052604090205483101561131a5792915050565b61132381611978565b90506112ed565b50604a6000526005602052600080516020611a0b833981519152548211156113545750604b919050565b506001919050565b3360009081526004602052604090206001015461ffff166113bc5760405162461bcd60e51b815260206004820152601a6024820152794e65656420636f6d6d756e69747941646d696e2072696768747360301b604482015260640161065a565b336000908152600460205260409020548111156114395760405162461bcd60e51b815260206004820152603560248201527f585020746f20646973747269627574652073686f756c646e2774206265206d6f6044820152741c99481d1a185b8818591b5a5b881e1c131a5b5a5d605a1b606482015260840161065a565b33600090815260046020526040902054611454908290611999565b336000908152600460209081526040808320939093556001600160a01b03851682526002905220546114879082906119ac565b6001600160a01b0383166000908152600260205260408120829055906114ac906112e8565b3360009081526004602052604090206001015490915061ffff90811690821611156111f55760405162461bcd60e51b815260206004820152602f60248201527f55736572206c6576656c2073686f756c64206265206c657373207468616e206160448201526e191b5a5b881b195d995b131a5b5a5d608a1b606482015260840161065a565b3360009081526003602052604090205460ff166115605760405162461bcd60e51b815260040161065a906119bf565b6001600160a01b0390921660009081526001602081905260409091209182550155565b3360009081526003602052604090205460ff166115b25760405162461bcd60e51b815260040161065a906119bf565b6001600160a01b03929092166000908152600460205260409020908155600101805461ffff191661ffff909216919091179055565b3360009081526003602052604090205460ff166116165760405162461bcd60e51b815260040161065a906119bf565b6001600160a01b03909216600090815260026020819052604090912060018101929092550155565b600054610100900460ff166116a95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161065a565b6000805462010000600160b01b031916620100006001600160a01b038416908102919091179091551580159061175057506040516301ffc9a760e01b81526001600160a01b038216906301ffc9a79061170d90637965db0b60e01b90600401611930565b602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e9190611945565b155b1561176e576040516384d942fd60e01b815260040160405180910390fd5b50565b60006020828403121561178357600080fd5b81356001600160e01b03198116811461179b57600080fd5b9392505050565b80356001600160a01b03811681146117b957600080fd5b919050565b6000602082840312156117d057600080fd5b61179b826117a2565b600080604083850312156117ec57600080fd5b6117f5836117a2565b9150611803602084016117a2565b90509250929050565b801515811461176e57600080fd5b6000806040838503121561182d57600080fd5b611836836117a2565b915060208301356118468161180c565b809150509250929050565b6000806040838503121561186457600080fd5b61186d836117a2565b946020939093013593505050565b60006020828403121561188d57600080fd5b5035919050565b803561ffff811681146117b957600080fd5b6000602082840312156118b857600080fd5b61179b82611894565b6000806000606084860312156118d657600080fd5b6118df846117a2565b95602085013595506040909401359392505050565b60008060006060848603121561190957600080fd5b611912846117a2565b92506020840135915061192760408501611894565b90509250925092565b6001600160e01b031991909116815260200190565b60006020828403121561195757600080fd5b815161179b8161180c565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361198f5761198f611962565b6001019392505050565b818103818111156105bb576105bb611962565b808201808211156105bb576105bb611962565b6020808252601190820152704e6565642061646d696e2072696768747360781b60408201526060019056fe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603794d2936fadce37aaad638acd1107d4e2e7150a96b54f50ed2c33e9b1dbcc84fa2646970667358221220c013f1568b1081770bb68271474599cce661c36bc640c9b9fc1f0f5ce59a7ea964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "isTokenTransferable(address,uint256)": {
        "details": "See {IBonus-isTokenTransferable}."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "distributeXp(address,uint256)": {
        "notice": "Admin can give xp points to user `user` Address of user `xp` The amount of XP that admin want to give user (xp <= admin.xpLimit && levelAfter(user) <= admin.levelLimit)"
      },
      "getAllocation(address)": {
        "notice": "Get user allocation `user` Address of user"
      },
      "getBonus(address)": {
        "notice": "Get user bonus reward for donation `user` Address of user"
      },
      "getLevel(address)": {
        "notice": "Get user level according to constant distribution. Max value: 65535 `user` Address of user"
      },
      "getNftAllocation(address)": {
        "notice": "Get nft allocation `user` Address of user"
      },
      "getNftBonus(address)": {
        "notice": "Get nft bonus reward for donation `user` Address of nft"
      },
      "setAdmin(address,bool)": {
        "notice": "Add or remove new admin `isAdmin` Address of admin"
      },
      "setNftInfo(address,uint256,uint256)": {
        "notice": "Set allocation and donationBonusRatio for NFT `isAdmin` Address of admin"
      },
      "setUserInfo(address,uint256,uint256)": {
        "notice": "Set allocation and donationBonusRatio for user `isAdmin` Address of admin"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1504,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1507,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 54219,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "ACCESS_CONTROL_SINGLETON",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ISuAccessControl)58034"
      },
      {
        "astId": 49807,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "nftInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(NFTInfo)53127_storage)"
      },
      {
        "astId": 49812,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "userInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(UserInfo)53134_storage)"
      },
      {
        "astId": 49817,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "adminInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(AdminInfo)53137_storage)"
      },
      {
        "astId": 49822,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "communityAdminInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(CommunityAdminInfo)53142_storage)"
      },
      {
        "astId": 49826,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "levelMap",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 50619,
        "contract": "contracts/Bonus.sol:Bonus",
        "label": "__gap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISuAccessControl)58034": {
        "encoding": "inplace",
        "label": "contract ISuAccessControl",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(AdminInfo)53137_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.AdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AdminInfo)53137_storage"
      },
      "t_mapping(t_address,t_struct(CommunityAdminInfo)53142_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.CommunityAdminInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CommunityAdminInfo)53142_storage"
      },
      "t_mapping(t_address,t_struct(NFTInfo)53127_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.NFTInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(NFTInfo)53127_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)53134_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBonus.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)53134_storage"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AdminInfo)53137_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.AdminInfo",
        "members": [
          {
            "astId": 53136,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "isAdmin",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(CommunityAdminInfo)53142_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.CommunityAdminInfo",
        "members": [
          {
            "astId": 53139,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xpLimit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53141,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "levelLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(NFTInfo)53127_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.NFTInfo",
        "members": [
          {
            "astId": 53124,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53126,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)53134_storage": {
        "encoding": "inplace",
        "label": "struct IBonus.UserInfo",
        "members": [
          {
            "astId": 53129,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "xp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 53131,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "allocation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 53133,
            "contract": "contracts/Bonus.sol:Bonus",
            "label": "donationBonusRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}