/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPMarketInterface extends ethers.utils.Interface {
  functions: {
    "_storage()": FunctionFragment;
    "activeBalance(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(address,address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "expiry()": FunctionFragment;
    "getRewardTokens()": FunctionFragment;
    "increaseObservationsCardinalityNext(uint16)": FunctionFragment;
    "isExpired()": FunctionFragment;
    "mint(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "observations(uint256)": FunctionFragment;
    "observe(uint32[])": FunctionFragment;
    "readState(address)": FunctionFragment;
    "readTokens()": FunctionFragment;
    "redeemRewards(address)": FunctionFragment;
    "swapExactPtForSy(address,uint256,bytes)": FunctionFragment;
    "swapSyForExactPt(address,uint256,bytes)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalActiveSupply()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_storage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseObservationsCardinalityNext",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isExpired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "observations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "observe",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "readState", values: [string]): string;
  encodeFunctionData(
    functionFragment: "readTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSy",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPt",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalActiveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_storage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseObservationsCardinalityNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalActiveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,address,uint256,uint256,uint256)": EventFragment;
    "IncreaseObservationCardinalityNext(uint16,uint16)": EventFragment;
    "Mint(address,uint256,uint256,uint256)": EventFragment;
    "RedeemRewards(address,uint256[])": EventFragment;
    "Swap(address,address,int256,int256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateImpliedRate(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncreaseObservationCardinalityNext"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateImpliedRate"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    receiverSy: string;
    receiverPt: string;
    netLpBurned: BigNumber;
    netSyOut: BigNumber;
    netPtOut: BigNumber;
  }
>;

export type IncreaseObservationCardinalityNextEvent = TypedEvent<
  [number, number] & {
    observationCardinalityNextOld: number;
    observationCardinalityNextNew: number;
  }
>;

export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    receiver: string;
    netLpMinted: BigNumber;
    netSyUsed: BigNumber;
    netPtUsed: BigNumber;
  }
>;

export type RedeemRewardsEvent = TypedEvent<
  [string, BigNumber[]] & { user: string; rewardsOut: BigNumber[] }
>;

export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
    caller: string;
    receiver: string;
    netPtOut: BigNumber;
    netSyOut: BigNumber;
    netSyFee: BigNumber;
    netSyToReserve: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UpdateImpliedRateEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    timestamp: BigNumber;
    lnLastImpliedRate: BigNumber;
  }
>;

export class IPMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPMarketInterface;

  functions: {
    _storage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number] & {
        totalPt: BigNumber;
        totalSy: BigNumber;
        lastLnImpliedRate: BigNumber;
        observationIndex: number;
        observationCardinality: number;
        observationCardinalityNext: number;
      }
    >;

    activeBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      receiverSy: string,
      receiverPt: string,
      netLpToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    increaseObservationsCardinalityNext(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isExpired(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      receiver: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        blockTimestamp: number;
        lnImpliedRateCumulative: BigNumber;
        initialized: boolean;
      }
    >;

    observe(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { lnImpliedRateCumulative: BigNumber[] }>;

    readState(
      router: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalPt: BigNumber;
          totalSy: BigNumber;
          totalLp: BigNumber;
          treasury: string;
          scalarRoot: BigNumber;
          expiry: BigNumber;
          lnFeeRateRoot: BigNumber;
          reserveFeePercent: BigNumber;
          lastLnImpliedRate: BigNumber;
        }
      ] & {
        market: [
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          totalPt: BigNumber;
          totalSy: BigNumber;
          totalLp: BigNumber;
          treasury: string;
          scalarRoot: BigNumber;
          expiry: BigNumber;
          lnFeeRateRoot: BigNumber;
          reserveFeePercent: BigNumber;
          lastLnImpliedRate: BigNumber;
        };
      }
    >;

    readTokens(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { _SY: string; _PT: string; _YT: string }
    >;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactPtForSy(
      receiver: string,
      exactPtIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapSyForExactPt(
      receiver: string,
      exactPtOut: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalActiveSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _storage(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, number] & {
      totalPt: BigNumber;
      totalSy: BigNumber;
      lastLnImpliedRate: BigNumber;
      observationIndex: number;
      observationCardinality: number;
      observationCardinalityNext: number;
    }
  >;

  activeBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    receiverSy: string,
    receiverPt: string,
    netLpToBurn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  increaseObservationsCardinalityNext(
    cardinalityNext: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isExpired(overrides?: CallOverrides): Promise<boolean>;

  mint(
    receiver: string,
    netSyDesired: BigNumberish,
    netPtDesired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  observations(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      blockTimestamp: number;
      lnImpliedRateCumulative: BigNumber;
      initialized: boolean;
    }
  >;

  observe(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  readState(
    router: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalPt: BigNumber;
      totalSy: BigNumber;
      totalLp: BigNumber;
      treasury: string;
      scalarRoot: BigNumber;
      expiry: BigNumber;
      lnFeeRateRoot: BigNumber;
      reserveFeePercent: BigNumber;
      lastLnImpliedRate: BigNumber;
    }
  >;

  readTokens(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & { _SY: string; _PT: string; _YT: string }
  >;

  redeemRewards(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactPtForSy(
    receiver: string,
    exactPtIn: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapSyForExactPt(
    receiver: string,
    exactPtOut: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _storage(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, number] & {
        totalPt: BigNumber;
        totalSy: BigNumber;
        lastLnImpliedRate: BigNumber;
        observationIndex: number;
        observationCardinality: number;
        observationCardinalityNext: number;
      }
    >;

    activeBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiverSy: string,
      receiverPt: string,
      netLpToBurn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netPtOut: BigNumber }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    increaseObservationsCardinalityNext(
      cardinalityNext: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isExpired(overrides?: CallOverrides): Promise<boolean>;

    mint(
      receiver: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        netLpOut: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        blockTimestamp: number;
        lnImpliedRateCumulative: BigNumber;
        initialized: boolean;
      }
    >;

    observe(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    readState(
      router: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalPt: BigNumber;
        totalSy: BigNumber;
        totalLp: BigNumber;
        treasury: string;
        scalarRoot: BigNumber;
        expiry: BigNumber;
        lnFeeRateRoot: BigNumber;
        reserveFeePercent: BigNumber;
        lastLnImpliedRate: BigNumber;
      }
    >;

    readTokens(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & { _SY: string; _PT: string; _YT: string }
    >;

    redeemRewards(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactPtForSy(
      receiver: string,
      exactPtIn: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyOut: BigNumber; netSyFee: BigNumber }
    >;

    swapSyForExactPt(
      receiver: string,
      exactPtOut: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { netSyIn: BigNumber; netSyFee: BigNumber }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Burn(address,address,uint256,uint256,uint256)"(
      receiverSy?: string | null,
      receiverPt?: string | null,
      netLpBurned?: null,
      netSyOut?: null,
      netPtOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        receiverSy: string;
        receiverPt: string;
        netLpBurned: BigNumber;
        netSyOut: BigNumber;
        netPtOut: BigNumber;
      }
    >;

    Burn(
      receiverSy?: string | null,
      receiverPt?: string | null,
      netLpBurned?: null,
      netSyOut?: null,
      netPtOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        receiverSy: string;
        receiverPt: string;
        netLpBurned: BigNumber;
        netSyOut: BigNumber;
        netPtOut: BigNumber;
      }
    >;

    "IncreaseObservationCardinalityNext(uint16,uint16)"(
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null
    ): TypedEventFilter<
      [number, number],
      {
        observationCardinalityNextOld: number;
        observationCardinalityNextNew: number;
      }
    >;

    IncreaseObservationCardinalityNext(
      observationCardinalityNextOld?: null,
      observationCardinalityNextNew?: null
    ): TypedEventFilter<
      [number, number],
      {
        observationCardinalityNextOld: number;
        observationCardinalityNextNew: number;
      }
    >;

    "Mint(address,uint256,uint256,uint256)"(
      receiver?: string | null,
      netLpMinted?: null,
      netSyUsed?: null,
      netPtUsed?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        receiver: string;
        netLpMinted: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    Mint(
      receiver?: string | null,
      netLpMinted?: null,
      netSyUsed?: null,
      netPtUsed?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        receiver: string;
        netLpMinted: BigNumber;
        netSyUsed: BigNumber;
        netPtUsed: BigNumber;
      }
    >;

    "RedeemRewards(address,uint256[])"(
      user?: string | null,
      rewardsOut?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { user: string; rewardsOut: BigNumber[] }
    >;

    RedeemRewards(
      user?: string | null,
      rewardsOut?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { user: string; rewardsOut: BigNumber[] }
    >;

    "Swap(address,address,int256,int256,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      netPtOut?: null,
      netSyOut?: null,
      netSyFee?: null,
      netSyToReserve?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        caller: string;
        receiver: string;
        netPtOut: BigNumber;
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        netSyToReserve: BigNumber;
      }
    >;

    Swap(
      caller?: string | null,
      receiver?: string | null,
      netPtOut?: null,
      netSyOut?: null,
      netSyFee?: null,
      netSyToReserve?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        caller: string;
        receiver: string;
        netPtOut: BigNumber;
        netSyOut: BigNumber;
        netSyFee: BigNumber;
        netSyToReserve: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "UpdateImpliedRate(uint256,uint256)"(
      timestamp?: BigNumberish | null,
      lnLastImpliedRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; lnLastImpliedRate: BigNumber }
    >;

    UpdateImpliedRate(
      timestamp?: BigNumberish | null,
      lnLastImpliedRate?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { timestamp: BigNumber; lnLastImpliedRate: BigNumber }
    >;
  };

  estimateGas: {
    _storage(overrides?: CallOverrides): Promise<BigNumber>;

    activeBalance(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      receiverSy: string,
      receiverPt: string,
      netLpToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    increaseObservationsCardinalityNext(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      receiver: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    observe(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readState(router: string, overrides?: CallOverrides): Promise<BigNumber>;

    readTokens(overrides?: CallOverrides): Promise<BigNumber>;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactPtForSy(
      receiver: string,
      exactPtIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapSyForExactPt(
      receiver: string,
      exactPtOut: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalActiveSupply(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _storage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeBalance(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      receiverSy: string,
      receiverPt: string,
      netLpToBurn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseObservationsCardinalityNext(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      receiver: string,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    observations(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    observe(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readState(
      router: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactPtForSy(
      receiver: string,
      exactPtIn: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapSyForExactPt(
      receiver: string,
      exactPtOut: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalActiveSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
