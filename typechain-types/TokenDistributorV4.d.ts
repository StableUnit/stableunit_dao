/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenDistributorV4Interface extends ethers.utils.Interface {
  functions: {
    "ACCESS_CONTROL_SINGLETON()": FunctionFragment;
    "ADMIN_ROLE()": FunctionFragment;
    "ALERTER_ROLE()": FunctionFragment;
    "BONUS_CONTRACT()": FunctionFragment;
    "DAO_ROLE()": FunctionFragment;
    "LIQUIDATION_ACCESS_ROLE()": FunctionFragment;
    "MINT_ACCESS_ROLE()": FunctionFragment;
    "REWARD_ACCESS_ROLE()": FunctionFragment;
    "SU_DAO()": FunctionFragment;
    "SYSTEM_ROLE()": FunctionFragment;
    "VAULT_ACCESS_ROLE()": FunctionFragment;
    "VE_ERC_20()": FunctionFragment;
    "antiderivativeOfBondingCurvePolynomial1e18At(uint256)": FunctionFragment;
    "bondingCurvePolynomial1e18(uint256)": FunctionFragment;
    "bondingCurvePolynomial1e18At(uint256)": FunctionFragment;
    "bonusStats()": FunctionFragment;
    "cliffSeconds()": FunctionFragment;
    "daoWithdraw(address,address,uint256)": FunctionFragment;
    "deadlineTimestamp()": FunctionFragment;
    "donationGoalMax()": FunctionFragment;
    "donationGoalMin()": FunctionFragment;
    "donationToken()": FunctionFragment;
    "donationTokenToUSD1e18()": FunctionFragment;
    "donations(address)": FunctionFragment;
    "fullVestingSeconds()": FunctionFragment;
    "getAccessNfts()": FunctionFragment;
    "getAccessNftsForUser(address)": FunctionFragment;
    "getBondingCurveRewardAmountFromDonationUSD(uint256)": FunctionFragment;
    "getDistributorStaticData()": FunctionFragment;
    "getMaximumDonationAmount(address,address)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "maximumDonation()": FunctionFragment;
    "minimumDonation()": FunctionFragment;
    "participate(uint256,address)": FunctionFragment;
    "setBondingCurve(int256[])": FunctionFragment;
    "setCurrentTreasuryValue(uint256)": FunctionFragment;
    "setDistributionInfo(uint64,uint64,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "setDistributionVesting(uint64,uint64,uint64,uint64)": FunctionFragment;
    "setNftAccess(address,bool)": FunctionFragment;
    "startTimestamp()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "takeDonationBack()": FunctionFragment;
    "tgeUnlockRatio1e18()": FunctionFragment;
    "totalDonations()": FunctionFragment;
    "vestingFrequencySeconds()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ACCESS_CONTROL_SINGLETON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALERTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BONUS_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "DAO_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LIQUIDATION_ACCESS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_ACCESS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_ACCESS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SU_DAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SYSTEM_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_ACCESS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VE_ERC_20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "antiderivativeOfBondingCurvePolynomial1e18At",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurvePolynomial1e18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bondingCurvePolynomial1e18At",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bonusStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cliffSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daoWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deadlineTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationGoalMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationGoalMin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donationTokenToUSD1e18",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "donations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "fullVestingSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessNfts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessNftsForUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBondingCurveRewardAmountFromDonationUSD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributorStaticData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumDonationAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumDonation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumDonation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "participate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBondingCurve",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentTreasuryValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionInfo",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionVesting",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftAccess",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "startTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takeDonationBack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tgeUnlockRatio1e18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingFrequencySeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ACCESS_CONTROL_SINGLETON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ALERTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BONUS_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DAO_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LIQUIDATION_ACCESS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_ACCESS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_ACCESS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SU_DAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SYSTEM_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_ACCESS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VE_ERC_20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "antiderivativeOfBondingCurvePolynomial1e18At",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurvePolynomial1e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondingCurvePolynomial1e18At",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bonusStats", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cliffSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deadlineTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationGoalMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationGoalMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donationTokenToUSD1e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donations", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullVestingSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessNfts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessNftsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBondingCurveRewardAmountFromDonationUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributorStaticData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumDonationAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumDonation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "participate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBondingCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentTreasuryValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeDonationBack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tgeUnlockRatio1e18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingFrequencySeconds",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Participated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Participated"): EventFragment;
}

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type ParticipatedEvent = TypedEvent<
  [string, BigNumber] & { msg_sender: string; donationAmount: BigNumber }
>;

export class TokenDistributorV4 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenDistributorV4Interface;

  functions: {
    ACCESS_CONTROL_SINGLETON(overrides?: CallOverrides): Promise<[string]>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ALERTER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    BONUS_CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    DAO_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINT_ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REWARD_ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    SU_DAO(overrides?: CallOverrides): Promise<[string]>;

    SYSTEM_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VAULT_ACCESS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    VE_ERC_20(overrides?: CallOverrides): Promise<[string]>;

    antiderivativeOfBondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingCurvePolynomial1e18(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bonusStats(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bonusRewarded: BigNumber }>;

    cliffSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    daoWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deadlineTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationGoalMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationGoalMin(overrides?: CallOverrides): Promise<[BigNumber]>;

    donationToken(overrides?: CallOverrides): Promise<[string]>;

    donationTokenToUSD1e18(overrides?: CallOverrides): Promise<[BigNumber]>;

    donations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    fullVestingSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAccessNfts(overrides?: CallOverrides): Promise<[string[]]>;

    getAccessNftsForUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBondingCurveRewardAmountFromDonationUSD(
      donationAmountUSD1e18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDistributorStaticData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTimestamp_: BigNumber;
        deadlineTimestamp_: BigNumber;
        minimumDonation_: BigNumber;
        maximumDonation_: BigNumber;
        donationGoalMin_: BigNumber;
        donationGoalMax_: BigNumber;
        donationToken_: string;
        fullVestingSeconds_: BigNumber;
        cliffSeconds_: BigNumber;
        tgeUnlockRatio1e18_: BigNumber;
        vestingFrequencySeconds_: BigNumber;
      }
    >;

    getMaximumDonationAmount(
      user: string,
      accessNft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _accessControlSingleton: string,
      _suDAO: string,
      _veErc20: string,
      _bonusContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maximumDonation(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumDonation(overrides?: CallOverrides): Promise<[BigNumber]>;

    participate(
      donationAmount: BigNumberish,
      accessNft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBondingCurve(
      _bondingCurvePolynomial1e18: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTreasuryValue(
      amountTreasuryUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionInfo(
      _startTimestamp: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _donationGoalMin: BigNumberish,
      _donationGoalMax: BigNumberish,
      _minimumDonation: BigNumberish,
      _maximumDonation: BigNumberish,
      _donationToken: string,
      _donationTokenToUSD1e18: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDistributionVesting(
      _fullVestingSeconds: BigNumberish,
      _cliffSeconds: BigNumberish,
      _tgeUnlockRatio1e18: BigNumberish,
      _vestingFrequencySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftAccess(
      accessNft: string,
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    takeDonationBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tgeUnlockRatio1e18(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalDonations(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingFrequencySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ACCESS_CONTROL_SINGLETON(overrides?: CallOverrides): Promise<string>;

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ALERTER_ROLE(overrides?: CallOverrides): Promise<string>;

  BONUS_CONTRACT(overrides?: CallOverrides): Promise<string>;

  DAO_ROLE(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  MINT_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  REWARD_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  SU_DAO(overrides?: CallOverrides): Promise<string>;

  SYSTEM_ROLE(overrides?: CallOverrides): Promise<string>;

  VAULT_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

  VE_ERC_20(overrides?: CallOverrides): Promise<string>;

  antiderivativeOfBondingCurvePolynomial1e18At(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingCurvePolynomial1e18(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bondingCurvePolynomial1e18At(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bonusStats(overrides?: CallOverrides): Promise<BigNumber>;

  cliffSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  daoWithdraw(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deadlineTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  donationGoalMax(overrides?: CallOverrides): Promise<BigNumber>;

  donationGoalMin(overrides?: CallOverrides): Promise<BigNumber>;

  donationToken(overrides?: CallOverrides): Promise<string>;

  donationTokenToUSD1e18(overrides?: CallOverrides): Promise<BigNumber>;

  donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  fullVestingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  getAccessNfts(overrides?: CallOverrides): Promise<string[]>;

  getAccessNftsForUser(
    account: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBondingCurveRewardAmountFromDonationUSD(
    donationAmountUSD1e18: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDistributorStaticData(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      startTimestamp_: BigNumber;
      deadlineTimestamp_: BigNumber;
      minimumDonation_: BigNumber;
      maximumDonation_: BigNumber;
      donationGoalMin_: BigNumber;
      donationGoalMax_: BigNumber;
      donationToken_: string;
      fullVestingSeconds_: BigNumber;
      cliffSeconds_: BigNumber;
      tgeUnlockRatio1e18_: BigNumber;
      vestingFrequencySeconds_: BigNumber;
    }
  >;

  getMaximumDonationAmount(
    user: string,
    accessNft: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _accessControlSingleton: string,
    _suDAO: string,
    _veErc20: string,
    _bonusContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maximumDonation(overrides?: CallOverrides): Promise<BigNumber>;

  minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

  participate(
    donationAmount: BigNumberish,
    accessNft: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBondingCurve(
    _bondingCurvePolynomial1e18: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTreasuryValue(
    amountTreasuryUSD: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionInfo(
    _startTimestamp: BigNumberish,
    _deadlineTimestamp: BigNumberish,
    _donationGoalMin: BigNumberish,
    _donationGoalMax: BigNumberish,
    _minimumDonation: BigNumberish,
    _maximumDonation: BigNumberish,
    _donationToken: string,
    _donationTokenToUSD1e18: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDistributionVesting(
    _fullVestingSeconds: BigNumberish,
    _cliffSeconds: BigNumberish,
    _tgeUnlockRatio1e18: BigNumberish,
    _vestingFrequencySeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftAccess(
    accessNft: string,
    valid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  takeDonationBack(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tgeUnlockRatio1e18(overrides?: CallOverrides): Promise<BigNumber>;

  totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

  vestingFrequencySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ACCESS_CONTROL_SINGLETON(overrides?: CallOverrides): Promise<string>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ALERTER_ROLE(overrides?: CallOverrides): Promise<string>;

    BONUS_CONTRACT(overrides?: CallOverrides): Promise<string>;

    DAO_ROLE(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    MINT_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    REWARD_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    SU_DAO(overrides?: CallOverrides): Promise<string>;

    SYSTEM_ROLE(overrides?: CallOverrides): Promise<string>;

    VAULT_ACCESS_ROLE(overrides?: CallOverrides): Promise<string>;

    VE_ERC_20(overrides?: CallOverrides): Promise<string>;

    antiderivativeOfBondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurvePolynomial1e18(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusStats(overrides?: CallOverrides): Promise<BigNumber>;

    cliffSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    daoWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deadlineTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    donationGoalMax(overrides?: CallOverrides): Promise<BigNumber>;

    donationGoalMin(overrides?: CallOverrides): Promise<BigNumber>;

    donationToken(overrides?: CallOverrides): Promise<string>;

    donationTokenToUSD1e18(overrides?: CallOverrides): Promise<BigNumber>;

    donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fullVestingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAccessNfts(overrides?: CallOverrides): Promise<string[]>;

    getAccessNftsForUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBondingCurveRewardAmountFromDonationUSD(
      donationAmountUSD1e18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributorStaticData(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        startTimestamp_: BigNumber;
        deadlineTimestamp_: BigNumber;
        minimumDonation_: BigNumber;
        maximumDonation_: BigNumber;
        donationGoalMin_: BigNumber;
        donationGoalMax_: BigNumber;
        donationToken_: string;
        fullVestingSeconds_: BigNumber;
        cliffSeconds_: BigNumber;
        tgeUnlockRatio1e18_: BigNumber;
        vestingFrequencySeconds_: BigNumber;
      }
    >;

    getMaximumDonationAmount(
      user: string,
      accessNft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _accessControlSingleton: string,
      _suDAO: string,
      _veErc20: string,
      _bonusContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    maximumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      donationAmount: BigNumberish,
      accessNft: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBondingCurve(
      _bondingCurvePolynomial1e18: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTreasuryValue(
      amountTreasuryUSD: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionInfo(
      _startTimestamp: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _donationGoalMin: BigNumberish,
      _donationGoalMax: BigNumberish,
      _minimumDonation: BigNumberish,
      _maximumDonation: BigNumberish,
      _donationToken: string,
      _donationTokenToUSD1e18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDistributionVesting(
      _fullVestingSeconds: BigNumberish,
      _cliffSeconds: BigNumberish,
      _tgeUnlockRatio1e18: BigNumberish,
      _vestingFrequencySeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftAccess(
      accessNft: string,
      valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takeDonationBack(overrides?: CallOverrides): Promise<void>;

    tgeUnlockRatio1e18(overrides?: CallOverrides): Promise<BigNumber>;

    totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

    vestingFrequencySeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "Participated(address,uint256)"(
      msg_sender?: null,
      donationAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { msg_sender: string; donationAmount: BigNumber }
    >;

    Participated(
      msg_sender?: null,
      donationAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { msg_sender: string; donationAmount: BigNumber }
    >;
  };

  estimateGas: {
    ACCESS_CONTROL_SINGLETON(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ALERTER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    BONUS_CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    DAO_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    SU_DAO(overrides?: CallOverrides): Promise<BigNumber>;

    SYSTEM_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VAULT_ACCESS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    VE_ERC_20(overrides?: CallOverrides): Promise<BigNumber>;

    antiderivativeOfBondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurvePolynomial1e18(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusStats(overrides?: CallOverrides): Promise<BigNumber>;

    cliffSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    daoWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deadlineTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    donationGoalMax(overrides?: CallOverrides): Promise<BigNumber>;

    donationGoalMin(overrides?: CallOverrides): Promise<BigNumber>;

    donationToken(overrides?: CallOverrides): Promise<BigNumber>;

    donationTokenToUSD1e18(overrides?: CallOverrides): Promise<BigNumber>;

    donations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    fullVestingSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    getAccessNfts(overrides?: CallOverrides): Promise<BigNumber>;

    getAccessNftsForUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBondingCurveRewardAmountFromDonationUSD(
      donationAmountUSD1e18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributorStaticData(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumDonationAmount(
      user: string,
      accessNft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _accessControlSingleton: string,
      _suDAO: string,
      _veErc20: string,
      _bonusContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maximumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    minimumDonation(overrides?: CallOverrides): Promise<BigNumber>;

    participate(
      donationAmount: BigNumberish,
      accessNft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBondingCurve(
      _bondingCurvePolynomial1e18: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTreasuryValue(
      amountTreasuryUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionInfo(
      _startTimestamp: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _donationGoalMin: BigNumberish,
      _donationGoalMax: BigNumberish,
      _minimumDonation: BigNumberish,
      _maximumDonation: BigNumberish,
      _donationToken: string,
      _donationTokenToUSD1e18: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDistributionVesting(
      _fullVestingSeconds: BigNumberish,
      _cliffSeconds: BigNumberish,
      _tgeUnlockRatio1e18: BigNumberish,
      _vestingFrequencySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftAccess(
      accessNft: string,
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takeDonationBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tgeUnlockRatio1e18(overrides?: CallOverrides): Promise<BigNumber>;

    totalDonations(overrides?: CallOverrides): Promise<BigNumber>;

    vestingFrequencySeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACCESS_CONTROL_SINGLETON(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ALERTER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BONUS_CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DAO_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_ACCESS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_ACCESS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REWARD_ACCESS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SU_DAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SYSTEM_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VAULT_ACCESS_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VE_ERC_20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    antiderivativeOfBondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingCurvePolynomial1e18(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bondingCurvePolynomial1e18At(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliffSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoWithdraw(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deadlineTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationGoalMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationGoalMin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donationTokenToUSD1e18(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullVestingSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccessNfts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAccessNftsForUser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBondingCurveRewardAmountFromDonationUSD(
      donationAmountUSD1e18: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributorStaticData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaximumDonationAmount(
      user: string,
      accessNft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _accessControlSingleton: string,
      _suDAO: string,
      _veErc20: string,
      _bonusContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maximumDonation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumDonation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participate(
      donationAmount: BigNumberish,
      accessNft: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBondingCurve(
      _bondingCurvePolynomial1e18: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTreasuryValue(
      amountTreasuryUSD: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionInfo(
      _startTimestamp: BigNumberish,
      _deadlineTimestamp: BigNumberish,
      _donationGoalMin: BigNumberish,
      _donationGoalMax: BigNumberish,
      _minimumDonation: BigNumberish,
      _maximumDonation: BigNumberish,
      _donationToken: string,
      _donationTokenToUSD1e18: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDistributionVesting(
      _fullVestingSeconds: BigNumberish,
      _cliffSeconds: BigNumberish,
      _tgeUnlockRatio1e18: BigNumberish,
      _vestingFrequencySeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftAccess(
      accessNft: string,
      valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takeDonationBack(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tgeUnlockRatio1e18(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalDonations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingFrequencySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
