/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IVestingNftInterface extends ethers.utils.Interface {
  functions: {
    "addNft(address,uint256,address,uint256)": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "nft(address)": FunctionFragment;
    "release(address)": FunctionFragment;
    "releaseTimestamp(address)": FunctionFragment;
    "tokenId(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNft",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUserInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "nft", values: [string]): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "releaseTimestamp",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values: [string]): string;

  decodeFunctionResult(functionFragment: "addNft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;

  events: {};
}

export class IVestingNft extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IVestingNftInterface;

  functions: {
    addNft(
      nft: string,
      tokenId: BigNumberish,
      beneficiary: string,
      releaseTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          nft: string;
          tokenId: BigNumber;
          releaseTimestamp: BigNumber;
        }
      ]
    >;

    nft(user: string, overrides?: CallOverrides): Promise<[string]>;

    release(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseTimestamp(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenId(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addNft(
    nft: string,
    tokenId: BigNumberish,
    beneficiary: string,
    releaseTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserInfo(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      nft: string;
      tokenId: BigNumber;
      releaseTimestamp: BigNumber;
    }
  >;

  nft(user: string, overrides?: CallOverrides): Promise<string>;

  release(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseTimestamp(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  tokenId(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addNft(
      nft: string,
      tokenId: BigNumberish,
      beneficiary: string,
      releaseTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        nft: string;
        tokenId: BigNumber;
        releaseTimestamp: BigNumber;
      }
    >;

    nft(user: string, overrides?: CallOverrides): Promise<string>;

    release(user: string, overrides?: CallOverrides): Promise<void>;

    releaseTimestamp(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addNft(
      nft: string,
      tokenId: BigNumberish,
      beneficiary: string,
      releaseTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserInfo(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    nft(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    release(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseTimestamp(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenId(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addNft(
      nft: string,
      tokenId: BigNumberish,
      beneficiary: string,
      releaseTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nft(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseTimestamp(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenId(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
