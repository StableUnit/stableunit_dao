/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICurveLPInterface extends ethers.utils.Interface {
  functions: {
    "add_liquidity(uint256[2],uint256)": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "calc_add_one_coin(uint256[],bool)": FunctionFragment;
    "coins(uint256)": FunctionFragment;
    "get_virtual_price()": FunctionFragment;
    "lp_price()": FunctionFragment;
    "remove_liquidity(uint256,uint256[2])": FunctionFragment;
    "remove_liquidity_one_coin(uint256,int128,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "add_liquidity",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_add_one_coin",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lp_price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "add_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calc_add_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lp_price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICurveLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICurveLPInterface;

  functions: {
    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balances(i: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    calc_add_one_coin(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    get_virtual_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    lp_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    remove_liquidity_one_coin(
      tokenAmount: BigNumberish,
      i: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "add_liquidity(uint256[2],uint256)"(
    arg0: [BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "add_liquidity(uint256[3],uint256)"(
    arg0: [BigNumberish, BigNumberish, BigNumberish],
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  calc_add_one_coin(
    amounts: BigNumberish[],
    deposit: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  coins(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

  lp_price(overrides?: CallOverrides): Promise<BigNumber>;

  "remove_liquidity(uint256,uint256[2])"(
    arg0: BigNumberish,
    arg1: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "remove_liquidity(uint256,uint256[3])"(
    arg0: BigNumberish,
    arg1: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  remove_liquidity_one_coin(
    tokenAmount: BigNumberish,
    i: BigNumberish,
    minAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calc_add_one_coin(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    lp_price(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    remove_liquidity_one_coin(
      tokenAmount: BigNumberish,
      i: BigNumberish,
      minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balances(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calc_add_one_coin(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    get_virtual_price(overrides?: CallOverrides): Promise<BigNumber>;

    lp_price(overrides?: CallOverrides): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    remove_liquidity_one_coin(
      tokenAmount: BigNumberish,
      i: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "add_liquidity(uint256[2],uint256)"(
      arg0: [BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "add_liquidity(uint256[3],uint256)"(
      arg0: [BigNumberish, BigNumberish, BigNumberish],
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balances(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calc_add_one_coin(
      amounts: BigNumberish[],
      deposit: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coins(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_virtual_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lp_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[2])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "remove_liquidity(uint256,uint256[3])"(
      arg0: BigNumberish,
      arg1: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    remove_liquidity_one_coin(
      tokenAmount: BigNumberish,
      i: BigNumberish,
      minAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
