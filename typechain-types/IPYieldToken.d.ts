/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IPYieldTokenInterface extends ethers.utils.Interface {
  functions: {
    "PT()": FunctionFragment;
    "SY()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "doCacheIndexSameBlock()": FunctionFragment;
    "expiry()": FunctionFragment;
    "factory()": FunctionFragment;
    "getRewardTokens()": FunctionFragment;
    "isExpired()": FunctionFragment;
    "mintPY(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "pyIndexCurrent()": FunctionFragment;
    "pyIndexLastUpdatedBlock()": FunctionFragment;
    "pyIndexStored()": FunctionFragment;
    "redeemDueInterestAndRewards(address,bool,bool)": FunctionFragment;
    "redeemPY(address)": FunctionFragment;
    "redeemPYMulti(address[],uint256[])": FunctionFragment;
    "rewardIndexesCurrent()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "userInterest(address)": FunctionFragment;
    "userReward(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PT", values?: undefined): string;
  encodeFunctionData(functionFragment: "SY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doCacheIndexSameBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isExpired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPY",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pyIndexCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexLastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pyIndexStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterestAndRewards",
    values: [string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "redeemPY", values: [string]): string;
  encodeFunctionData(
    functionFragment: "redeemPYMulti",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardIndexesCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userReward",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "PT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doCacheIndexSameBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexLastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pyIndexStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterestAndRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemPY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPYMulti",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardIndexesCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userReward", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,address,uint256,uint256)": EventFragment;
    "Mint(address,address,address,uint256,uint256)": EventFragment;
    "NewInterestIndex(uint256)": EventFragment;
    "RedeemInterest(address,uint256)": EventFragment;
    "RedeemRewards(address,uint256[])": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "WithdrawFeeToTreasury(uint256[],uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewInterestIndex"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFeeToTreasury"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    caller: string;
    receiver: string;
    amountPYToRedeem: BigNumber;
    amountSyOut: BigNumber;
  }
>;

export type MintEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    caller: string;
    receiverPT: string;
    receiverYT: string;
    amountSyToMint: BigNumber;
    amountPYOut: BigNumber;
  }
>;

export type NewInterestIndexEvent = TypedEvent<
  [BigNumber] & { newIndex: BigNumber }
>;

export type RedeemInterestEvent = TypedEvent<
  [string, BigNumber] & { user: string; interestOut: BigNumber }
>;

export type RedeemRewardsEvent = TypedEvent<
  [string, BigNumber[]] & { user: string; amountRewardsOut: BigNumber[] }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type WithdrawFeeToTreasuryEvent = TypedEvent<
  [BigNumber[], BigNumber] & { amountRewardsOut: BigNumber[]; syOut: BigNumber }
>;

export class IPYieldToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPYieldTokenInterface;

  functions: {
    PT(overrides?: CallOverrides): Promise<[string]>;

    SY(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<[boolean]>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getRewardTokens(overrides?: CallOverrides): Promise<[string[]]>;

    isExpired(overrides?: CallOverrides): Promise<[boolean]>;

    mintPY(
      receiverPT: string,
      receiverYT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pyIndexCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pyIndexLastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    pyIndexStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    redeemDueInterestAndRewards(
      user: string,
      redeemInterest: boolean,
      redeemRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPY(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemPYMulti(
      receivers: string[],
      amountPYToRedeems: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardIndexesCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastPYIndex: BigNumber;
        accruedInterest: BigNumber;
      }
    >;

    userReward(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }
    >;
  };

  PT(overrides?: CallOverrides): Promise<string>;

  SY(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  doCacheIndexSameBlock(overrides?: CallOverrides): Promise<boolean>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

  isExpired(overrides?: CallOverrides): Promise<boolean>;

  mintPY(
    receiverPT: string,
    receiverYT: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  pyIndexCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pyIndexLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

  redeemDueInterestAndRewards(
    user: string,
    redeemInterest: boolean,
    redeemRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPY(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemPYMulti(
    receivers: string[],
    amountPYToRedeems: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardIndexesCurrent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInterest(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lastPYIndex: BigNumber;
      accruedInterest: BigNumber;
    }
  >;

  userReward(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }>;

  callStatic: {
    PT(overrides?: CallOverrides): Promise<string>;

    SY(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<boolean>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getRewardTokens(overrides?: CallOverrides): Promise<string[]>;

    isExpired(overrides?: CallOverrides): Promise<boolean>;

    mintPY(
      receiverPT: string,
      receiverYT: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pyIndexCurrent(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

    redeemDueInterestAndRewards(
      user: string,
      redeemInterest: boolean,
      redeemRewards: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber[]] & {
        interestOut: BigNumber;
        rewardsOut: BigNumber[];
      }
    >;

    redeemPY(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    redeemPYMulti(
      receivers: string[],
      amountPYToRedeems: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    rewardIndexesCurrent(overrides?: CallOverrides): Promise<BigNumber[]>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lastPYIndex: BigNumber;
        accruedInterest: BigNumber;
      }
    >;

    userReward(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { index: BigNumber; accrued: BigNumber }
    >;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "Burn(address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      amountPYToRedeem?: null,
      amountSyOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        caller: string;
        receiver: string;
        amountPYToRedeem: BigNumber;
        amountSyOut: BigNumber;
      }
    >;

    Burn(
      caller?: string | null,
      receiver?: string | null,
      amountPYToRedeem?: null,
      amountSyOut?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        caller: string;
        receiver: string;
        amountPYToRedeem: BigNumber;
        amountSyOut: BigNumber;
      }
    >;

    "Mint(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiverPT?: string | null,
      receiverYT?: string | null,
      amountSyToMint?: null,
      amountPYOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        caller: string;
        receiverPT: string;
        receiverYT: string;
        amountSyToMint: BigNumber;
        amountPYOut: BigNumber;
      }
    >;

    Mint(
      caller?: string | null,
      receiverPT?: string | null,
      receiverYT?: string | null,
      amountSyToMint?: null,
      amountPYOut?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        caller: string;
        receiverPT: string;
        receiverYT: string;
        amountSyToMint: BigNumber;
        amountPYOut: BigNumber;
      }
    >;

    "NewInterestIndex(uint256)"(
      newIndex?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newIndex: BigNumber }>;

    NewInterestIndex(
      newIndex?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { newIndex: BigNumber }>;

    "RedeemInterest(address,uint256)"(
      user?: string | null,
      interestOut?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; interestOut: BigNumber }
    >;

    RedeemInterest(
      user?: string | null,
      interestOut?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; interestOut: BigNumber }
    >;

    "RedeemRewards(address,uint256[])"(
      user?: string | null,
      amountRewardsOut?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { user: string; amountRewardsOut: BigNumber[] }
    >;

    RedeemRewards(
      user?: string | null,
      amountRewardsOut?: null
    ): TypedEventFilter<
      [string, BigNumber[]],
      { user: string; amountRewardsOut: BigNumber[] }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "WithdrawFeeToTreasury(uint256[],uint256)"(
      amountRewardsOut?: null,
      syOut?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber],
      { amountRewardsOut: BigNumber[]; syOut: BigNumber }
    >;

    WithdrawFeeToTreasury(
      amountRewardsOut?: null,
      syOut?: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber],
      { amountRewardsOut: BigNumber[]; syOut: BigNumber }
    >;
  };

  estimateGas: {
    PT(overrides?: CallOverrides): Promise<BigNumber>;

    SY(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    doCacheIndexSameBlock(overrides?: CallOverrides): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardTokens(overrides?: CallOverrides): Promise<BigNumber>;

    isExpired(overrides?: CallOverrides): Promise<BigNumber>;

    mintPY(
      receiverPT: string,
      receiverYT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pyIndexLastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    pyIndexStored(overrides?: CallOverrides): Promise<BigNumber>;

    redeemDueInterestAndRewards(
      user: string,
      redeemInterest: boolean,
      redeemRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPY(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemPYMulti(
      receivers: string[],
      amountPYToRedeems: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardIndexesCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInterest(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    userReward(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doCacheIndexSameBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isExpired(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPY(
      receiverPT: string,
      receiverYT: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pyIndexCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pyIndexLastUpdatedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pyIndexStored(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemDueInterestAndRewards(
      user: string,
      redeemInterest: boolean,
      redeemRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPY(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemPYMulti(
      receivers: string[],
      amountPYToRedeems: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardIndexesCurrent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReward(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
