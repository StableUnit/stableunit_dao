/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StargateComposedInterface extends ethers.utils.Interface {
  functions: {
    "OUT_TO_NATIVE()": FunctionFragment;
    "ammRouter()": FunctionFragment;
    "sgReceive(uint16,bytes,uint256,address,uint256,bytes)": FunctionFragment;
    "stargateRouter()": FunctionFragment;
    "swapNativeForNative(uint16,address,uint16,uint16,uint256,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "OUT_TO_NATIVE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ammRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sgReceive",
    values: [
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stargateRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapNativeForNative",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "OUT_TO_NATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ammRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sgReceive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stargateRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNativeForNative",
    data: BytesLike
  ): Result;

  events: {
    "ReceivedOnDestination(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedOnDestination"): EventFragment;
}

export type ReceivedOnDestinationEvent = TypedEvent<
  [string, BigNumber] & { token: string; qty: BigNumber }
>;

export class StargateComposed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StargateComposedInterface;

  functions: {
    OUT_TO_NATIVE(overrides?: CallOverrides): Promise<[string]>;

    ammRouter(overrides?: CallOverrides): Promise<[string]>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<[string]>;

    swapNativeForNative(
      dstChainId: BigNumberish,
      bridgeToken: string,
      srcPoolId: BigNumberish,
      dstPoolId: BigNumberish,
      nativeAmountIn: BigNumberish,
      to: string,
      amountOutMin: BigNumberish,
      amountOutMinSg: BigNumberish,
      amountOutMinDest: BigNumberish,
      deadline: BigNumberish,
      destStargateComposed: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  OUT_TO_NATIVE(overrides?: CallOverrides): Promise<string>;

  ammRouter(overrides?: CallOverrides): Promise<string>;

  sgReceive(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    _token: string,
    amountLD: BigNumberish,
    payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stargateRouter(overrides?: CallOverrides): Promise<string>;

  swapNativeForNative(
    dstChainId: BigNumberish,
    bridgeToken: string,
    srcPoolId: BigNumberish,
    dstPoolId: BigNumberish,
    nativeAmountIn: BigNumberish,
    to: string,
    amountOutMin: BigNumberish,
    amountOutMinSg: BigNumberish,
    amountOutMinDest: BigNumberish,
    deadline: BigNumberish,
    destStargateComposed: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    OUT_TO_NATIVE(overrides?: CallOverrides): Promise<string>;

    ammRouter(overrides?: CallOverrides): Promise<string>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stargateRouter(overrides?: CallOverrides): Promise<string>;

    swapNativeForNative(
      dstChainId: BigNumberish,
      bridgeToken: string,
      srcPoolId: BigNumberish,
      dstPoolId: BigNumberish,
      nativeAmountIn: BigNumberish,
      to: string,
      amountOutMin: BigNumberish,
      amountOutMinSg: BigNumberish,
      amountOutMinDest: BigNumberish,
      deadline: BigNumberish,
      destStargateComposed: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReceivedOnDestination(address,uint256)"(
      token?: null,
      qty?: null
    ): TypedEventFilter<[string, BigNumber], { token: string; qty: BigNumber }>;

    ReceivedOnDestination(
      token?: null,
      qty?: null
    ): TypedEventFilter<[string, BigNumber], { token: string; qty: BigNumber }>;
  };

  estimateGas: {
    OUT_TO_NATIVE(overrides?: CallOverrides): Promise<BigNumber>;

    ammRouter(overrides?: CallOverrides): Promise<BigNumber>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stargateRouter(overrides?: CallOverrides): Promise<BigNumber>;

    swapNativeForNative(
      dstChainId: BigNumberish,
      bridgeToken: string,
      srcPoolId: BigNumberish,
      dstPoolId: BigNumberish,
      nativeAmountIn: BigNumberish,
      to: string,
      amountOutMin: BigNumberish,
      amountOutMinSg: BigNumberish,
      amountOutMinDest: BigNumberish,
      deadline: BigNumberish,
      destStargateComposed: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    OUT_TO_NATIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ammRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sgReceive(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      _token: string,
      amountLD: BigNumberish,
      payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stargateRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapNativeForNative(
      dstChainId: BigNumberish,
      bridgeToken: string,
      srcPoolId: BigNumberish,
      dstPoolId: BigNumberish,
      nativeAmountIn: BigNumberish,
      to: string,
      amountOutMin: BigNumberish,
      amountOutMinSg: BigNumberish,
      amountOutMinDest: BigNumberish,
      deadline: BigNumberish,
      destStargateComposed: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
