/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IStargateWidgetInterface extends ethers.utils.Interface {
  functions: {
    "partnerSwap(bytes2)": FunctionFragment;
    "swapETH(uint16,uint256,uint256,bytes,bytes2,(uint256,address))": FunctionFragment;
    "swapTokens(uint16,uint16,uint16,uint256,uint256,(uint256,uint256,bytes),bytes,bytes2,(uint256,address))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "partnerSwap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETH",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      { tenthBps: BigNumberish; feeCollector: string }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokens",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      {
        dstGasForCall: BigNumberish;
        dstNativeAmount: BigNumberish;
        dstNativeAddr: BytesLike;
      },
      BytesLike,
      BytesLike,
      { tenthBps: BigNumberish; feeCollector: string }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "partnerSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapTokens", data: BytesLike): Result;

  events: {
    "PartnerSwap(bytes2)": EventFragment;
    "WidgetSwapped(bytes2,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PartnerSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WidgetSwapped"): EventFragment;
}

export type PartnerSwapEvent = TypedEvent<[string] & { partnerId: string }>;

export type WidgetSwappedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    partnerId: string;
    tenthBps: BigNumber;
    widgetFee: BigNumber;
  }
>;

export class IStargateWidget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IStargateWidgetInterface;

  functions: {
    partnerSwap(
      _partnerId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapETH(
      _dstChainId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokens(
      _dstChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _lzTxParams: {
        dstGasForCall: BigNumberish;
        dstNativeAmount: BigNumberish;
        dstNativeAddr: BytesLike;
      },
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  partnerSwap(
    _partnerId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapETH(
    _dstChainId: BigNumberish,
    _amountLD: BigNumberish,
    _minAmountLD: BigNumberish,
    _to: BytesLike,
    _partnerId: BytesLike,
    _feeObj: { tenthBps: BigNumberish; feeCollector: string },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokens(
    _dstChainId: BigNumberish,
    _srcPoolId: BigNumberish,
    _dstPoolId: BigNumberish,
    _amountLD: BigNumberish,
    _minAmountLD: BigNumberish,
    _lzTxParams: {
      dstGasForCall: BigNumberish;
      dstNativeAmount: BigNumberish;
      dstNativeAddr: BytesLike;
    },
    _to: BytesLike,
    _partnerId: BytesLike,
    _feeObj: { tenthBps: BigNumberish; feeCollector: string },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    partnerSwap(
      _partnerId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapETH(
      _dstChainId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokens(
      _dstChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _lzTxParams: {
        dstGasForCall: BigNumberish;
        dstNativeAmount: BigNumberish;
        dstNativeAddr: BytesLike;
      },
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PartnerSwap(bytes2)"(
      partnerId?: BytesLike | null
    ): TypedEventFilter<[string], { partnerId: string }>;

    PartnerSwap(
      partnerId?: BytesLike | null
    ): TypedEventFilter<[string], { partnerId: string }>;

    "WidgetSwapped(bytes2,uint256,uint256)"(
      partnerId?: BytesLike | null,
      tenthBps?: null,
      widgetFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { partnerId: string; tenthBps: BigNumber; widgetFee: BigNumber }
    >;

    WidgetSwapped(
      partnerId?: BytesLike | null,
      tenthBps?: null,
      widgetFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { partnerId: string; tenthBps: BigNumber; widgetFee: BigNumber }
    >;
  };

  estimateGas: {
    partnerSwap(
      _partnerId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapETH(
      _dstChainId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokens(
      _dstChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _lzTxParams: {
        dstGasForCall: BigNumberish;
        dstNativeAmount: BigNumberish;
        dstNativeAddr: BytesLike;
      },
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    partnerSwap(
      _partnerId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapETH(
      _dstChainId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokens(
      _dstChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      _lzTxParams: {
        dstGasForCall: BigNumberish;
        dstNativeAmount: BigNumberish;
        dstNativeAddr: BytesLike;
      },
      _to: BytesLike,
      _partnerId: BytesLike,
      _feeObj: { tenthBps: BigNumberish; feeCollector: string },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
