/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LZEndpointMockInterface extends ethers.utils.Interface {
  functions: {
    "blockNextMsg()": FunctionFragment;
    "defaultAdapterParams()": FunctionFragment;
    "estimateFees(uint16,address,bytes,bool,bytes)": FunctionFragment;
    "forceResumeReceive(uint16,bytes)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getConfig(uint16,uint16,address,uint256)": FunctionFragment;
    "getInboundNonce(uint16,bytes)": FunctionFragment;
    "getLengthOfQueue(uint16,bytes)": FunctionFragment;
    "getOutboundNonce(uint16,address)": FunctionFragment;
    "getReceiveLibraryAddress(address)": FunctionFragment;
    "getReceiveVersion(address)": FunctionFragment;
    "getSendLibraryAddress(address)": FunctionFragment;
    "getSendVersion(address)": FunctionFragment;
    "hasStoredPayload(uint16,bytes)": FunctionFragment;
    "inboundNonce(uint16,bytes)": FunctionFragment;
    "isReceivingPayload()": FunctionFragment;
    "isSendingPayload()": FunctionFragment;
    "lzEndpointLookup(address)": FunctionFragment;
    "mockChainId()": FunctionFragment;
    "msgsToDeliver(uint16,bytes,uint256)": FunctionFragment;
    "nextMsgBlocked()": FunctionFragment;
    "oracleFee()": FunctionFragment;
    "outboundNonce(uint16,address)": FunctionFragment;
    "protocolFeeConfig()": FunctionFragment;
    "receivePayload(uint16,bytes,address,uint64,uint256,bytes)": FunctionFragment;
    "relayerFeeConfig()": FunctionFragment;
    "retryPayload(uint16,bytes,bytes)": FunctionFragment;
    "send(uint16,bytes,bytes,address,address,bytes)": FunctionFragment;
    "setConfig(uint16,uint16,uint256,bytes)": FunctionFragment;
    "setDefaultAdapterParams(bytes)": FunctionFragment;
    "setDestLzEndpoint(address,address)": FunctionFragment;
    "setOracleFee(uint256)": FunctionFragment;
    "setProtocolFee(uint256,uint256)": FunctionFragment;
    "setReceiveVersion(uint16)": FunctionFragment;
    "setRelayerPrice(uint128,uint128,uint128,uint64,uint64)": FunctionFragment;
    "setSendVersion(uint16)": FunctionFragment;
    "storedPayload(uint16,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blockNextMsg",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultAdapterParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [BigNumberish, string, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLengthOfQueue",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundNonce",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveLibraryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendLibraryAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendVersion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStoredPayload",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReceivingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSendingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpointLookup",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "msgsToDeliver",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMsgBlocked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracleFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "outboundNonce",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePayload",
    values: [
      BigNumberish,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "relayerFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryPayload",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [BigNumberish, BytesLike, BytesLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultAdapterParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestLzEndpoint",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedPayload",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "blockNextMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLengthOfQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStoredPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReceivingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSendingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lzEndpointLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "msgsToDeliver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMsgBlocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracleFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayerFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultAdapterParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDestLzEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedPayload",
    data: BytesLike
  ): Result;

  events: {
    "PayloadCleared(uint16,bytes,uint64,address)": EventFragment;
    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)": EventFragment;
    "UaForceResumeReceive(uint16,bytes)": EventFragment;
    "ValueTransferFailed(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PayloadCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayloadStored"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UaForceResumeReceive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValueTransferFailed"): EventFragment;
}

export type PayloadClearedEvent = TypedEvent<
  [number, string, BigNumber, string] & {
    srcChainId: number;
    srcAddress: string;
    nonce: BigNumber;
    dstAddress: string;
  }
>;

export type PayloadStoredEvent = TypedEvent<
  [number, string, string, BigNumber, string, string] & {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payload: string;
    reason: string;
  }
>;

export type UaForceResumeReceiveEvent = TypedEvent<
  [number, string] & { chainId: number; srcAddress: string }
>;

export type ValueTransferFailedEvent = TypedEvent<
  [string, BigNumber] & { to: string; quantity: BigNumber }
>;

export class LZEndpointMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LZEndpointMockInterface;

  functions: {
    blockNextMsg(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<[string]>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[number]>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInboundNonce(
      _chainID: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReceiveLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReceiveVersion(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getSendLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isReceivingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    isSendingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    lzEndpointLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mockChainId(overrides?: CallOverrides): Promise<[number]>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nextMsgBlocked(overrides?: CallOverrides): Promise<[boolean]>;

    oracleFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    protocolFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
    >;

    receivePayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayerFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    retryPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      _chainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultAdapterParams(
      _adapterParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleFee(
      _oracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _zroFee: BigNumberish,
      _nativeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRelayerPrice(
      _dstPriceRatio: BigNumberish,
      _dstGasPriceInWei: BigNumberish,
      _dstNativeAmtCap: BigNumberish,
      _baseGas: BigNumberish,
      _gasPerByte: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;
  };

  blockNextMsg(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  defaultAdapterParams(overrides?: CallOverrides): Promise<string>;

  estimateFees(
    _dstChainId: BigNumberish,
    _userApplication: string,
    _payload: BytesLike,
    _payInZRO: boolean,
    _adapterParams: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
  >;

  forceResumeReceive(
    _srcChainId: BigNumberish,
    _path: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<number>;

  getConfig(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getInboundNonce(
    _chainID: BigNumberish,
    _path: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLengthOfQueue(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutboundNonce(
    _chainID: BigNumberish,
    _srcAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceiveLibraryAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

  getSendLibraryAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getSendVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

  hasStoredPayload(
    _srcChainId: BigNumberish,
    _path: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  inboundNonce(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

  isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

  lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

  mockChainId(overrides?: CallOverrides): Promise<number>;

  msgsToDeliver(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      dstAddress: string;
      nonce: BigNumber;
      payload: string;
    }
  >;

  nextMsgBlocked(overrides?: CallOverrides): Promise<boolean>;

  oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

  outboundNonce(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  protocolFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
  >;

  receivePayload(
    _srcChainId: BigNumberish,
    _path: BytesLike,
    _dstAddress: string,
    _nonce: BigNumberish,
    _gasLimit: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayerFeeConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      dstPriceRatio: BigNumber;
      dstGasPriceInWei: BigNumber;
      dstNativeAmtCap: BigNumber;
      baseGas: BigNumber;
      gasPerByte: BigNumber;
    }
  >;

  retryPayload(
    _srcChainId: BigNumberish,
    _path: BytesLike,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    _chainId: BigNumberish,
    _path: BytesLike,
    _payload: BytesLike,
    _refundAddress: string,
    _zroPaymentAddress: string,
    _adapterParams: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultAdapterParams(
    _adapterParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDestLzEndpoint(
    destAddr: string,
    lzEndpointAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleFee(
    _oracleFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _zroFee: BigNumberish,
    _nativeBP: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReceiveVersion(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRelayerPrice(
    _dstPriceRatio: BigNumberish,
    _dstGasPriceInWei: BigNumberish,
    _dstNativeAmtCap: BigNumberish,
    _baseGas: BigNumberish,
    _gasPerByte: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSendVersion(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storedPayload(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      payloadLength: BigNumber;
      dstAddress: string;
      payloadHash: string;
    }
  >;

  callStatic: {
    blockNextMsg(overrides?: CallOverrides): Promise<void>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<string>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }
    >;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainId(overrides?: CallOverrides): Promise<number>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getInboundNonce(
      _chainID: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

    getSendLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

    isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

    lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

    mockChainId(overrides?: CallOverrides): Promise<number>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nextMsgBlocked(overrides?: CallOverrides): Promise<boolean>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { zroFee: BigNumber; nativeBP: BigNumber }
    >;

    receivePayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    relayerFeeConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        dstPriceRatio: BigNumber;
        dstGasPriceInWei: BigNumber;
        dstNativeAmtCap: BigNumber;
        baseGas: BigNumber;
        gasPerByte: BigNumber;
      }
    >;

    retryPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _chainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultAdapterParams(
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleFee(
      _oracleFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _zroFee: BigNumberish,
      _nativeBP: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayerPrice(
      _dstPriceRatio: BigNumberish,
      _dstGasPriceInWei: BigNumberish,
      _dstNativeAmtCap: BigNumberish,
      _baseGas: BigNumberish,
      _gasPerByte: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;
  };

  filters: {
    "PayloadCleared(uint16,bytes,uint64,address)"(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        srcChainId: number;
        srcAddress: string;
        nonce: BigNumber;
        dstAddress: string;
      }
    >;

    PayloadCleared(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        srcChainId: number;
        srcAddress: string;
        nonce: BigNumber;
        dstAddress: string;
      }
    >;

    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)"(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, string, string],
      {
        srcChainId: number;
        srcAddress: string;
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
        reason: string;
      }
    >;

    PayloadStored(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, string, string],
      {
        srcChainId: number;
        srcAddress: string;
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
        reason: string;
      }
    >;

    "UaForceResumeReceive(uint16,bytes)"(
      chainId?: null,
      srcAddress?: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; srcAddress: string }
    >;

    UaForceResumeReceive(
      chainId?: null,
      srcAddress?: null
    ): TypedEventFilter<
      [number, string],
      { chainId: number; srcAddress: string }
    >;

    "ValueTransferFailed(address,uint256)"(
      to?: string | null,
      quantity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; quantity: BigNumber }
    >;

    ValueTransferFailed(
      to?: string | null,
      quantity?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { to: string; quantity: BigNumber }
    >;
  };

  estimateGas: {
    blockNextMsg(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    defaultAdapterParams(overrides?: CallOverrides): Promise<BigNumber>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInboundNonce(
      _chainID: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceiveVersion(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    isSendingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    lzEndpointLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockChainId(overrides?: CallOverrides): Promise<BigNumber>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextMsgBlocked(overrides?: CallOverrides): Promise<BigNumber>;

    oracleFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocolFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    receivePayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayerFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    retryPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      _chainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultAdapterParams(
      _adapterParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleFee(
      _oracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _zroFee: BigNumberish,
      _nativeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRelayerPrice(
      _dstPriceRatio: BigNumberish,
      _dstGasPriceInWei: BigNumberish,
      _dstNativeAmtCap: BigNumberish,
      _baseGas: BigNumberish,
      _gasPerByte: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blockNextMsg(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    defaultAdapterParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateFees(
      _dstChainId: BigNumberish,
      _userApplication: string,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInboundNonce(
      _chainID: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceiveVersion(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendLibraryAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSendVersion(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReceivingPayload(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSendingPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzEndpointLookup(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextMsgBlocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outboundNonce(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayerFeeConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    retryPayload(
      _srcChainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _chainId: BigNumberish,
      _path: BytesLike,
      _payload: BytesLike,
      _refundAddress: string,
      _zroPaymentAddress: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultAdapterParams(
      _adapterParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleFee(
      _oracleFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _zroFee: BigNumberish,
      _nativeBP: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRelayerPrice(
      _dstPriceRatio: BigNumberish,
      _dstGasPriceInWei: BigNumberish,
      _dstNativeAmtCap: BigNumberish,
      _baseGas: BigNumberish,
      _gasPerByte: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
