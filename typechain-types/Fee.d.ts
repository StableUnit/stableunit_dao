/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeeInterface extends ethers.utils.Interface {
  functions: {
    "BP_DENOMINATOR()": FunctionFragment;
    "chainIdToFeeBps(uint16)": FunctionFragment;
    "defaultFeeBp()": FunctionFragment;
    "feeOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "quoteOFTFee(uint16,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultFeeBp(uint16)": FunctionFragment;
    "setFeeBp(uint16,bool,uint16)": FunctionFragment;
    "setFeeOwner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdToFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFeeBp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteOFTFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFeeBp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBp",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setFeeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdToFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteOFTFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFeeBp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeBp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetDefaultFeeBp(uint16)": EventFragment;
    "SetFeeBp(uint16,bool,uint16)": EventFragment;
    "SetFeeOwner(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDefaultFeeBp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeBp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeOwner"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetDefaultFeeBpEvent = TypedEvent<[number] & { feeBp: number }>;

export type SetFeeBpEvent = TypedEvent<
  [number, boolean, number] & {
    dstchainId: number;
    enabled: boolean;
    feeBp: number;
  }
>;

export type SetFeeOwnerEvent = TypedEvent<[string] & { feeOwner: string }>;

export class Fee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeeInterface;

  functions: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainIdToFeeBps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    defaultFeeBp(overrides?: CallOverrides): Promise<[number]>;

    feeOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    quoteOFTFee(
      _dstChainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDefaultFeeBp(
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeBp(
      _dstChainId: BigNumberish,
      _enabled: boolean,
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeOwner(
      _feeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  chainIdToFeeBps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

  defaultFeeBp(overrides?: CallOverrides): Promise<number>;

  feeOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  quoteOFTFee(
    _dstChainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDefaultFeeBp(
    _feeBp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeBp(
    _dstChainId: BigNumberish,
    _enabled: boolean,
    _feeBp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeOwner(
    _feeOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdToFeeBps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, boolean] & { feeBP: number; enabled: boolean }>;

    defaultFeeBp(overrides?: CallOverrides): Promise<number>;

    feeOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    quoteOFTFee(
      _dstChainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultFeeBp(
      _feeBp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeBp(
      _dstChainId: BigNumberish,
      _enabled: boolean,
      _feeBp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeOwner(_feeOwner: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetDefaultFeeBp(uint16)"(
      feeBp?: null
    ): TypedEventFilter<[number], { feeBp: number }>;

    SetDefaultFeeBp(
      feeBp?: null
    ): TypedEventFilter<[number], { feeBp: number }>;

    "SetFeeBp(uint16,bool,uint16)"(
      dstchainId?: null,
      enabled?: null,
      feeBp?: null
    ): TypedEventFilter<
      [number, boolean, number],
      { dstchainId: number; enabled: boolean; feeBp: number }
    >;

    SetFeeBp(
      dstchainId?: null,
      enabled?: null,
      feeBp?: null
    ): TypedEventFilter<
      [number, boolean, number],
      { dstchainId: number; enabled: boolean; feeBp: number }
    >;

    "SetFeeOwner(address)"(
      feeOwner?: null
    ): TypedEventFilter<[string], { feeOwner: string }>;

    SetFeeOwner(
      feeOwner?: null
    ): TypedEventFilter<[string], { feeOwner: string }>;
  };

  estimateGas: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdToFeeBps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultFeeBp(overrides?: CallOverrides): Promise<BigNumber>;

    feeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    quoteOFTFee(
      _dstChainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDefaultFeeBp(
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeBp(
      _dstChainId: BigNumberish,
      _enabled: boolean,
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeOwner(
      _feeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BP_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainIdToFeeBps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultFeeBp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteOFTFee(
      _dstChainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultFeeBp(
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeBp(
      _dstChainId: BigNumberish,
      _enabled: boolean,
      _feeBp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeOwner(
      _feeOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
