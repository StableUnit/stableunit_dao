/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IBonusInterface extends ethers.utils.Interface {
  functions: {
    "distributeXp(address,uint256)": FunctionFragment;
    "getAllocation(address)": FunctionFragment;
    "getBonus(address)": FunctionFragment;
    "getLevel(address)": FunctionFragment;
    "getNftAllocation(address)": FunctionFragment;
    "getNftBonus(address)": FunctionFragment;
    "isTokenTransferable(address,uint256)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setCommunityAdmin(address,uint256,uint16)": FunctionFragment;
    "setNftInfo(address,uint256,uint256)": FunctionFragment;
    "setUserInfo(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "distributeXp",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBonus", values: [string]): string;
  encodeFunctionData(functionFragment: "getLevel", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNftAllocation",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNftBonus", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenTransferable",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommunityAdmin",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserInfo",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeXp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBonus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLevel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNftAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNftBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCommunityAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setNftInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export class IBonus extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IBonusInterface;

  functions: {
    distributeXp(
      user: string,
      xp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllocation(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBonus(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getLevel(user: string, overrides?: CallOverrides): Promise<[number]>;

    getNftAllocation(
      nft: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNftBonus(nft: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    isTokenTransferable(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommunityAdmin(
      admin: string,
      xpLimit: BigNumberish,
      levelLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftInfo(
      nft: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUserInfo(
      user: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  distributeXp(
    user: string,
    xp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllocation(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBonus(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLevel(user: string, overrides?: CallOverrides): Promise<number>;

  getNftAllocation(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

  getNftBonus(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

  isTokenTransferable(
    nft: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setAdmin(
    admin: string,
    isAdmin: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommunityAdmin(
    admin: string,
    xpLimit: BigNumberish,
    levelLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftInfo(
    nft: string,
    allocation: BigNumberish,
    donationBonusRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUserInfo(
    user: string,
    allocation: BigNumberish,
    donationBonusRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributeXp(
      user: string,
      xp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocation(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBonus(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(user: string, overrides?: CallOverrides): Promise<number>;

    getNftAllocation(
      nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftBonus(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTokenTransferable(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommunityAdmin(
      admin: string,
      xpLimit: BigNumberish,
      levelLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftInfo(
      nft: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserInfo(
      user: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    distributeXp(
      user: string,
      xp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllocation(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBonus(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLevel(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNftAllocation(
      nft: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNftBonus(nft: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTokenTransferable(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommunityAdmin(
      admin: string,
      xpLimit: BigNumberish,
      levelLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftInfo(
      nft: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUserInfo(
      user: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributeXp(
      user: string,
      xp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllocation(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBonus(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLevel(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftAllocation(
      nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNftBonus(
      nft: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTokenTransferable(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommunityAdmin(
      admin: string,
      xpLimit: BigNumberish,
      levelLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftInfo(
      nft: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUserInfo(
      user: string,
      allocation: BigNumberish,
      donationBonusRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
